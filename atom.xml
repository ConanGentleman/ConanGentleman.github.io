<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MiDoLi&#39;s Blog</title>
  
  <subtitle>Code builds world !</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-21T15:27:13.760Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MiDoLi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3D数学基础-图形和游戏开发-学习笔记 第二章 矢量</title>
    <link href="http://example.com/2024/09/21/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%9F%A2%E9%87%8F/"/>
    <id>http://example.com/2024/09/21/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%9F%A2%E9%87%8F/</id>
    <published>2024-09-21T14:35:36.000Z</published>
    <updated>2024-09-21T15:27:13.760Z</updated>
    
    <content type="html"><![CDATA[<p>选择性的记录内容，学习笔记</p><span id="more"></span><h1 id="12-矢量叉积"><a href="#12-矢量叉积" class="headerlink" title="12 矢量叉积"></a>12 矢量叉积</h1><h2 id="12-1-正式线性代数规则"><a href="#12-1-正式线性代数规则" class="headerlink" title="12.1 正式线性代数规则"></a>12.1 正式线性代数规则</h2><ol><li>叉积的表示为 <strong>a</strong>x<strong>b</strong> </li><li>叉积的公式：</li></ol><p>$<br>\left[\begin{array}<br>x_1\<br>y_1\<br>z_1\<br>\end{array}\right]<br>\times<br>\left[\begin{array}<br>x_2\<br>y_2\<br>z_2\<br>\end{array}\right]&#x3D;<br>\left[\begin{array}<br>y_1z_2-z_1y_2\<br>z_1x_2-x_1z_2\<br>x_1y_2-y_1x_2\<br>\end{array}\right]<br>$</p><ol><li>叉积和点积具有相同的运算符优先级：乘法正在加减法之前。当点积和叉积一起使用时，叉积优先：$\vec{a}·\vec{b}\times\vec{c}&#x3D;\vec{a}·(\vec{b}\times\vec{c})$，因为如果先算了点积的话，不能采用标量和矢量的叉积。</li><li>叉积的反交换：$\vec{a}\times\vec{b}&#x3D;-(\vec{b}\times\vec{a})$</li></ol><h3 id="12-2-几何解释"><a href="#12-2-几何解释" class="headerlink" title="12.2 几何解释"></a>12.2 几何解释</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;选择性的记录内容，学习笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="3D数学基础" scheme="http://example.com/tags/3D%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>post</title>
    <link href="http://example.com/2024/09/20/%E7%83%AD%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%AD%A6%E4%B9%A0-AssetBundle-AB%E5%8C%85/"/>
    <id>http://example.com/2024/09/20/%E7%83%AD%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%AD%A6%E4%B9%A0-AssetBundle-AB%E5%8C%85/</id>
    <published>2024-09-20T15:31:32.000Z</published>
    <updated>2024-09-20T15:31:32.106Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>3D数学基础-图形和游戏开发-学习笔记 第一章 笛卡尔坐标系</title>
    <link href="http://example.com/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
    <id>http://example.com/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/</id>
    <published>2024-09-20T14:39:26.000Z</published>
    <updated>2024-09-21T15:24:06.280Z</updated>
    
    <content type="html"><![CDATA[<p>选择性的记录内容，学习笔记</p><span id="more"></span><h1 id="1-1-一维数学"><a href="#1-1-一维数学" class="headerlink" title="1.1 一维数学"></a>1.1 一维数学</h1><h1 id="1-2-二维笛卡尔空间"><a href="#1-2-二维笛卡尔空间" class="headerlink" title="1.2 二维笛卡尔空间"></a>1.2 二维笛卡尔空间</h1><h2 id="1-2-2-任意二维坐标空间"><a href="#1-2-2-任意二维坐标空间" class="headerlink" title="1.2.2 任意二维坐标空间"></a>1.2.2 任意二维坐标空间</h2><p>原点、x轴、y轴</p><h2 id="1-2-3-使用笛卡尔坐标指定二维中的位置"><a href="#1-2-3-使用笛卡尔坐标指定二维中的位置" class="headerlink" title="1.2.3 使用笛卡尔坐标指定二维中的位置"></a>1.2.3 使用笛卡尔坐标指定二维中的位置</h2><p>坐标点表示为(x,y)</p><h1 id="1-3-三维笛卡尔空间"><a href="#1-3-三维笛卡尔空间" class="headerlink" title="1.3 三维笛卡尔空间"></a>1.3 三维笛卡尔空间</h1><h2 id="1-3-1-新增维度和轴"><a href="#1-3-1-新增维度和轴" class="headerlink" title="1.3.1 新增维度和轴"></a>1.3.1 新增维度和轴</h2><p>新增z轴</p><h2 id="1-3-2-在三维中制动位置"><a href="#1-3-2-在三维中制动位置" class="headerlink" title="1.3.2 在三维中制动位置"></a>1.3.2 在三维中制动位置</h2><p>坐标点表示为(x,y,z)</p><h2 id="1-3-3-左手与右手坐标空间"><a href="#1-3-3-左手与右手坐标空间" class="headerlink" title="1.3.3 左手与右手坐标空间"></a>1.3.3 左手与右手坐标空间</h2><p><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.3.3%E5%B7%A6%E6%89%8B%E4%B8%8E%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB.jpg"></p><p><strong>1. 左手坐标系</strong></p><ul><li>伸出左手，用拇指和食指做出一个L形</li><li>拇指指向你的右边，食指朝上</li><li>现在伸展你的第三根手指（中指），使它直接指向前方</li></ul><p>这样你就形成了一个<strong>左手坐标系</strong>。你的拇指、食指和第三根（中指）手指分别指向+x、+y和+z方向。</p><p><strong>2. 右手坐标系</strong></p><ul><li>伸出有手，用拇指和食指做出一个L形</li><li>拇指指向你的左边，食指朝上</li><li>现在伸展你的第三根手指（中指），使它直接指向前方<br>这样你就形成了一个<strong>右手坐标系</strong>。你的拇指、食指和第三根（中指）手指分别指向+x、+y和+z方向。</li></ul><p><strong>3. 左旋、右旋坐标系</strong><br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.3.3%E5%B7%A6%E6%97%8B%E3%80%81%E5%8F%B3%E6%97%8B%E5%9D%90%E6%A0%87%E7%B3%BB.jpg"><br>左旋和右旋坐标系在“正旋转”的定义上也有所不同。假设在空间中有一条直线，需要围绕这条直线旋转指定的角度。我们将此线称为旋转轴(Axis of Rotation)。<br>（1） 左（右）手规则。在左（右）手坐标系中，告知哪一个方向是旋转正方向的，哪一个方向是旋转负方向的标准方法称为<strong>左（右）手规则</strong>。</p><ul><li>将左（右）手摆出一个“竖起大拇指”的位置，拇指指向旋转轴的正值端</li><li>此时，围绕旋转轴的正向旋转方向就是手指卷曲的方向。</li></ul><p><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.3.3%E5%B7%A6%E6%97%8B%E3%80%81%E5%8F%B3%E6%97%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E4%B8%BB%E8%BD%B4%E6%97%8B%E8%BD%AC.jpg"><br>（2）从图中可以看出，在<strong>左手坐标系</strong>中，<strong>正向旋转</strong>从轴的正端看时是<strong>顺时针</strong>旋转的;而在<strong>右手坐标系中，正向旋转是逆时针旋转</strong>的。</p><p><strong>4. 左右手坐标系转换</strong></p><p>交换一个轴的正负端</p><p><strong>5. 左右手坐标系的应用</strong><br>一些较新的计算机图形文献使用左手坐标系，而传统的图形文献和更多面向数学的线性代数的研究人员则倾向于使用右手坐标系</p><h2 id="1-3-4-一些使用的重要约定"><a href="#1-3-4-一些使用的重要约定" class="headerlink" title="1.3.4 一些使用的重要约定"></a>1.3.4 一些使用的重要约定</h2><ol><li>在设计三维虚拟世界时，必须事先做出几种设计决策，例如左手或右手坐标系、哪个方向是+y等。</li><li><strong><font color="red">这本书后续将使用左手坐标系(+x、+y和+z方向分别指向右、上和前<br>)作为例子讲解，当出现差异时会特别加以指出</font></strong></li></ol><h1 id="1-4-一些零散的知识"><a href="#1-4-一些零散的知识" class="headerlink" title="1.4 一些零散的知识"></a>1.4 一些零散的知识</h1><h3 id="1-4-1-求和与求积的表示法"><a href="#1-4-1-求和与求积的表示法" class="headerlink" title="1.4.1 求和与求积的表示法"></a>1.4.1 求和与求积的表示法</h3><p><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.1%E6%B1%82%E5%92%8C%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg"><br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.1%E6%B1%82%E7%A7%AF%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg"></p><h2 id="1-4-2-区间符号"><a href="#1-4-2-区间符号" class="headerlink" title="1.4.2 区间符号"></a>1.4.2 区间符号</h2><ul><li>$[a,b]$ 表示 “所有满足$a≤x≤b$的数字$x$” ,是一个闭区间，包含a,b</li><li>$(a,b)$ 表示 “所有满足$a&lt;x&lt;b$的数字$x$” ,是一个开区间，不包含a,b</li><li>$(a,b]$ 与$[a,b)$ 表示半开区间</li></ul><h2 id="1-4-3-角度、度数和弧度"><a href="#1-4-3-角度、度数和弧度" class="headerlink" title="1.4.3 角度、度数和弧度"></a>1.4.3 角度、度数和弧度</h2><p>（1）角度可以测量平面中的旋转量。表示角度的变量通常被赋予希腊字母$\theta$。用于指定角度的最重要的度量单位是<strong>度( °）和弧度（rad）</strong>。</p><p>（2）人类通常使用度（Degree）数来测量角度。<strong>一度表示旋转1&#x2F;360，因此360°代表旋转完整的一圈</strong>。然而，数学家更喜欢以弧度为单位测量角度，<strong>弧度是基于圆的属性的度量单位</strong>。当以弧度指定两条线之间的角度时，<strong>实际上是测量单位圆(以半径为1的原点为中心的圆）的截取弧的长度</strong></p><p>（3）弧度和度数的转换<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.1%E5%BC%A7%E5%BA%A6%E5%92%8C%E8%A7%92%E5%BA%A6%E7%9A%84%E8%BD%AC%E6%8D%A2.jpg"></p><h2 id="1-4-4-三角函数"><a href="#1-4-4-三角函数" class="headerlink" title="1.4.4 三角函数"></a>1.4.4 三角函数</h2><p>（1） 正弦$cos\theta$、余弦$sin\theta$</p><ul><li>在坐标中也有特殊的意义， $cos\theta &#x3D; x$ ,$sin\theta &#x3D; y$</li></ul><p>（2）割线(secant)、余割（cosecant）、切线（tangent）和余切（cotangent）也是有用的三角函数。<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.4%20%E5%89%B2%E7%BA%BF%E3%80%81%E4%BD%99%E5%89%B2%E3%80%81%E5%88%87%E7%BA%BF%E5%92%8C%E4%BD%99%E5%88%87.jpg"></p><p>（3） 勾股与三角函数的对应关系<br>在术语中，勾被称为邻边(Adjacent)，长度为x;股被称为对边(Opposite),长度为y。它们都是相对于角度0进行解释的。同样，在这里字母顺序也是一个有用的记忆辅助手段——Adjacent和 Opposite 的顺序与相应的cosine和 sine 的顺序是相同的。弦则被称为斜边（Hypotenuse)，而缩写词 <strong>hyp、adj和 opp则分别指的是斜边、邻边和对边的长度</strong>，如图所示。<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.4%20%E5%8B%BE%E8%82%A1%E4%B8%8E%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.jpg"></p><ul><li>当$\theta$为钝角时，上述等式不太适用，因为不能形成具有钝角内角的直角三角形。但是，通过在标准位置显示角度并允许旋转的线条为任何长度r，可以使用x、y和r表示以下对比关系。<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.4%20%E5%8B%BE%E8%82%A1%E4%B8%8E%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0_%E8%A7%92%E5%BA%A6%E4%B8%BA%E9%92%9D%E8%A7%92%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"><br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.4%20%E5%8B%BE%E8%82%A1%E4%B8%8E%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0_%E8%A7%92%E5%BA%A6%E4%B8%BA%E9%92%9D%E8%A7%92.jpg"></li></ul><p><strong>（4）常见角度的度数和弧度值，以及相应的三角函数的值</strong>⭐<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.4%20%E5%B8%B8%E8%A7%81%E8%A7%92%E5%BA%A6%E7%9A%84%E5%BA%A6%E6%95%B0%E5%92%8C%E5%BC%A7%E5%BA%A6%E5%80%BC%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E5%80%BC.jpg"><br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.4%20%E5%B8%B8%E8%A7%81%E8%A7%92%E5%BA%A6%E7%9A%84%E5%BA%A6%E6%95%B0%E5%92%8C%E5%BC%A7%E5%BA%A6%E5%80%BC%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E5%80%BC1.jpg"></p><h2 id="1-4-5-三角函数恒等式-⭐"><a href="#1-4-5-三角函数恒等式-⭐" class="headerlink" title="1.4.5 三角函数恒等式 ⭐"></a>1.4.5 三角函数恒等式 ⭐</h2><p>（1）基本恒等式（可基于单位圆的对称性推导出）<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.5%20%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E6%81%92%E7%AD%89%E5%BC%8F.jpg"></p><p>（2）毕达哥拉斯恒等式<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.5%20%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E6%81%92%E7%AD%89%E5%BC%8F_%E6%AF%95%E8%BE%BE%E5%93%A5%E6%8B%89%E6%96%AF%E6%81%92%E7%AD%89%E5%BC%8F.jpg"></p><p>（3）和差公式<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.5%20%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E6%81%92%E7%AD%89%E5%BC%8F_%E5%92%8C%E5%B7%AE%E5%85%AC%E5%BC%8F.jpg"></p><p>（4）等腰三角形恒等式（和差公式的特殊情况）<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.5%20%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E6%81%92%E7%AD%89%E5%BC%8F_%E7%AD%89%E8%85%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%81%92%E7%AD%89%E5%BC%8F.jpg"></p><p>（5）正弦定理与余弦定理<br><img src="/2024/09/20/3D%E6%B8%B8%E6%88%8F%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%9B%BE%E5%BD%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E5%9D%90%E6%A0%87%E7%B3%BB/1.4.5%20%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E6%81%92%E7%AD%89%E5%BC%8F_%E6%AD%A3%E5%BC%A6%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;选择性的记录内容，学习笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="3D数学基础" scheme="http://example.com/tags/3D%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>lua学习笔记1</title>
    <link href="http://example.com/2024/08/20/lua-lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/08/20/lua-lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-08-20T13:46:11.000Z</published>
    <updated>2024-08-20T13:55:21.618Z</updated>
    
    <content type="html"><![CDATA[<p>lua学习笔记</p><span id="more"></span><ul><li><a href="#%E9%9B%B6-%E5%BC%95%E7%94%A8">零 引用</a></li><li><a href="#%E4%B8%80-%E6%A6%82%E8%BF%B0">一 概述</a></li><li><a href="#%E4%BA%8C-%E5%AE%89%E8%A3%85">二 安装</a></li><li><a href="#%E4%B8%89-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">三 基本语法</a><ul><li><a href="#31-%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E7%A8%8B">3.1 交互式编程</a></li><li><a href="#32-%E8%84%9A%E6%9C%AC%E5%BC%8F%E7%BC%96%E7%A8%8B">3.2 脚本式编程</a></li><li><a href="#33-%E6%B3%A8%E9%87%8A">3.3 注释</a></li><li><a href="#34-%E6%A0%87%E8%AF%86%E7%AC%A6">3.4 标识符</a></li></ul></li><li><a href="#%E5%9B%9B-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">四 数据类型</a><ul><li><a href="#41-nil%E7%A9%BA">4.1 nil(空)</a></li><li><a href="#42-boolean%E5%B8%83%E5%B0%94">4.2 boolean（布尔）</a></li><li><a href="#43-number%E6%95%B0%E5%AD%97">4.3 number（数字）</a></li><li><a href="#44-string%E5%AD%97%E7%AC%A6%E4%B8%B2">4.4 string（字符串）</a></li><li><a href="#45-%E8%A1%A8">4.5 表</a></li><li><a href="#46-function%E5%87%BD%E6%95%B0">4.6 function（函数）</a></li><li><a href="#47-thread%E7%BA%BF%E7%A8%8B">4.7 thread（线程）</a></li><li><a href="#48-userdata%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B">4.8 userdata（自定义类型）</a></li></ul></li><li><a href="#%E4%BA%94-%E5%8F%98%E9%87%8F">五 变量</a><ul><li><a href="#51-%E5%8F%98%E9%87%8F">5.1 变量</a></li><li><a href="#52-%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5">5.2 赋值语句</a></li><li><a href="#53-%E7%B4%A2%E5%BC%95">5.3 索引</a></li></ul></li><li><a href="#%E5%85%AD-%E5%BE%AA%E7%8E%AF">六 循环</a><ul><li><a href="#61-%E5%BE%AA%E7%8E%AF%E6%96%B9%E5%BC%8F">6.1 循环方式</a></li><li><a href="#62-%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5">6.2 循环控制语句</a></li><li><a href="#63-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF">6.3 无限循环</a></li></ul></li><li><a href="#%E4%B8%83-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-if-else">七 流程控制 （if else）</a></li><li><a href="#%E5%85%AB-%E5%87%BD%E6%95%B0">八 函数</a><ul><li><a href="#81-%E6%A6%82%E8%BF%B0">8.1 概述</a></li><li><a href="#82-%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">8.2 函数的定义</a></li><li><a href="#83-%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC">8.3 多返回值</a></li><li><a href="#84-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0">8.4 可变参数</a></li></ul></li><li><a href="#%E4%B9%9D-%E8%BF%90%E7%AE%97%E7%AC%A6">九 运算符</a><ul><li><a href="#91-%E8%BF%90%E7%AE%97%E7%AC%A6%E7%B1%BB%E5%9E%8B">9.1 运算符类型</a></li><li><a href="#92-%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6">9.2 算数运算符</a></li><li><a href="#93-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6">9.3 关系运算符</a></li><li><a href="#94-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6">9.4 逻辑运算符</a></li><li><a href="#95-%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97%E7%AC%A6">9.5 其他运算符</a></li><li><a href="#96-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7">9.6 运算符优先级</a></li></ul></li><li><a href="#%E5%8D%81-%E5%AD%97%E7%AC%A6%E4%B8%B2">十 字符串</a><ul><li><a href="#101-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A1%A8%E7%A4%BA">10.1 字符串的表示</a></li><li><a href="#102-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E8%AE%A1%E7%AE%97">10.2 字符串长度计算</a></li><li><a href="#103-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0">10.3 字符串的操作（函数）</a></li><li><a href="#104-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96">10.4 字符串截取</a></li><li><a href="#105-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2">10.5 字符串大小写转换</a></li><li><a href="#106-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E4%B8%8E%E5%8F%8D%E8%BD%AC">10.6 字符串查找与反转</a></li><li><a href="#107-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96">10.7 字符串格式化</a></li><li><a href="#108-%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2">10.8 字符与整数相互转换</a></li><li><a href="#109-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%A4%8D%E5%88%B6">10.9 字符串连接与复制</a></li><li><a href="#1010-%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F">10.10 匹配模式</a></li></ul></li><li><a href="#%E5%8D%81%E4%B8%80-lua%E6%95%B0%E7%BB%84">十一 Lua数组</a><ul><li><a href="#111-%E6%A6%82%E8%BF%B0">11.1 概述</a></li><li><a href="#112-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84">11.2 一维数组</a></li><li><a href="#113-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">11.3 多维数组</a></li></ul></li><li><a href="#%E5%8D%81%E4%BA%8C-%E8%BF%AD%E4%BB%A3%E5%99%A8">十二 迭代器（⭐）</a><ul><li><a href="#121-%E6%A6%82%E8%BF%B0">12.1 概述</a></li><li><a href="#122-%E6%B3%9B%E5%9E%8Bfor%E8%BF%AD%E4%BB%A3%E5%99%A8">12.2 泛型for迭代器</a></li><li><a href="#122-%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8">12.2 无状态的迭代器</a></li><li><a href="#123-%E5%A4%9A%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8">12.3 多状态的迭代器</a></li></ul></li><li><a href="#%E5%8D%81%E4%B8%89-table%E8%A1%A8">十三 table（表）（⭐）</a><ul><li><a href="#131-%E6%A6%82%E8%BF%B0">13.1 概述</a></li><li><a href="#132-%E8%A1%A8table%E7%9A%84%E6%9E%84%E9%80%A0">13.2 表（Table）的构造</a></li><li><a href="#133-table%E6%93%8D%E4%BD%9C">13.3 Table操作</a></li></ul></li><li><a href="#%E5%8D%81%E5%9B%9B-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85">十四 模块与包（⭐）</a><ul><li><a href="#141-%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%AE%9A%E4%B9%89">14.1 概述及定义</a></li><li><a href="#142-%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97require%E5%87%BD%E6%95%B0">14.2 加载模块（require函数）</a></li><li><a href="#143-c%E5%8C%85">14.3 C包</a></li></ul></li><li><a href="#%E5%8D%81%E4%BA%94-%E5%85%83%E8%A1%A8metatable">十五 元表(Metatable)（⭐）</a><ul><li><a href="#151-%E6%A6%82%E8%BF%B0">15.1 概述</a></li><li><a href="#152-__index-%E5%85%83%E6%96%B9%E6%B3%95">15.2 __index 元方法（⭐⭐⭐）</a></li><li><a href="#153-__newindex-%E5%85%83%E6%96%B9%E6%B3%95">15.3 __newindex 元方法（⭐）</a></li><li><a href="#154-rawget%E5%92%8Crawset">15.4 rawget和rawset</a></li><li><a href="#155-%E8%BF%90%E7%AE%97%E5%85%83%E6%96%B9%E6%B3%95-%E4%B8%BA%E8%A1%A8%E6%B7%BB%E5%8A%A0%E6%93%8D%E4%BD%9C%E7%AC%A6">15.5 运算元方法-为表添加操作符</a></li><li><a href="#156-__call%E5%85%83%E6%96%B9%E6%B3%95">15.6 __call元方法</a></li><li><a href="#157-__tostring-%E5%85%83%E6%96%B9%E6%B3%95">15.7 __tostring 元方法</a></li></ul></li><li><a href="#%E5%8D%81%E5%85%AD-%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8Fcoroutine">十六 协同程序（coroutine）（⭐⭐⭐）</a><ul><li><a href="#161-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E5%90%8Ccoroutine">16.1 什么是协同（coroutine）</a></li><li><a href="#162-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">16.2 基本语法</a></li><li><a href="#163-%E5%90%84%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%9A%84%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B">16.3 各个语法的用法实例</a></li><li><a href="#164-%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98">16.4 生产者-消费者问题</a></li><li><a href="#165-%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8F%E5%8C%BA%E5%88%AB">16.5 线程和协同程序区别</a></li></ul></li><li><a href="#%E5%8D%81%E4%B8%83-%E6%96%87%E4%BB%B6io">十七 文件I&#x2F;O</a><ul><li><a href="#171-%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%A8%E6%B3%95">17.1 概述及用法</a></li><li><a href="#172-%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8Fio%E8%B0%83%E7%94%A8">17.2 简单模式（io.调用）</a></li><li><a href="#173-%E5%AE%8C%E5%85%A8%E6%A8%A1%E5%BC%8Ffile%E8%B0%83%E7%94%A8">17.3 完全模式（file:调用）</a></li></ul></li><li><a href="#%E5%8D%81%E5%85%AB-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">十八 错误处理</a><ul><li><a href="#181-%E6%A6%82%E8%BF%B0">18.1 概述</a></li><li><a href="#182-%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF">18.2 语法错误</a></li><li><a href="#183-%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF">18.3 运行错误</a></li><li><a href="#184-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">18.4 错误处理</a></li><li><a href="#185-pcall-%E5%92%8C-xpcalldebug">18.5 pcall 和 xpcall、debug</a></li></ul></li><li><a href="#%E5%8D%81%E4%B9%9D-%E8%B0%83%E8%AF%95debug">十九 调试(Debug)</a><ul><li><a href="#191-%E6%A6%82%E8%BF%B0%E5%8F%8Adebug%E7%9A%84%E6%96%B9%E6%B3%95">19.1 概述及Debug的方法</a></li><li><a href="#192-%E8%B0%83%E8%AF%95%E7%B1%BB%E5%9E%8B">19.2 调试类型</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8D%81-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">二十 垃圾回收</a><ul><li><a href="#201-%E6%A6%82%E8%BF%B0">20.1 概述</a></li><li><a href="#202-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%87%BD%E6%95%B0">20.2 垃圾回收器函数</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8D%81%E4%B8%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">二十一 面向对象（⭐）</a><ul><li><a href="#211-%E6%A6%82%E8%BF%B0">21.1 概述</a></li><li><a href="#212-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81">21.2 面向对象特征</a></li><li><a href="#213-lua-%E4%B8%AD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">21.3 Lua 中面向对象</a></li><li><a href="#214-%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B">21.4 简单实例（⭐）</a></li><li><a href="#215-%E7%82%B9%E8%B0%83%E7%94%A8%E5%92%8C%E5%86%92%E5%8F%B7%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB">21.5 点调用和冒号调用的区别（⭐⭐⭐）</a></li><li><a href="#216-lua-%E7%BB%A7%E6%89%BF">21.6 Lua 继承(⭐⭐⭐)</a></li><li><a href="#217-lua%E5%A4%9A%E6%80%81%E5%87%BD%E6%95%B0%E9%87%8D%E5%86%99">21.7 Lua多态（函数重写）</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8D%81%E4%BA%8C-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AEluasql">二十二 数据库访问（LuaSQL）</a><ul><li><a href="#221-%E6%A6%82%E8%BF%B0">22.1 概述</a></li><li><a href="#222-%E5%AE%89%E8%A3%85">22.2 安装</a></li><li><a href="#223-%E5%AE%9E%E4%BE%8B">22.3 实例</a></li></ul></li></ul><h1 id="零-引用"><a href="#零-引用" class="headerlink" title="零 引用"></a>零 引用</h1><p>本文件内容来自以下网址：</p><ol><li><a href="https://www.runoob.com/lua/lua-tutorial.html">Lua 教程 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://www.runoob.com/manual/lua53doc/contents.html">Lua 5.3 中文参考手册(菜鸟教程翻译)</a></li><li><a href="https://blog.csdn.net/duanxuyun/article/details/4751118">lua 的io操作，非常详细。</a></li></ol><h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><ol><li>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。<br>Lua 是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的，该小组成员有：Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo。</li><li>设计目的<br>其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</li><li>特性</li></ol><ul><li>轻量级: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。</li><li>可扩展: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。</li><li>其它特性:</li><li><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul></li></ul><ol start="4"><li>应用场景<ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench安全系统，如入侵检测系统</li></ul></li></ol><h1 id="二-安装"><a href="#二-安装" class="headerlink" title="二 安装"></a>二 安装</h1><p>首先安装Lua for Windows(exe包)： <a href="https://github.com/rjpcomputing/luaforwindows/releases">Releases · rjpcomputing&#x2F;luaforwindows (github.com)</a><br><img src="/2024/08/20/lua-lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE.jpg"><br>使用IDE：VSCode、IDEA、LuaStudio。这里我使用VSCode进行开发配置，相关配置内容（该内容我们忽略 4. Lua 编译环境配置中的1-6，因为我们下载的exe安装直接帮我们配置好了环境变量了）： <a href="https://blog.csdn.net/yanwennian/article/details/103480938">(3条消息) Visual Studio Code -&gt; VSCode 开发环境搭建 —- Lua 开发环境搭建 及 代码运行（code runner 插件）_vscode安装lua_YanWennian的博客-CSDN博客</a></p><h1 id="三-基本语法"><a href="#三-基本语法" class="headerlink" title="三 基本语法"></a>三 基本语法</h1><h3 id="3-1-交互式编程"><a href="#3-1-交互式编程" class="headerlink" title="3.1 交互式编程"></a>3.1 交互式编程</h3><p>直接在命令行中输入程序并立即查看效果，通过lua -i或lua来启用</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ lua -i </span><br><span class="line">$ Lua <span class="number">5.3</span><span class="number">.0</span>  Copyright (C) <span class="number">1994</span><span class="number">-2015</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; </span><br><span class="line"><span class="comment">-- 执行命令</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;Hello World！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2-脚本式编程"><a href="#3-2-脚本式编程" class="headerlink" title="3.2 脚本式编程"></a>3.2 脚本式编程</h3><ol><li>将代码存储在本地以.lua为扩展名的文件中（ hello.lua ），其中内容为：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www.runoob.com&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>在文件所在目录的终端(或cmd)执行脚本</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ lua hello.lua</span><br><span class="line">Hello World！</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><ol start="3"><li>我们也可以将代码修改为如下形式来执行脚本（在开头添加：#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;lua）：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www.runoob.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中，我们指定了 Lua 的解释器 &#x2F;usr&#x2F;local&#x2F;bin 就是指你本地lua的位置。window安装后的lua可能不太需要，但在linux下需要在头部添加#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;lua。</p><h3 id="3-3-注释"><a href="#3-3-注释" class="headerlink" title="3.3 注释"></a>3.3 注释</h3><ol><li>单行注释<br>两个减号</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br></pre></td></tr></table></figure><ol start="2"><li>多行注释<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> --]]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-4-标识符"><a href="#3-4-标识符" class="headerlink" title="3.4 标识符"></a>3.4 标识符</h3><ol><li>以字母或下划线开头 + 0个或者多个字母、下划线、数字</li><li>最好不要使用下划线加大写字母的标示符，因为Lua的保留字也是这样的。</li><li>Lua 不允许使用特殊字符如 @, $, 和 % 来定义标示符</li><li>Lua 区分大小写。</li><li>一些正确的定义</li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mohd         zara      abc     move<span class="emphasis">_name    a_</span>123</span><br><span class="line">myname50     <span class="emphasis">_temp     j       a23b9        retVal</span></span><br></pre></td></tr></table></figure><ol start="6"><li>关键字</li></ol><p><img src="/2024/08/20/lua-lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="关键字"><br>一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。</p><h1 id="四-数据类型"><a href="#四-数据类型" class="headerlink" title="四 数据类型"></a>四 数据类型</h1><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，<strong>表示一个无效值</strong>（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的<strong>实浮点数</strong></td></tr><tr><td>string</td><td>字符串由一对<strong>双引号或单引号</strong>来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的<strong>函数</strong></td></tr><tr><td>userdata</td><td>表示任意存储在变量中的<strong>C数据结构</strong></td></tr><tr><td>thread</td><td>表示执行的<strong>独立线路</strong>，用于执行<strong>协同程序</strong></td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个”<strong>关联数组</strong>“（associative arrays），数组的<strong>索引</strong>可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”<strong>构造表达式</strong>“来完成，<strong>最简单构造表达式是{}<strong>，用来创建一个</strong>空表</strong>。</td></tr></tbody></table><h3 id="4-1-nil-空"><a href="#4-1-nil-空" class="headerlink" title="4.1 nil(空)"></a>4.1 nil(空)</h3><ol><li>给<strong>全局</strong>变量或者 <strong>table 表</strong>里的变量<strong>赋一个 nil</strong> 值，等同于把它们<strong>删掉</strong></li><li>nil 作比较时应该加上双引号 “：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">type</span>(X)</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt; <span class="built_in">type</span>(X)==<span class="literal">nil</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; <span class="built_in">type</span>(X)==<span class="string">&quot;nil&quot;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">--- 因是 type(X) 实质是返回的 &quot;nil&quot; 字符串，是一个 string 类型：</span></span><br><span class="line"><span class="comment">--- type(type(X))==string</span></span><br></pre></td></tr></table></figure><h3 id="4-2-boolean（布尔）"><a href="#4-2-boolean（布尔）" class="headerlink" title="4.2 boolean（布尔）"></a>4.2 boolean（布尔）</h3><p>boolean 类型只有两个可选值：true（真） 和 false（假），<strong>Lua 把 false 和 nil 看作是 false，其他的都为 true，<font color="red">数字 0 也是 true</font></strong></p><h3 id="4-3-number（数字）"><a href="#4-3-number（数字）" class="headerlink" title="4.3 number（数字）"></a>4.3 number（数字）</h3><p>Lua 默认只有一种 number 类型 – double（双精度）类型 <strong>（默认类型可以修改 luaconf.h 里的定义）</strong></p><h3 id="4-4-string（字符串）"><a href="#4-4-string（字符串）" class="headerlink" title="4.4 string（字符串）"></a>4.4 string（字符串）</h3><ol><li>字符串由一对双引号或单引号来表示</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">&quot;this is string1&quot;</span></span><br><span class="line">string2 = <span class="string">&#x27;this is string2&#x27;</span></span><br><span class="line"></span><br><span class="line">html = <span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;http://www.runoob.com/&quot;&gt;菜鸟教程&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><ol><li>在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span> + <span class="number">6</span>)</span><br><span class="line"><span class="number">8.0</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span> + <span class="string">&quot;6&quot;</span>)</span><br><span class="line"><span class="number">8.0</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;2 + 6&quot;</span>)</span><br><span class="line"><span class="number">2</span> + <span class="number">6</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;-2e2&quot;</span> * <span class="string">&quot;6&quot;</span>)</span><br><span class="line"><span class="number">-1200.0</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span> + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: attempt to perform arithmetic on a <span class="built_in">string</span> value</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">        <span class="built_in">stdin</span>:<span class="number">1</span>: <span class="keyword">in</span> main chunk</span><br><span class="line">        [C]: <span class="keyword">in</span> ?</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ol><li>连接字符串使用 ..</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;a&quot;</span> .. <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ab</span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="number">157</span> .. <span class="number">428</span>)</span><br><span class="line"><span class="number">157428</span></span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><ol><li>使用#来计算字符串长度</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">len</span> = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">&gt; <span class="built_in">print</span>(#<span class="built_in">len</span>)</span><br><span class="line"><span class="number">14</span></span><br><span class="line">&gt; <span class="built_in">print</span>(#<span class="string">&quot;www.runoob.com&quot;</span>)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><h3 id="4-5-表"><a href="#4-5-表" class="headerlink" title="4.5 表"></a>4.5 表</h3><p>在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</p><ol><li>直接初始化表:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个空的 table</span></span><br><span class="line"><span class="keyword">local</span> tbl1 = &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 直接初始表</span></span><br><span class="line"><span class="keyword">local</span> tbl2 = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- table_test.lua 脚本文件</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;value&quot;</span></span><br><span class="line">key = <span class="number">10</span></span><br><span class="line">a[key] = <span class="number">22</span></span><br><span class="line">a[key] = a[key] + <span class="number">11</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">&quot; : &quot;</span> .. v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="3"><li>不同于其他语言的数组把 0 作为数组的初始索引，<strong>在 Lua 里表的默认初始索引一般以 1 开始</strong>。</li><li>table <strong>不会固定长度大小</strong>，有<strong>新数据添加</strong>时 table 长度会<strong>自动增长</strong>，没<strong>初始的 table 都是 nil</strong></li></ol><h3 id="4-6-function（函数）"><a href="#4-6-function（函数）" class="headerlink" title="4.6 function（函数）"></a>4.6 function（函数）</h3><ol><li>在 Lua 中，函数是被看作是”第一类值（First-Class Value）”，函数可以存在变量里:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- function_test.lua 脚本文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * factorial1(n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(factorial1(<span class="number">5</span>))</span><br><span class="line">factorial2 = factorial1</span><br><span class="line"><span class="built_in">print</span>(factorial2(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><ol start="2"><li>function 可以以匿名函数（anonymous function）的方式通过参数传递:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- function_test2.lua 脚本文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span><span class="params">(tab,fun)</span></span></span><br><span class="line">        <span class="keyword">for</span> k ,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line">                <span class="built_in">print</span>(fun(k,v));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tab=&#123;key1=<span class="string">&quot;val1&quot;</span>,key2=<span class="string">&quot;val2&quot;</span>&#125;;</span><br><span class="line">testFun(tab,</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(key,val)</span></span><span class="comment">--匿名函数</span></span><br><span class="line">        <span class="keyword">return</span> key..<span class="string">&quot;=&quot;</span>..val;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-7-thread（线程）"><a href="#4-7-thread（线程）" class="headerlink" title="4.7 thread（线程）"></a>4.7 thread（线程）</h3><p>在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，<strong>拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西</strong>。</p><p>线程跟协程的区别：<strong>线程可以同时多个运行，而协程任意时刻只能运行一个</strong>，并且处于<strong>运行状态的协程只有被挂起（suspend）时才会暂停</strong>。</p><h3 id="4-8-userdata（自定义类型）"><a href="#4-8-userdata（自定义类型）" class="headerlink" title="4.8 userdata（自定义类型）"></a>4.8 userdata（自定义类型）</h3><p>userdata 是一种<strong>用户自定义数据</strong>，用于表示一种<strong>由应用程序或 C&#x2F;C++ 语言库所创建的类型</strong>，可以将任意 C&#x2F;C++ 的任意数据类型的数据（通常是 struct 和 指针）<strong>存储到 Lua 变量中调用</strong>。</p><h1 id="五-变量"><a href="#五-变量" class="headerlink" title="五 变量"></a>五 变量</h1><h3 id="5-1-变量"><a href="#5-1-变量" class="headerlink" title="5.1 变量"></a>5.1 变量</h3><ol><li>变量在使用前，需要在代码中进行声明，即创建该变量。</li><li>Lua 变量有三种类型：全局变量、局部变量、表中的域。<ul><li>Lua 中的<strong>变量全是全局变量</strong>，哪怕是语句块或是函数里，除非<strong>用 local 显式声明为局部变量</strong>。</li><li><strong>局部变量的作用域</strong>为从声明位置开始到所在语句块结束。</li></ul></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- test.lua 文件脚本</span></span><br><span class="line">a = <span class="number">5</span>               <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span>         <span class="comment">-- 局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joke</span><span class="params">()</span></span></span><br><span class="line">    c = <span class="number">5</span>           <span class="comment">-- 全局变量</span></span><br><span class="line">    <span class="keyword">local</span> d = <span class="number">6</span>     <span class="comment">-- 局部变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">joke()</span><br><span class="line"><span class="built_in">print</span>(c,d)          <span class="comment">--&gt; 5 nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="keyword">local</span> a = <span class="number">6</span>     <span class="comment">-- 局部变量</span></span><br><span class="line">    b = <span class="number">6</span>           <span class="comment">-- 对局部变量重新赋值</span></span><br><span class="line">    <span class="built_in">print</span>(a,b);     <span class="comment">--&gt; 6 6</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b)      <span class="comment">--&gt; 5 6</span></span><br></pre></td></tr></table></figure><ol start="3"><li>变量的默认值均为 nil</li></ol><h3 id="5-2-赋值语句"><a href="#5-2-赋值语句" class="headerlink" title="5.2 赋值语句"></a>5.2 赋值语句</h3><ol><li>赋值是改变一个变量的值和改变表域的最基本的方法。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;hello&quot;</span> .. <span class="string">&quot;world&quot;</span></span><br><span class="line">t.n = t.n + <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Lua 可以对<strong>多个变量同时赋值</strong>，变量列表和值列表的各个元素用逗号分开，<strong>赋值语句右边的值会依次赋给左边的变量</strong>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">10</span>, <span class="number">2</span>*x       &lt;<span class="comment">--&gt;       a=10; b=2*x</span></span><br></pre></td></tr></table></figure><ol start="3"><li>遇到赋值语句<strong>Lua会先计算右边所有的值然后再执行赋值操作</strong>，所以我们可以<strong>这样进行交换变量的值：</strong>(⭐)</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = y, x                     <span class="comment">-- swap &#x27;x&#x27; for &#x27;y&#x27;</span></span><br><span class="line">a[i], a[j] = a[j], a[i]         <span class="comment">-- swap &#x27;a[i]&#x27; for &#x27;a[j]&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：<ul><li>a. 变量个数 &gt; 值的个数             按变量个数补足nil</li><li>b. 变量个数 &lt; 值的个数             多余的值会被忽略</li></ul></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)             <span class="comment">--&gt; 0   1   nil</span></span><br><span class="line"> </span><br><span class="line">a, b = a+<span class="number">1</span>, b+<span class="number">1</span>, b+<span class="number">2</span>     <span class="comment">-- value of b+2 is ignored</span></span><br><span class="line"><span class="built_in">print</span>(a,b)               <span class="comment">--&gt; 1   2</span></span><br><span class="line"> </span><br><span class="line">a, b, c = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)             <span class="comment">--&gt; 0   nil   nil</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>应该尽可能的使用局部变量，有两个好处：</strong><ul><li><strong>避免命名冲突</strong>。</li><li>访问局部变量的<strong>速度</strong>比全局变量<strong>更快</strong>。</li></ul></li></ol><h3 id="5-3-索引"><a href="#5-3-索引" class="headerlink" title="5.3 索引"></a>5.3 索引</h3><ol><li>对 table 的索引使用方括号 []。Lua 也提供了 <strong>. 操作</strong>。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t[i]</span><br><span class="line">t.i                 -- 当索引为字符串类型时的一种简化写法</span><br><span class="line">gettable<span class="emphasis">_event(t,i) -- 采用索引访问本质上是一个类似这样的函数调用</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; site = &#123;&#125;</span><br><span class="line">&gt; site[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">&gt; <span class="built_in">print</span>(site[<span class="string">&quot;key&quot;</span>])</span><br><span class="line">www.runoob.com</span><br><span class="line">&gt; <span class="built_in">print</span>(site.key)</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><h1 id="六-循环"><a href="#六-循环" class="headerlink" title="六 循环"></a>六 循环</h1><h3 id="6-1-循环方式"><a href="#6-1-循环方式" class="headerlink" title="6.1 循环方式"></a>6.1 循环方式</h3><ol><li>Lua 语言提供了以下几种循环处理方式：</li></ol><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td>while 循环</td><td>在条件为 true 时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。</td></tr><tr><td>for 循环</td><td>重复执行指定语句，重复次数可在 for 语句中控制。</td></tr><tr><td>repeat…until</td><td>重复执行循环，直到 指定的条件为真时为止</td></tr><tr><td>循环嵌套</td><td>可以在循环内嵌套一个或多个循环语句（while do … end;for … do … end;repeat … until;）</td></tr></tbody></table><h3 id="6-2-循环控制语句"><a href="#6-2-循环控制语句" class="headerlink" title="6.2 循环控制语句"></a>6.2 循环控制语句</h3><ol><li>Lua 支持以下循环控制语句：</li></ol><table><thead><tr><th>控制语句</th><th>描述</th></tr></thead><tbody><tr><td>break 语句</td><td>退出当前循环或语句，并开始脚本执行紧接着的语句。</td></tr><tr><td>goto 语句</td><td>将程序的控制点转移到一个标签处。</td></tr></tbody></table><ol start="2"><li><p>Lua不支持continue，但可以用以下方式实现continue功能：</p><ul><li>使用repeat until实现</li></ul> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">10</span>, <span class="number">1</span>, <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;continue code here&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(i, <span class="string">&quot;loop code here&quot;</span>)</span><br><span class="line"><span class="keyword">until</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>使用goto实现</li></ul> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(i, <span class="string">&quot;yes continue&quot;</span>)</span><br><span class="line">        <span class="keyword">goto</span> continue</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(i, <span class="string">&quot; no continue&quot;</span>)</span><br><span class="line">    ::continue::</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">[[i&#x27;m end]]</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>使用if else实现</li></ul> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">3</span> <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">print</span>(i)   </span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">2</span> <span class="keyword">then</span>     </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;continue the loop&quot;</span>)  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; loop area&quot;</span>)   </span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end of loop&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-3-无限循环"><a href="#6-3-无限循环" class="headerlink" title="6.3 无限循环"></a>6.3 无限循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;循环将永远执行下去&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="七-流程控制-（if-else）"><a href="#七-流程控制-（if-else）" class="headerlink" title="七 流程控制 （if else）"></a>七 流程控制 （if else）</h1><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>if 语句</td><td>if 语句 由一个布尔表达式作为条件判断，其后紧跟其他语句组成。</td></tr><tr><td>if…else</td><td>语句if 语句 可以与 else 语句搭配使用, 在 if 条件表达式为 false 时执行 else 语句代码。</td></tr><tr><td>if 嵌套语句</td><td>你可以在if 或 else if中使用一个或多个 if 或 else if 语句 。</td></tr></tbody></table><p>控制结构的条件表达式结果可以是任何值，Lua认为false和nil为假，true和非nil为真。</p><p><strong>要注意的是Lua中 0 为 true：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[ 0 为 true ]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 为 true&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="八-函数"><a href="#八-函数" class="headerlink" title="八 函数"></a>八 函数</h1><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><ol><li><p>在Lua中，函数是对语句和表达式进行抽象的主要方法。既可以用来处理一些特殊的工作，也可以用来计算一些值。</p></li><li><p>Lua 提供了<strong>许多的内建函数</strong>，你可以很方便的在程序中调用它们，<strong>如print()函数</strong>可以将传入的参数打印在控制台上。</p></li><li><p>Lua 函数主要有两种用途：</p><ul><li>完成指定的任务，这种情况下函数作为调用语句使用；</li><li>计算并返回值，这种情况下函数作为赋值语句的表达式使用。</li></ul></li></ol><h3 id="8-2-函数的定义"><a href="#8-2-函数的定义" class="headerlink" title="8.2 函数的定义"></a>8.2 函数的定义</h3><ol><li><p>Lua 编程语言函数定义格式如下：</p><p> <font color="red">optional_function_scope</font> function <font color="green">function_name</font> ( <font color="blue">argument1, argument2, argument3…, argumentn</font>)<br> <font color="pink">function_body</font><br> return <font color="orange">result_params_comma_separated</font><br> end</p></li><li><p>解析</p></li></ol><ul><li><p><font color="red">optional_function_scope</font>: 该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。</p></li><li><p><font color="green">function_name</font>: 指定函数名称。</p></li><li><p><font color="blue">argument1, argument2, argument3…, argumentn</font>: 函数参数，多个参数以逗号隔开，函数也可以不带参数。</p></li><li><p><font color="pink">function_body</font>: 函数体，函数中需要执行的代码语句块。</p></li><li><p><font color="orange">result_params_comma_separated</font>: 函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。</p></li></ul><ol start="3"><li><p>实例</p><ul><li>定义函数 max()，参数为 num1, num2，用于比较两值的大小，并返回最大值</li></ul> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ 函数返回两个值的最大值 --]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">(num1, num2)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num1 &gt; num2) <span class="keyword">then</span></span><br><span class="line">    result = num1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    result = num2;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><ul><li>Lua 中我们可以将<strong>函数作为参数</strong>传递给函数</li></ul> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myprint = <span class="function"><span class="keyword">function</span><span class="params">(param)</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这是打印函数 -   ##&quot;</span>,param,<span class="string">&quot;##&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(num1,num2,functionPrint)</span></span></span><br><span class="line">result = num1 + num2</span><br><span class="line"><span class="comment">-- 调用传递的函数参数</span></span><br><span class="line">functionPrint(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">myprint(<span class="number">10</span>)</span><br><span class="line"><span class="comment">-- myprint 函数作为参数传递</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">5</span>,myprint)</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-3-多返回值"><a href="#8-3-多返回值" class="headerlink" title="8.3 多返回值"></a>8.3 多返回值</h3><ol><li>Lua函数可以返回多个结果值，比如string.find，其返回匹配串”开始和结束的下标”（如果不存在匹配串返回nil）。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; s, e = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;www.runoob.com&quot;</span>, <span class="string">&quot;runoob&quot;</span>) </span><br><span class="line">&gt; <span class="built_in">print</span>(s, e)</span><br><span class="line"><span class="number">5</span>    <span class="number">10</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Lua函数中，在<strong>return后列出要返回的值</strong>的列表即可返回多值（比如用，隔开）</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maximum</span> <span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">local</span> mi = <span class="number">1</span>             <span class="comment">-- 最大值索引</span></span><br><span class="line">    <span class="keyword">local</span> m = a[mi]          <span class="comment">-- 最大值</span></span><br><span class="line">    <span class="keyword">for</span> i,val <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">       <span class="keyword">if</span> val &gt; m <span class="keyword">then</span></span><br><span class="line">           mi = i</span><br><span class="line">           m = val</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> m, mi <span class="comment">--多返回值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(maximum(&#123;<span class="number">8</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">5</span>&#125;))</span><br></pre></td></tr></table></figure><ol start="2"><li>注意一下多返回值的函数在赋值时的情况，<strong>仅仅只有放在所有逗号之后的那个函数会把返回值展开</strong>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> b,c,d,e = add(),add()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">-- 1</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">-- 1</span></span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment">-- 0</span></span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment">-- nil</span></span><br></pre></td></tr></table></figure><h3 id="8-4-可变参数"><a href="#8-4-可变参数" class="headerlink" title="8.4 可变参数"></a>8.4 可变参数</h3><ol><li>Lua 函数可以接受可变数目的参数，和 C 语言类似，在<strong>函数参数列表中使用三点 … 表示</strong>函数有可变的参数。 (<strong>可变参数通过循环遍历…进行读取</strong>)</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span>  </span><br><span class="line"><span class="keyword">local</span> s = <span class="number">0</span>  </span><br><span class="line">  <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span>   <span class="comment">--&gt; &#123;...&#125; 表示一个由所有变长参数构成的数组  </span></span><br><span class="line">    s = s + v  </span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="keyword">return</span> s  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))  <span class="comment">---&gt;25</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过<strong>select(“#”,…)</strong> 来获取可变参数的数量，<strong>避免</strong>参数中存在 <strong>nil的元素</strong>导致长度计算出错</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">   result = <span class="number">0</span></span><br><span class="line">   <span class="keyword">local</span> <span class="built_in">arg</span>=&#123;...&#125;</span><br><span class="line">   <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">      result = result + v</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;总共传入 &quot;</span> .. <span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,...) .. <span class="string">&quot; 个数&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> result/<span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均值为&quot;</span>,average(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><ol start="3"><li>有时候我们可能需要<strong>几个固定参数加上可变参数</strong>，<strong>固定参数必须放在变长参数之前</strong>:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fwrite</span><span class="params">(fmt, ...)</span></span>  <span class="comment">---&gt; 固定的参数fmt</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(fmt, ...))     </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">fwrite(<span class="string">&quot;runoob\n&quot;</span>)       <span class="comment">---&gt;fmt = &quot;runoob&quot;, 没有变长参数。  </span></span><br><span class="line">fwrite(<span class="string">&quot;%d%d\n&quot;</span>, <span class="number">1</span>, <span class="number">2</span>)   <span class="comment">---&gt;fmt = &quot;%d%d&quot;, 变长参数为 1 和 2</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>通常在遍历变长参数的时候只需要使用 {…}，然而<strong>变长参数可能会包含一些 nil</strong>，那么就<strong>可以用 select 函数来访问变长参数</strong>了：select(‘#’, …) 或者 select(n, …)</p><ul><li><strong>select(‘#’, …) 返回可变参数的长度</strong>。</li><li><strong>select(n, …) 用于返回从起点 n 开始到结束位置的所有参数列表，返回的是多个参数，而不是一个table</strong>。</li></ul></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(...)</span></span></span><br><span class="line">    a = <span class="built_in">select</span>(<span class="number">3</span>,...)  <span class="comment">--&gt;从第三个位置开始，变量 a 对应右边变量列表的第一个参数</span></span><br><span class="line">    <span class="built_in">print</span> (a)</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">select</span>(<span class="number">3</span>,...)) <span class="comment">--&gt;打印所有列表参数</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">--输出</span></span><br><span class="line"><span class="comment">--2</span></span><br><span class="line"><span class="comment">--2       3       4       5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(...)</span></span>  </span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">select</span>(<span class="string">&#x27;#&#x27;</span>, ...) <span class="keyword">do</span>  <span class="comment">--&gt;获取参数总数</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">arg</span> = <span class="built_in">select</span>(i, ...); <span class="comment">--&gt;读取参数，arg 对应的是右边变量列表的第一个参数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;arg&quot;</span>, <span class="built_in">arg</span>);  </span><br><span class="line">        <span class="keyword">end</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">    foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">arg    1</span></span><br><span class="line"><span class="comment">arg    2</span></span><br><span class="line"><span class="comment">arg    3</span></span><br><span class="line"><span class="comment">arg    4</span></span><br><span class="line"><span class="comment">]]</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><h1 id="九-运算符"><a href="#九-运算符" class="headerlink" title="九 运算符"></a>九 运算符</h1><h3 id="9-1-运算符类型"><a href="#9-1-运算符类型" class="headerlink" title="9.1 运算符类型"></a>9.1 运算符类型</h3><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>其他运算符</li></ul><h3 id="9-2-算数运算符"><a href="#9-2-算数运算符" class="headerlink" title="9.2 算数运算符"></a>9.2 算数运算符</h3><ol><li>下表列出了 Lua 语言中的常用算术运算符，设定 A 的值为10，B 的值为 20：</li></ol><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>A + B 输出结果 30</td></tr><tr><td>-</td><td>减法</td><td>A - B 输出结果 -10</td></tr><tr><td>*</td><td>乘法</td><td>A * B 输出结果 200</td></tr><tr><td>&#x2F;</td><td>除法</td><td>B &#x2F; A 输出结果 2</td></tr><tr><td>%</td><td>取余</td><td>B % A 输出结果 0</td></tr><tr><td>^</td><td>乘幂</td><td>A^2 输出结果 100</td></tr><tr><td>-</td><td>负号</td><td>-A 输出结果 -10</td></tr><tr><td>&#x2F;&#x2F;</td><td>整除运算符(&gt;&#x3D;lua5.3)</td><td>5&#x2F;&#x2F;2 输出结果 2</td></tr></tbody></table><ol start="2"><li>在 lua 中，&#x2F; 用作除法运算，计算结果包含小数部分，**&#x2F;&#x2F; 用作整除运算，计算结果不包含小数部分**</li></ol><h3 id="9-3-关系运算符"><a href="#9-3-关系运算符" class="headerlink" title="9.3 关系运算符"></a>9.3 关系运算符</h3><p>下表列出了 Lua 语言中的常用关系运算符，设定 A 的值为10，B 的值为 20：</p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于，检测两个值是否相等，相等返回 true，否则返回 false</td><td>(A &#x3D;&#x3D; B) 为 false。</td></tr><tr><td>~&#x3D;</td><td>不等于，检测两个值是否相等，不相等返回 true，否则返回 false</td><td>(A ~&#x3D; B) 为 true。</td></tr><tr><td>&gt;</td><td>大于，如果左边的值大于右边的值，返回 true，否则返回 false</td><td>(A &gt; B) 为 false。</td></tr><tr><td>&lt;</td><td>小于，如果左边的值大于右边的值，返回 false，否则返回 true</td><td>(A &lt; B) 为 true。</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于，如果左边的值大于等于右边的值，返回 true，否则返回 false</td><td>(A &gt;&#x3D; B) 返回 false。</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于， 如果左边的值小于等于右边的值，返回 true，否则返回 false</td><td>(A &lt;&#x3D; B) 返回 true。</td></tr></tbody></table><h3 id="9-4-逻辑运算符"><a href="#9-4-逻辑运算符" class="headerlink" title="9.4 逻辑运算符"></a>9.4 逻辑运算符</h3><p>下表列出了 Lua 语言中的常用逻辑运算符，设定 A 的值为 true，B 的值为 false： (<strong>lua逻辑运算符也具有短路的功能</strong>)</p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>逻辑与操作符。 若 A 为 false，则返回 A，否则返回 B。</td><td>(A and B) 为 false。</td></tr><tr><td>or</td><td>逻辑或操作符。 若 A 为 true，则返回 A，否则返回 B。</td><td>(A or B) 为 true。</td></tr><tr><td>not</td><td>逻辑非操作符。与逻辑运算结果相反，如果条件为 true，逻辑非为 false。</td><td>not(A and B) 为 true。</td></tr></tbody></table><h3 id="9-5-其他运算符"><a href="#9-5-其他运算符" class="headerlink" title="9.5 其他运算符"></a>9.5 其他运算符</h3><p>下表列出了 Lua 语言中的连接运算符与计算表或字符串长度的运算符：</p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>..</td><td>连接两个字符串</td><td>a..b ，其中 a 为 “Hello “ ， b 为 “World”, 输出结果为 “Hello World”。</td></tr><tr><td>#</td><td>一元运算符，返回字符串或表的长度。</td><td>#”Hello” 返回 5</td></tr></tbody></table><h3 id="9-6-运算符优先级"><a href="#9-6-运算符优先级" class="headerlink" title="9.6 运算符优先级"></a>9.6 运算符优先级</h3><ol><li>从高到低的顺序</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">^</span><br><span class="line"><span class="keyword">not</span>    - (unary)</span><br><span class="line">*      /       %</span><br><span class="line">+      -</span><br><span class="line">..</span><br><span class="line">&lt;      &gt;      &lt;=     &gt;=     ~=     ==</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line"><span class="keyword">or</span></span><br></pre></td></tr></table></figure><ol start="2"><li>除了 ^ 和 .. 外所有的二元运算符都是<strong>左连接</strong>的。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a+i &lt; b/<span class="number">2</span>+<span class="number">1</span>          &lt;<span class="comment">--&gt;       (a+i) &lt; ((b/2)+1)</span></span><br><span class="line"><span class="number">5</span>+x^<span class="number">2</span>*<span class="number">8</span>              &lt;<span class="comment">--&gt;       5+((x^2)*8)</span></span><br><span class="line">a &lt; y <span class="keyword">and</span> y &lt;= z     &lt;<span class="comment">--&gt;       (a &lt; y) and (y &lt;= z)</span></span><br><span class="line">-x^<span class="number">2</span>                 &lt;<span class="comment">--&gt;       -(x^2)</span></span><br><span class="line">x^y^z                &lt;<span class="comment">--&gt;       x^(y^z)</span></span><br></pre></td></tr></table></figure><h1 id="十-字符串"><a href="#十-字符串" class="headerlink" title="十 字符串"></a>十 字符串</h1><h3 id="10-1-字符串的表示"><a href="#10-1-字符串的表示" class="headerlink" title="10.1 字符串的表示"></a>10.1 字符串的表示</h3><ol><li><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。</p></li><li><p>在 Lua 中，字符串是一种基本的数据类型，用于存储文本数据。</p></li><li><p>Lua 中的字符串可以包含任意字符，包括字母、数字、符号、空格以及其他特殊字符。</p></li><li><p>Lua 语言中字符串可以使用以下三种方式来表示：</p><ul><li>单引号间的一串字符。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> str1 = <span class="string">&#x27;This is a string.&#x27;</span></span><br><span class="line"><span class="keyword">local</span> str2 = <span class="string">&quot;This is also a string.&quot;</span></span><br></pre></td></tr></table></figure><ul><li>双引号间的一串字符。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> str = <span class="string">&quot;Hello, &quot;</span></span><br><span class="line"> str = str .. <span class="string">&quot;World!&quot;</span>  <span class="comment">-- 创建一个新的字符串并将其赋值给str</span></span><br><span class="line"> <span class="built_in">print</span>(str)  <span class="comment">-- 输出 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>[[ 与 ]] 间的一串字符</strong>。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> multilineString = <span class="string">[[</span></span><br><span class="line"><span class="string"> This is a multiline string.</span></span><br><span class="line"><span class="string"> It can contain multiple lines of text.</span></span><br><span class="line"><span class="string"> No need for escape characters.</span></span><br><span class="line"><span class="string"> ]]</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(multilineString)</span><br></pre></td></tr></table></figure></li></ol><h3 id="10-2-字符串长度计算"><a href="#10-2-字符串长度计算" class="headerlink" title="10.2 字符串长度计算"></a>10.2 字符串长度计算</h3><ol><li>使用 string.len函数或 utf8.len 函数，包含<strong>中文的一般用 utf8.len</strong>，string.len 函数用于计算<strong>只包含 ASCII 字符串的长度</strong>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> myString = <span class="string">&quot;Hello, 世界!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算字符串的长度（字符个数）</span></span><br><span class="line"><span class="keyword">local</span> length1 = utf8.<span class="built_in">len</span>(myString)</span><br><span class="line"><span class="built_in">print</span>(length1) <span class="comment">-- 输出 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- string.len 函数会导致结果不准确</span></span><br><span class="line"><span class="keyword">local</span> length2 = <span class="built_in">string</span>.<span class="built_in">len</span>(myString)</span><br><span class="line"><span class="built_in">print</span>(length2) <span class="comment">-- 输出 14</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>转义字符用于表示不能直接显示的字符</strong>，比如后退键，回车键等，如在字符串转换双引号可以使用 \</li><li>所有的转义字符和所对应的意义：<br><img src="/2024/08/20/lua-lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E7%9A%84%E6%84%8F%E4%B9%89.png" alt="转义字符的意义"></li></ol><h3 id="10-3-字符串的操作（函数）"><a href="#10-3-字符串的操作（函数）" class="headerlink" title="10.3 字符串的操作（函数）"></a>10.3 字符串的操作（函数）</h3><p>Lua 提供了很多的方法来支持字符串的操作：</p><table><thead><tr><th>序号</th><th>方法 &amp; 用途</th></tr></thead><tbody><tr><td>1</td><td>string.upper(argument)<br><strong>字符串全部转为大写字母</strong>。</td></tr><tr><td>2</td><td>string.lower(argument)<br><strong>字符串全部转为小写字母</strong>。</td></tr><tr><td>3</td><td>string.gsub(mainString,findString,replaceString,num)<br><strong>在字符串中替换</strong>。 <br>mainString 为要操作的字符串， findString 为被替换的字符，replaceString 要替换的字符，num 替换次数（可以忽略，则全部替换），如：<br> &gt; string.gsub(“aaaa”,”a”,”z”,3);<br> zzza    3</td></tr><tr><td>4</td><td>string.find (str, substr, [init, [plain]])<br><strong>在一个指定的目标字符串 str 中搜索指定的内容 substr</strong>，<strong>如果找到了一个匹配的子串，就会返回这个子串的起始索引和结束索引，不存在则返回 nil</strong>。<br>init 指定了搜索的起始位置，默认为 1，可以一个负数，表示从后往前数的字符个数。<br>plain 表示是否使用简单模式，默认为 false，true 只做简单的查找子串的操作，false 表示使用使用正则模式匹配。<br>以下实例查找字符串 “Lua” 的起始索引和结束索引位置：<br> &gt; string.find(“Hello Lua user”, “Lua”, 1) <br>7    9</td></tr><tr><td>5</td><td>string.reverse(arg)<br><strong>字符串反转</strong><br> &gt; string.reverse(“Lua”)<br>auL</td></tr><tr><td>6</td><td>string.format(…)<br>返回一个<strong>类似printf的格式化字符串</strong><br>&gt; string.format(“the value is:%d”,4)<br>the value is:4</td></tr><tr><td>7</td><td>string.char(arg) 和 string.byte(arg[,int])<br>char <strong>将整型数字转成字符并连接</strong>， **byte 转换字符为整数值(可以指定某个字符，默认第一个字符)**。<br>&gt; string.char(97,98,99,100)<br>abcd<br>&gt; string.byte(“ABCD”,4)<br>68<br>&gt; string.byte(“ABCD”)<br>65<br>&gt;</td></tr><tr><td>8</td><td>string.len(arg)<br><strong>计算字符串长度</strong>。<br>string.len(“abc”)<br>3</td></tr><tr><td>9</td><td>string.rep(string, n)<br><strong>返回字符串string的n个拷贝</strong><br>&gt; string.rep(“abcd”,2)<br>abcdabcd</td></tr><tr><td>10</td><td>..<br><strong>链接两个字符串</strong><br>&gt; print(“<a href="http://www.runoob." .."com ">www.runoob.&quot;..&quot;com</a>“)<br><a href="http://www.runoob.com/">www.runoob.com</a></td></tr><tr><td>11</td><td>string.gmatch(str, pattern)<br><strong>返回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串</strong>。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil。<br>&gt; for word in string.gmatch(“Hello Lua user”, “%a+”) do print(word) end<br>Hello<br>Lua<br>user<br></td></tr><tr><td>12</td><td>string.match(str, pattern, init)<br>string.match()<strong>只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1</strong>。<br>在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有成功的配对时, 返回nil。<br>&gt; &#x3D; string.match(“I have 2 questions for you.”, “%d+ %a+”)<br>2 questions<br>&gt; &#x3D; string.format(“%d, %q”, string.match(“I have 2 questions for you.”, “(%d+) (%a+)”))<br>2, “questions”</td></tr></tbody></table><h3 id="10-4-字符串截取"><a href="#10-4-字符串截取" class="headerlink" title="10.4 字符串截取"></a>10.4 字符串截取</h3><ol><li>字符串截取使用 sub() 方法。<strong>string.sub() 用于截取字符串</strong>，原型为：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">sub</span>(s, i [, j])</span><br></pre></td></tr></table></figure><h2 id="参数说明：-s：要截取的字符串。-i：截取开始位置。-j：截取结束位置，默认为-1，最后一个字符。"><a href="#参数说明：-s：要截取的字符串。-i：截取开始位置。-j：截取结束位置，默认为-1，最后一个字符。" class="headerlink" title="参数说明：- s：要截取的字符串。- i：截取开始位置。- j：截取结束位置，默认为 -1，最后一个字符。"></a>参数说明：<br>- s：要截取的字符串。<br>- i：截取开始位置。<br>- j：截取结束位置，默认为 -1，最后一个字符。</h2><ol start="2"><li>实例</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 字符串</span></span><br><span class="line"><span class="keyword">local</span> sourcestr = <span class="string">&quot;prefix--runoobgoogletaobao--suffix&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n原始字符串&quot;</span>, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>, sourcestr))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 截取部分，第4个到第15个</span></span><br><span class="line"><span class="keyword">local</span> first_sub = <span class="built_in">string</span>.<span class="built_in">sub</span>(sourcestr, <span class="number">4</span>, <span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n第一次截取&quot;</span>, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>, first_sub))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取字符串前缀，第1个到第8个</span></span><br><span class="line"><span class="keyword">local</span> second_sub = <span class="built_in">string</span>.<span class="built_in">sub</span>(sourcestr, <span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n第二次截取&quot;</span>, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>, second_sub))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 截取最后10个</span></span><br><span class="line"><span class="keyword">local</span> third_sub = <span class="built_in">string</span>.<span class="built_in">sub</span>(sourcestr, <span class="number">-10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n第三次截取&quot;</span>, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>, third_sub))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 索引越界，输出原始字符串</span></span><br><span class="line"><span class="keyword">local</span> fourth_sub = <span class="built_in">string</span>.<span class="built_in">sub</span>(sourcestr, <span class="number">-100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n第四次截取&quot;</span>, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>, fourth_sub))</span><br></pre></td></tr></table></figure><h3 id="10-5-字符串大小写转换"><a href="#10-5-字符串大小写转换" class="headerlink" title="10.5 字符串大小写转换"></a>10.5 字符串大小写转换</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">&quot;Lua&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">upper</span>(string1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">lower</span>(string1))</span><br></pre></td></tr></table></figure><h3 id="10-6-字符串查找与反转"><a href="#10-6-字符串查找与反转" class="headerlink" title="10.6 字符串查找与反转"></a>10.6 字符串查找与反转</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> = <span class="string">&quot;Lua Tutorial&quot;</span></span><br><span class="line"><span class="comment">-- 查找字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(<span class="built_in">string</span>,<span class="string">&quot;Tutorial&quot;</span>))</span><br><span class="line">reversedString = <span class="built_in">string</span>.<span class="built_in">reverse</span>(<span class="built_in">string</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新字符串为&quot;</span>,reversedString)</span><br></pre></td></tr></table></figure><h3 id="10-7-字符串格式化"><a href="#10-7-字符串格式化" class="headerlink" title="10.7 字符串格式化"></a>10.7 字符串格式化</h3><ol><li>格式字符串可能包含以下的转义码:<ul><li>%c - 接受一个数字, 并将其<strong>转化为ASCII码表中对应的字符</strong></li><li>%d, %i - 接受一个数字并将<strong>其转化为有符号的整数格式</strong></li><li>%o - 接受一个数字并将其转化为<strong>八进制数格式</strong></li><li>%u - 接受一个数字并将其转化为<strong>无符号整数格式</strong></li><li>%x - 接受一个数字并将其转化为<strong>十六进制数格式, 使用小写字母</strong></li><li>%X - 接受一个数字并将其转化为<strong>十六进制数格式, 使用大写字母</strong></li><li>%e - 接受一个数字并将其转化为<strong>科学记数法格式, 使用小写字母e</strong></li><li>%E - 接受一个数字并将其转化为<strong>科学记数法格式, 使用大写字母E</strong></li><li>%f - 接受一个数字并将其转化为<strong>浮点数格式</strong></li><li>%g(%G) - 接受一个数字并将其转化<strong>为%e(%E, 对应%G)及%f中较短的一种格式</strong></li><li>%q - 接受一个字符串并将其转化为<strong>可安全被Lua编译器读入的格式</strong></li><li>%s - 接受一个字符串并<strong>按照给定的参数格式化该字符串</strong></li></ul></li><li>为进一步细化格式, 可以在 <strong>%号后添加参数. 参数将以如下的顺序读入</strong> :<br>(1) <strong>符号</strong>: 一个+号表示其后的数字转义符将让正数显示正号. 默认情况下只有负数显示符号.<br>(2) <strong>占位符</strong>: 一个0, 在后面指定了字串宽度时占位用. 不填时的默认占位符是空格.<br>(3) <strong>对齐标识</strong>: 在指定了字串宽度时, 默认为右对齐, 增加-号可以改为左对齐.<br>(4) <strong>宽度数值</strong><br>(5) <strong>小数位数&#x2F;字串裁切</strong>: 在宽度数值后增加的小数部分n, 若后接f(浮点数转义符, 如%6.3f)则设定该浮点数的小数只保留n位, 若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.<strong>%5.3s表示宽度为5，且保留3位小数</strong></li><li>实例</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">&quot;Lua&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;Tutorial&quot;</span></span><br><span class="line">number1 = <span class="number">10</span></span><br><span class="line">number2 = <span class="number">20</span></span><br><span class="line"><span class="comment">-- 基本字符串格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;基本格式化 %s %s&quot;</span>,string1,string2))</span><br><span class="line"><span class="comment">-- 日期格式化</span></span><br><span class="line"><span class="built_in">date</span> = <span class="number">2</span>; month = <span class="number">1</span>; year = <span class="number">2014</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;日期格式化 %02d/%02d/%04d&quot;</span>, <span class="built_in">date</span>, month, year))</span><br><span class="line"><span class="comment">-- 十进制格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.4f&quot;</span>,<span class="number">1</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%c&quot;</span>, <span class="number">83</span>)                 <span class="comment">-- 输出S</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%+d&quot;</span>, <span class="number">17.0</span>)              <span class="comment">-- 输出+17</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%05d&quot;</span>, <span class="number">17</span>)               <span class="comment">-- 输出00017</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%o&quot;</span>, <span class="number">17</span>)                 <span class="comment">-- 输出21</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%u&quot;</span>, <span class="number">3.14</span>)               <span class="comment">-- 输出3</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>, <span class="number">13</span>)                 <span class="comment">-- 输出d</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%X&quot;</span>, <span class="number">13</span>)                 <span class="comment">-- 输出D</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%e&quot;</span>, <span class="number">1000</span>)               <span class="comment">-- 输出1.000000e+03</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%E&quot;</span>, <span class="number">1000</span>)               <span class="comment">-- 输出1.000000E+03</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%6.3f&quot;</span>, <span class="number">13</span>)              <span class="comment">-- 输出13.000</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>, <span class="string">&quot;One\nTwo&quot;</span>)         <span class="comment">-- 输出&quot;One\</span></span><br><span class="line">                                        <span class="comment">-- 　　Two&quot;</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;monkey&quot;</span>)           <span class="comment">-- 输出monkey</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%10s&quot;</span>, <span class="string">&quot;monkey&quot;</span>)         <span class="comment">-- 输出    monkey</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%5.3s&quot;</span>, <span class="string">&quot;monkey&quot;</span>)        <span class="comment">-- 输出  mon</span></span><br></pre></td></tr></table></figure><h3 id="10-8-字符与整数相互转换"><a href="#10-8-字符与整数相互转换" class="headerlink" title="10.8 字符与整数相互转换"></a>10.8 字符与整数相互转换</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 字符转换</span></span><br><span class="line"><span class="comment">-- 转换第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;Lua&quot;</span>))</span><br><span class="line"><span class="comment">-- 转换第三个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;Lua&quot;</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">-- 转换末尾第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;Lua&quot;</span>,<span class="number">-1</span>))</span><br><span class="line"><span class="comment">-- 第二个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;Lua&quot;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">-- 转换末尾第二个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;Lua&quot;</span>,<span class="number">-2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 整数 ASCII 码转换为字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">76</span></span><br><span class="line"><span class="comment">97</span></span><br><span class="line"><span class="comment">97</span></span><br><span class="line"><span class="comment">117</span></span><br><span class="line"><span class="comment">117</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><h3 id="10-9-字符串连接与复制"><a href="#10-9-字符串连接与复制" class="headerlink" title="10.9 字符串连接与复制"></a>10.9 字符串连接与复制</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">&quot;www.&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;runoob&quot;</span></span><br><span class="line">string3 = <span class="string">&quot;.com&quot;</span></span><br><span class="line"><span class="comment">-- 使用 .. 进行字符串连接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接字符串&quot;</span>,string1..string2..string3)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串长度 &quot;</span>,<span class="built_in">string</span>.<span class="built_in">len</span>(string2))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串复制 2 次</span></span><br><span class="line">repeatedString = <span class="built_in">string</span>.<span class="built_in">rep</span>(string2,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(repeatedString)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">连接字符串    www.runoob.com</span></span><br><span class="line"><span class="comment">字符串长度     6</span></span><br><span class="line"><span class="comment">runoobrunoob    </span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><h3 id="10-10-匹配模式"><a href="#10-10-匹配模式" class="headerlink" title="10.10 匹配模式"></a>10.10 匹配模式</h3><ol><li><p>Lua 中的匹配模式直接用常规的字符串来描述。 它用于模式匹配函数 string.find, string.gmatch, string.gsub, string.match。你<strong>还可以在模式串中使用字符类</strong>。</p></li><li><p>字符类<strong>指可以匹配一个特定字符集合内任何字符的模式项</strong>。比如，<strong>字符类 %d 匹配任意数字</strong>。所以你可以<strong>使用模式串 %d%d&#x2F;%d%d&#x2F;%d%d%d%d 搜索 dd&#x2F;mm&#x2F;yyyy 格式的日期</strong>：</p></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Deadline is 30/05/1999, firm&quot;</span></span><br><span class="line"><span class="built_in">date</span> = <span class="string">&quot;%d%d/%d%d/%d%d%d%d&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(s, <span class="built_in">string</span>.<span class="built_in">find</span>(s, <span class="built_in">date</span>)))    <span class="comment">--&gt; 30/05/1999</span></span><br></pre></td></tr></table></figure><ol start="3"><li>下面的表列出了Lua支持的所有字符类：<br>单个字符 <strong>(除 ^$()%.[]*+-? 外)</strong>: 与该字符自身配对</li></ol><ul><li>.(点): 与任何字符配对</li><li>%a: 与任何字母配对</li><li>%c: 与任何控制符配对(例如\n)</li><li>%d: 与任何数字配对</li><li>%l: 与任何小写字母配对</li><li>%p: 与任何标点(punctuation)配对</li><li>%s: 与空白字符配对</li><li>%u: 与任何大写字母配对</li><li>%w: 与任何字母&#x2F;数字配对</li><li>%x: 与任何十六进制数配对</li><li>%z: 与任何代表0的字符配对</li><li>%x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对</li><li>[数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母&#x2F;数字, 或下划线符号(_)配对</li><li>[^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对</li></ul><p><strong>当上述的字符类用大写书写时, 表示与非此字符类的任何字符配对. 例如, %S表示与任何非空白字符配对.例如，’%A’非字母的字符:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello, up-down!&quot;</span>, <span class="string">&quot;%A&quot;</span>, <span class="string">&quot;.&quot;</span>))</span><br><span class="line">hello..up.down.    <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>数字4不是字符串结果的一部分，他是gsub返回的第二个结果，代表发生替换的次数。</strong><br>在<strong>模式匹配中有一些特殊字符</strong>，他们有特殊的意义，Lua中的特殊字符如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ) . % + - * ? [ ^ $</span><br></pre></td></tr></table></figure><p><strong>‘%’ 用作特殊字符的转义字符，因此 ‘%.’ 匹配点；’%%’ 匹配字符 ‘%’。转义字符 ‘%’不仅可以用来转义特殊字符，还可以用于所有的非字母的字符。</strong></p><ol start="4"><li>模式条目可以是：</li></ol><ul><li>单个字符类匹配该类别中任意单个字符；</li><li>单个字符类跟一个 ‘*‘， 将匹配<strong>零或多个该类的字</strong>符。 这个条目<strong>总是匹配尽可能长的串</strong>；</li><li>单个字符类跟一个 ‘+’， 将匹配<strong>一或更多个该类的字符</strong>。 这个条目总是匹配<strong>尽可能长</strong>的串；</li><li>单个字符类跟一个 ‘-‘， 将匹配<strong>零或更多个该类的字符</strong>。 和 ‘*’ 不同， 这个条目总是匹配<strong>尽可能短</strong>的串；</li><li>单个字符类跟一个 ‘?’， 将匹配<strong>零或一个该类的字符</strong>。 只要有可能，它会匹配一个；</li><li>%n， 这里的 n 可以从 1 到 9； 这个条目匹配<strong>一个等于 n 号捕获物（后面有描述）的子串</strong>。</li><li>%bxy， 这里的 x 和 y 是两个明确的字符； 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。</li><li>%f[set]， 指 边境模式； 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 ‘\0’ 一样。</li></ul><ol start="5"><li>模式：</li></ol><p>模式 指一个模式条目的序列。 <strong>在模式最前面加上符号 ‘^‘ 将锚定从字符串的开始处做匹配</strong>。 在模式最后面加上<strong>符号’$‘<strong>将使匹配过程锚定到</strong>字符串的结尾</strong>。<br>如果 <strong>‘^‘ 和 ‘$‘ 出现在其它位置</strong>，它们均没有特殊含义，<strong>只表示自身</strong>。</p><ol start="6"><li>捕获：</li></ol><p><strong>模式可以在内部用小括号括起一个子模式</strong>； 这些子模式被<strong>称为 捕获物</strong>。 当匹配成功时，由 捕获物 匹配到的字符串中的子串被保存起来用于未来的用途。 捕获物以它们左括号的次序来编号。 例如，对于模式 “(a*(.)%w(%s*))” ， 字符串中匹配到 “a*(.)%w(%s*)” 的部分保存在第一个捕获物中 （因此是编号 1 ）； 由 “.” 匹配到的字符是 2 号捕获物， 匹配到 “%s*” 的那部分是 3 号。</p><p>作为一个特例，<strong>空的捕获 () 将捕获到当前字符串的位置（它是一个数字）</strong>。 例如，如果将模式 “()aa()” 作用到字符串 “flaaap” 上，将产生两个捕获物： 3 和 5 。</p><h1 id="十一-Lua数组"><a href="#十一-Lua数组" class="headerlink" title="十一 Lua数组"></a>十一 Lua数组</h1><h3 id="11-1-概述"><a href="#11-1-概述" class="headerlink" title="11.1 概述"></a>11.1 概述</h3><ol><li><p>数组，就是相<strong>同数据类型的元素按一定顺序排列的集合</strong>，可以是<strong>一维</strong>数组和<strong>多维</strong>数组。</p></li><li><p>在Lua中，数组<strong>不是一种特定的数据类型</strong>，而是一种用来<strong>存储一组值的数据结构</strong>。</p></li><li><p>实际上，<strong>Lua 中并没有专门的数组类型</strong>，而是使用一种被称为 <strong>“table” 的数据结构来实现数组</strong>的功能。</p></li><li><p>Lua 数组的索引键值可以使用整数表示，数组的大小不是固定的。</p></li><li><p>在 <strong>Lua 索引值是以 1 为起始，但你也可以指定 0 开始</strong>。</p></li></ol><h3 id="11-2-一维数组"><a href="#11-2-一维数组" class="headerlink" title="11.2 一维数组"></a>11.2 一维数组</h3><ol><li>索引访问</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个数组</span></span><br><span class="line"><span class="keyword">local</span> myArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 访问数组元素</span></span><br><span class="line"><span class="built_in">print</span>(myArray[<span class="number">1</span>])  <span class="comment">-- 输出 10</span></span><br><span class="line"><span class="built_in">print</span>(myArray[<span class="number">3</span>])  <span class="comment">-- 输出 30</span></span><br></pre></td></tr></table></figure><ol start="2"><li>要计算数组的长度（即数组中元素的个数），你可以使用 # 操作符：(但注意 如果存在连续两个nil夹在数组中间，#只会计算前半截的长度)</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> myArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算数组长度</span></span><br><span class="line"><span class="keyword">local</span> length = #myArray</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length) <span class="comment">-- 输出 5</span></span><br></pre></td></tr></table></figure><ol start="3"><li>一维数组可以用 for 循环出数组中的元素</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个数组</span></span><br><span class="line"><span class="keyword">local</span> myArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #myArray <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(myArray[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="4"><li>lua索引默认从1开始</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array = &#123;<span class="string">&quot;Lua&quot;</span>, <span class="string">&quot;Tutorial&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i= <span class="number">0</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(array[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="5"><li>添加元素</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个数组</span></span><br><span class="line"><span class="keyword">local</span> myArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加新元素到数组末尾</span></span><br><span class="line">myArray[#myArray + <span class="number">1</span>] = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #myArray <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(myArray[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="6"><li>删除元素</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个数组</span></span><br><span class="line"><span class="keyword">local</span> myArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除第三个元素</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(myArray, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #myArray <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(myArray[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="11-3-多维数组"><a href="#11-3-多维数组" class="headerlink" title="11.3 多维数组"></a>11.3 多维数组</h3><ol><li>以下是一个三行三列的阵列多维数组：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 初始化数组</span></span><br><span class="line">array = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">   array[i] = &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> j=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">         array[i][j] = i*j</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 访问数组</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">for</span> j=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">print</span>(array[i][j])</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>不同索引键的三行三列阵列多维数组：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 初始化数组</span></span><br><span class="line">array = &#123;&#125;</span><br><span class="line">maxRows = <span class="number">3</span></span><br><span class="line">maxColumns = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> row=<span class="number">1</span>,maxRows <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">for</span> col=<span class="number">1</span>,maxColumns <span class="keyword">do</span></span><br><span class="line">      array[row*maxColumns +col] = row*col</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 访问数组</span></span><br><span class="line"><span class="keyword">for</span> row=<span class="number">1</span>,maxRows <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">for</span> col=<span class="number">1</span>,maxColumns <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">print</span>(array[row*maxColumns +col])</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>正如你所看到的，以上的实例中，<strong>数组设定了指定的索引值，这样可以避免出现 nil 值，有利于节省内存空间</strong>。</p><h1 id="十二-迭代器（⭐）"><a href="#十二-迭代器（⭐）" class="headerlink" title="十二 迭代器（⭐）"></a>十二 迭代器（⭐）</h1><h3 id="12-1-概述"><a href="#12-1-概述" class="headerlink" title="12.1 概述"></a>12.1 概述</h3><p>迭代器（iterator）是一种对象，它能够<strong>用来遍历标准模板库容器中的部分或全部元素</strong>，每个迭代器对象代表容器中的确定的地址。</p><p>在 Lua 中迭代器是一种支<strong>持指针类型的结构</strong>，它可以遍历集合的每一个元素。</p><h3 id="12-2-泛型for迭代器"><a href="#12-2-泛型for迭代器" class="headerlink" title="12.2 泛型for迭代器"></a>12.2 泛型for迭代器</h3><ol><li><strong>泛型 for</strong> 在自己内部保存迭代函数，实际上它保存三个值： <strong>迭代函数、状态常量、控制变量</strong>。泛型 for 迭代器<strong>提供了集合的 key&#x2F;value</strong> 对，语法格式如下：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面代码中，k, v为变量列表；pairs(t)为表达式列表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array = &#123;<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>以上实例中我们使用了 Lua 默认提供的迭代函数 ipairs。(<strong>建议最好都用pairs</strong>，因为ipairs不能找到0和0以下的自定义索引内容,如果从1开始 索引顺序断了 后面的内容也找不到)。</p><ol start="2"><li>下面我们看看<strong>泛型 for 的执行过程</strong>：</li></ol><ul><li>首先，初始化，<strong>计算 in 后面表达式的值，表达式应该返回泛型 for 需要的三个值：迭代函数、状态常量、控制变量</strong>；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略。</li><li>第二，将<strong>状态常量和控制变量</strong>作为<strong>参数调用迭代函数</strong>（注意：对于 for 结构来说，<strong>状态常量</strong>没有用处，仅仅<strong>在初始化时获取他的值并传递给迭代函数</strong>）。</li><li>第三，将迭<strong>代函数返回的值赋给变量列表</strong>。</li><li>第四，如果<strong>返回的第一个值为nil循环结束</strong>，否则执行循环体。</li><li>第五，回到<strong>第二步再次调用迭代函数</strong></li></ul><ol start="3"><li>在Lua中我们常常<strong>使用函数来描述迭代器</strong>，<strong>每次调用该函数就返回集合的下一个元素</strong>。Lua 的迭代器包含以下两种类型：<ul><li>无状态的迭代器</li><li>多状态的迭代器</li></ul></li></ol><h3 id="12-2-无状态的迭代器"><a href="#12-2-无状态的迭代器" class="headerlink" title="12.2 无状态的迭代器"></a>12.2 无状态的迭代器</h3><ol><li>无状态的迭代器是<strong>指不保留任何状态的迭代器</strong>，因此在循环中我们可以<strong>利用无状态迭代器避免创建闭包花费额外的代价</strong>。</li><li>每一次迭代，<strong>迭代函数都是用两个变量（状态常量和控制变量）的值作为参数被调用</strong>，一个<strong>无状态的迭代器只利用这两个值</strong>可以<strong>获取下一个元素</strong>。</li><li>这种<strong>无状态迭代器的典型的简单的例子是 ipairs</strong>，它<strong>遍历数组的每一个元素，元素的索引需要是数值</strong>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span><span class="params">(iteratorMaxCount,currentNumber)</span></span></span><br><span class="line">   <span class="keyword">if</span> currentNumber&lt;iteratorMaxCount</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">      currentNumber = currentNumber+<span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> currentNumber, currentNumber*currentNumber</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- square,3,0 迭代函数、状态常量、控制变量 currentNumber==currentNumber时 函数square就没有返回值了</span></span><br><span class="line"><span class="keyword">for</span> i,n <span class="keyword">in</span> square,<span class="number">3</span>,<span class="number">0</span> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(i,n)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>ipairs的实现（⭐）</strong><br><strong>迭代的状态包括被遍历的表（循环过程中不会改变的状态常量）和当前的索引下标（控制变量）</strong>，ipairs 和迭代函数都很简单，我们在 Lua 中可以这样实现：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iter</span> <span class="params">(a, i)</span></span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> v = a[i]</span><br><span class="line">    <span class="keyword">if</span> v <span class="keyword">then</span></span><br><span class="line">       <span class="keyword">return</span> i, v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ipairs</span> <span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">return</span> iter, a, <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>当 Lua 调用 ipairs(a) 开始循环时，他获取三个值：迭代函数 iter、状态常量 a、控制变量初始值 0；然后 Lua 调用 iter(a,0) 返回 1, a[1]（除非 a[1]&#x3D;nil）；第二次迭代调用 iter(a,1) 返回 2, a[2]……直到第一个 nil 元素。</strong></p><h3 id="12-3-多状态的迭代器"><a href="#12-3-多状态的迭代器" class="headerlink" title="12.3 多状态的迭代器"></a>12.3 多状态的迭代器</h3><ol><li>很多情况下，<strong>迭代器需要保存多个状态信息而不是简单的状态常量和控制变量</strong>，最<strong>简单的方法是使用闭包</strong>，<strong>还有一种方法</strong>就是将所有的状态<strong>信息封装到 table 内</strong>，将 table <strong>作为迭代器的状态常量</strong>，因为这种情况下可以将所有的信息存放在 table 内，<strong>所以迭代函数通常不需要第二个参数</strong>。</li><li>创建自己的迭代器</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">array = &#123;<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elementIterator</span> <span class="params">(collection)</span></span></span><br><span class="line">   <span class="keyword">local</span> index = <span class="number">0</span></span><br><span class="line">   <span class="keyword">local</span> count = #collection</span><br><span class="line">   <span class="comment">-- 闭包函数</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">      index = index + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> index &lt;= count</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">         <span class="comment">--  返回迭代器的当前元素</span></span><br><span class="line">         <span class="keyword">return</span> collection[index]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elementIterator(array)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(element)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">Google</span></span><br><span class="line"><span class="comment">Runoob    </span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><p>以上实例中我们可以看到，<strong>elementIterator 内使用了闭包函数，实现计算集合大小并输出各个元素</strong>。</p><h1 id="十三-table（表）（⭐）"><a href="#十三-table（表）（⭐）" class="headerlink" title="十三 table（表）（⭐）"></a>十三 table（表）（⭐）</h1><h3 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h3><ol><li><p>table 是 Lua 的<strong>一种数据结构用来帮助我们创建不同的数据类型</strong>，如：<strong>数组、字典</strong>等。</p></li><li><p>Lua table <strong>使用关联型数组</strong>，你可以<strong>用任意类型的值来作数组的索引</strong>，但这个值<strong>不能是 nil</strong>。</p></li><li><p>Lua table 是<strong>不固定大小的</strong>，你可以根据自己需要进行扩容。</p></li><li><p>Lua也是 <strong>通过table来解决模块（module）、包（package）和对象（Object）</strong> 的。 例如string.format表示使用”format”来索引table string。</p></li></ol><h3 id="13-2-表（Table）的构造"><a href="#13-2-表（Table）的构造" class="headerlink" title="13.2 表（Table）的构造"></a>13.2 表（Table）的构造</h3><ol><li>构造器是创建和初始化表的表达式。表是Lua特有的功能强大的东西。**最简单的构造函数是{}**，用来创建一个空表。可以直接初始化数组:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 初始化表</span></span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定值</span></span><br><span class="line">mytable[<span class="number">1</span>]= <span class="string">&quot;Lua&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移除引用</span></span><br><span class="line">mytable = <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- lua 垃圾回收会释放内存</span></span><br></pre></td></tr></table></figure><ol start="2"><li>当我们为 <strong>table a 并设置元素，然后将 a 赋值给 b，则 a 与 b 都指向同一个内存</strong>。如果 <strong>a 设置为 nil ，则 b 同样能访问 table 的元素</strong>。如果没有指定的变量指向a，Lua的垃圾回收机制会清理相对应的内存。<br>以下实例演示了以上的描述情况：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简单的 table</span></span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 的类型是 &quot;</span>,<span class="built_in">type</span>(mytable))</span><br><span class="line"></span><br><span class="line">mytable[<span class="number">1</span>]= <span class="string">&quot;Lua&quot;</span></span><br><span class="line">mytable[<span class="string">&quot;wow&quot;</span>] = <span class="string">&quot;修改前&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 索引为 1 的元素是 &quot;</span>, mytable[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- alternatetable和mytable的是指同一个 table</span></span><br><span class="line">alternatetable = mytable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;alternatetable 索引为 1 的元素是 &quot;</span>, alternatetable[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;alternatetable 索引为 wow 的元素是 &quot;</span>, alternatetable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line">alternatetable[<span class="string">&quot;wow&quot;</span>] = <span class="string">&quot;修改后&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放变量</span></span><br><span class="line">alternatetable = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;alternatetable 是 &quot;</span>, alternatetable)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mytable 仍然可以访问</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line">mytable = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 是 &quot;</span>, mytable)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">mytable 的类型是        table</span></span><br><span class="line"><span class="comment">mytable 索引为 1 的元素是       Lua</span></span><br><span class="line"><span class="comment">mytable 索引为 wow 的元素是     修改前</span></span><br><span class="line"><span class="comment">alternatetable 索引为 1 的元素是        Lua</span></span><br><span class="line"><span class="comment">alternatetable 索引为 wow 的元素是      修改前</span></span><br><span class="line"><span class="comment">mytable 索引为 wow 的元素是     修改后</span></span><br><span class="line"><span class="comment">alternatetable 是       nil</span></span><br><span class="line"><span class="comment">mytable 索引为 wow 的元素是     修改后</span></span><br><span class="line"><span class="comment">mytable 是      nil</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --]]</span></span><br></pre></td></tr></table></figure><h3 id="13-3-Table操作"><a href="#13-3-Table操作" class="headerlink" title="13.3 Table操作"></a>13.3 Table操作</h3><ol><li>常用方法</li></ol><table><thead><tr><th>序号</th><th>方法 &amp; 用途</th></tr></thead><tbody><tr><td>1</td><td><strong>table.concat (table [, sep [, start [, end]]])</strong><br>concat是concatenate(连锁, 连接)的缩写. table.concat()函数列出参数中<strong>指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(sep)隔开</strong>。</td></tr><tr><td>2</td><td><strong>table.insert (table, [pos,] value)</strong><br>在table的数组部分<strong>指定位置(pos)插入值为value的一个元素</strong>. pos参数可选, 默认为数组部分末尾.</td></tr><tr><td>3</td><td><strong>table.maxn (table)</strong><br>指定table中<strong>所有正数key值中最大的key值</strong>. 如果<strong>不存在</strong>key值为正数的元素, <strong>则返回0</strong>。(<strong>Lua5.2之后该方法已经不存在了</strong>,本文使用了自定义函数实现)</td></tr><tr><td>4</td><td><strong>table.remove (table [, pos])</strong><br><strong>返回table数组部分位于pos位置的元素</strong>. 其后的元素会被前移. <strong>pos参数可选, 默认为table长度, 即从最后一个元素删起</strong>。</td></tr><tr><td>5</td><td><strong>table.sort (table [, comp])</strong><br>对给定的table进行<strong>升序排序</strong>。</td></tr></tbody></table><ol start="2"><li>Table连接<br>使用 concat() 输出一个列表中元素连接成的字符串:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- 返回 table 连接后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接后的字符串 &quot;</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定连接字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接后的字符串 &quot;</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">&quot;, &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定索引来连接 table</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接后的字符串 &quot;</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">&quot;, &quot;</span>, <span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">连接后的字符串     bananaorangeapple</span></span><br><span class="line"><span class="comment">连接后的字符串     banana, orange, apple</span></span><br><span class="line"><span class="comment">连接后的字符串     orange, apple</span></span><br><span class="line"><span class="comment">    --]]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>插入和移除</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在末尾插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="string">&quot;mango&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;索引为 4 的元素为 &quot;</span>,fruits[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在索引为 2 的键处插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="number">2</span>,<span class="string">&quot;grapes&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;索引为 2 的元素为 &quot;</span>,fruits[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最后一个元素为 &quot;</span>,fruits[<span class="number">5</span>])</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除后最后一个元素为 &quot;</span>,fruits[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">索引为 4 的元素为     mango</span></span><br><span class="line"><span class="comment">索引为 2 的元素为     grapes</span></span><br><span class="line"><span class="comment">最后一个元素为     mango</span></span><br><span class="line"><span class="comment">移除后最后一个元素为     nil</span></span><br><span class="line"><span class="comment">    --]]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Table排序<br>以下实例演示了 sort() 方法的使用，用于对 Table 进行排序：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;grapes&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序前&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="十四-模块与包（⭐）"><a href="#十四-模块与包（⭐）" class="headerlink" title="十四 模块与包（⭐）"></a>十四 模块与包（⭐）</h1><h3 id="14-1-概述及定义"><a href="#14-1-概述及定义" class="headerlink" title="14.1 概述及定义"></a>14.1 概述及定义</h3><ol><li><p><strong>模块类似于一个封装库</strong>，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些<strong>公用的代码放在一个文件里</strong>，<strong>以 API 接口的形式在其他地方调用</strong>，有利于代码的重用和降低代码耦合度</p></li><li><p><strong>Lua 的模块是由变量、函数等已知元素组成的 table</strong>，因此<strong>创建一个模块</strong>很简单，<strong>就是创建一个 table</strong>，然后把需要导出的常量、函数放入其中，最后返回这个 table 就行。以下为创建自定义模块 module.lua，文件代码格式如下：</p></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 文件名为 module.lua</span></span><br><span class="line"><span class="comment">-- 定义一个名为 module 的模块</span></span><br><span class="line"><span class="built_in">module</span> = &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 定义一个常量</span></span><br><span class="line"><span class="built_in">module</span>.constant = <span class="string">&quot;这是一个常量&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;这是一个公有函数！\n&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个私有函数！&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func3</span><span class="params">()</span></span></span><br><span class="line">    func2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure><p>由上可知，模块的结构就是一个 table 的结构，因此可以<strong>像操作调用 table 里的元素那样来操作调用模块里的常量或函数</strong>。</p><p><strong>上面的 func2</strong> 声明为程序块的局部变量，即<strong>表示一个私有函数</strong>，因此是不能从外部访问模块里的这个私有函数，<strong>必须通过模块里的公有函数来调用</strong>.</p><h3 id="14-2-加载模块（require函数）"><a href="#14-2-加载模块（require函数）" class="headerlink" title="14.2 加载模块（require函数）"></a>14.2 加载模块（require函数）</h3><ol><li>Lua提供了一个名为<strong>require的函数用来加载模块</strong>。要加载一个模块，只需要简单地调用就可以了。例如：</li><li>执行 <strong>require 后会返回一个由模块常量或函数组成的 table</strong>，并且<strong>还会定义一个包含该table 的全局变量</strong>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- test_module.lua 文件</span></span><br><span class="line"><span class="comment">-- module 模块为上文提到到 module.lua</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">module</span>.constant)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.func3()</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">这是一个常量</span></span><br><span class="line"><span class="comment">这是一个私有函数！</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><p>或者给加载的模块定义一个别名变量，方便调用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- test_module2.lua 文件</span></span><br><span class="line"><span class="comment">-- module 模块为上文提到到 module.lua</span></span><br><span class="line"><span class="comment">-- 别名变量 m</span></span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(m.constant)</span><br><span class="line"> </span><br><span class="line">m.func3()</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>加载机制（⭐）</strong></li></ol><ul><li><p>对于<strong>自定义的模块</strong>，模块文件<strong>不是放在哪个文件目录都行</strong>，函数 require 有它自己的文件路径加载策略，它会尝试从 Lua 文件或 C 程序库中加载模块。</p></li><li><p><strong>require 用于搜索 Lua 文件的路径是存放在全局变量 package.path</strong> 中，当 <strong>Lua 启动后</strong>，会<strong>以环境变量 LUA_PATH 的值来初始这个环境变量</strong>。如果<strong>没有找到该环境变量</strong>，<strong>则使用一个编译时定义的默认路径来初始化</strong>。</p></li><li><p>当然，<strong>如果没有 LUA_PATH 这个环境变量，也可以自定义设置，在当前用户根目录下打开 .profile 文件</strong>（<strong>没有则创建，打开 .bashrc 文件也可以</strong>），例如把 <strong>“~&#x2F;lua&#x2F;“ 路径加入 LUA_PATH 环境变量里：</strong></p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#LUA_PATH</span><br><span class="line">export LUA_PATH=<span class="string">&quot;~/lua/?.lua;;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>文件路径以 “;” 号分隔</strong>，最后的 2 个 “;;” 表示新加的路径后面加上原来的默认路径。</p></li><li><p>接着，<strong>更新环境变量参数</strong>，使之立即生效。</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><ul><li>这时假设 package.path 的值是：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/dengjoe/lua/?.lua;./?.lua;/usr/<span class="keyword">local</span>/share/lua/<span class="number">5.1</span>/?.lua;/usr/<span class="keyword">local</span>/share/lua/<span class="number">5.1</span>/?/init.lua;/usr/<span class="keyword">local</span>/lib/lua/<span class="number">5.1</span>/?.lua;/usr/<span class="keyword">local</span>/lib/lua/<span class="number">5.1</span>/?/init.lua</span><br></pre></td></tr></table></figure><ul><li>那么调用 require(“module”) 时就会尝试打开以下文件目录去搜索目标。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Users/dengjoe/lua/<span class="built_in">module</span>.lua;</span><br><span class="line">./<span class="built_in">module</span>.lua</span><br><span class="line">/usr/<span class="keyword">local</span>/share/lua/<span class="number">5.1</span>/<span class="built_in">module</span>.lua</span><br><span class="line">/usr/<span class="keyword">local</span>/share/lua/<span class="number">5.1</span>/<span class="built_in">module</span>/init.lua</span><br><span class="line">/usr/<span class="keyword">local</span>/lib/lua/<span class="number">5.1</span>/<span class="built_in">module</span>.lua</span><br><span class="line">/usr/<span class="keyword">local</span>/lib/lua/<span class="number">5.1</span>/<span class="built_in">module</span>/init.lua</span><br></pre></td></tr></table></figure><h3 id="14-3-C包"><a href="#14-3-C包" class="headerlink" title="14.3 C包"></a>14.3 C包</h3><ol><li><p>Lua和C是很容易结合的，使用 C 为 Lua 写包。</p></li><li><p>与Lua中写包不同，<strong>C包在使用以前必须首先加载并连接</strong>，在大多数系统中最容易的实现方式是通过动态连接库机制。</p></li><li><p>Lua在一个叫<strong>loadlib的函数内提供了所有的动态连接的功能</strong>。这个函数有<strong>两个参数:库的绝对路径和初始化函数</strong>。所以典型的调用的例子如下:</p></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = <span class="string">&quot;/usr/local/lua/lib/libluasocket.so&quot;</span></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">loadlib</span>(<span class="built_in">path</span>, <span class="string">&quot;luaopen_socket&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>loadlib 函数<strong>加载指定的库并且连接到 Lua</strong>，然而它<strong>并不打开库</strong>（也就是说<strong>没有调用初始化函数</strong>），反之他<strong>返回初始化函数作为 Lua 的一个函数</strong>，这样我们就可以<strong>直接在Lua中调用他</strong>。</li><li>如果加载动态库或者查找初始化函数时<strong>出错</strong>，<strong>loadlib 将返回 nil 和错误信息</strong>。我们可以修改前面一段代码，使其<strong>检测错误然后调用初始化函数</strong>：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = <span class="string">&quot;/usr/local/lua/lib/libluasocket.so&quot;</span></span><br><span class="line"><span class="comment">-- 或者 path = &quot;C:\\windows\\luasocket.dll&quot;，这是 Window 平台下</span></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">loadlib</span>(<span class="built_in">path</span>, <span class="string">&quot;luaopen_socket&quot;</span>))</span><br><span class="line">f()  <span class="comment">-- 真正打开库</span></span><br></pre></td></tr></table></figure><p>一般情况下我们期望二进制的发布库包含一个与前面代码段相似的 stub 文件，安装二进制库的时候可以随便放在某个目录，只需要修改 stub 文件对应二进制库的实际路径即可。</p><p><strong>将 stub 文件所在的目录加入到 LUA_PATH，这样设定后就可以使用 require 函数加载 C 库了</strong>。</p><h1 id="十五-元表-Metatable-（⭐）"><a href="#十五-元表-Metatable-（⭐）" class="headerlink" title="十五 元表(Metatable)（⭐）"></a>十五 元表(Metatable)（⭐）</h1><h3 id="15-1-概述"><a href="#15-1-概述" class="headerlink" title="15.1 概述"></a>15.1 概述</h3><ol><li><p>在 Lua table 中我们可以访问对应的 key 来得到 value 值，但是却无法对两个 table 进行操作(比如相加)。</p></li><li><p>因此 <strong>Lua 提供了元表(Metatable)<strong>，允许我们改变 table 的行为，每个行为关联了对应的</strong>元方法</strong>。<br>例如，<strong>使用元表我们可以定义 Lua 如何计算两个 table 的相加操作 a+b</strong>。</p></li><li><p>当 Lua 试图<strong>对两个表进行相加</strong>时，先<strong>检查两者之一是否有元表</strong>，<strong>之后检查</strong>是否有一个叫 <strong>__add 的字段</strong>，若<strong>找到，则调用对应的值</strong>。 <strong>__add 等即时字段</strong>，其对应的值（<strong>往往是一个函数或是 table</strong>）就是 <strong>“元方法”</strong> 。<br>有两个很重要的函数来处理元表（⭐）：</p></li></ol><ul><li><strong>setmetatable(table,metatable)</strong>: 对指定 table <strong>设置元表</strong>(metatable)，<strong>如果</strong>元表(metatable)中<strong>存在 __metatable 键值</strong>，setmetatable <strong>会失败</strong>。</li><li><strong>getmetatable(table)</strong>: <strong>返回对象的元表</strong>(metatable)。</li></ul><ol start="4"><li>以下实例演示了如何对指定的表设置元表：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mytable = &#123;&#125;                          <span class="comment">-- 普通表 </span></span><br><span class="line">mymetatable = &#123;&#125;                      <span class="comment">-- 元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,mymetatable)     <span class="comment">-- 把 mymetatable 设为 mytable 的元表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--以上代码写成一行</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;&#125;,&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="15-2-index-元方法（⭐⭐⭐）"><a href="#15-2-index-元方法（⭐⭐⭐）" class="headerlink" title="15.2 __index 元方法（⭐⭐⭐）"></a>15.2 __index 元方法（⭐⭐⭐）</h3><ol><li><p><strong>这是 metatable 最常用的键</strong>。</p></li><li><p>当你<strong>通过键来访问</strong> table 的时候，如果<strong>这个键没有值</strong>，那么Lua就会<strong>寻找该table的metatable</strong>（假定有metatable）中的**__index 键<strong>。如果</strong>__index包含一个表格，Lua会在表格中查找相应的键**。我们可以在使用 lua 命令进入交互模式查看：</p></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ lua</span><br><span class="line">Lua <span class="number">5.3</span><span class="number">.0</span>  Copyright (C) <span class="number">1994</span><span class="number">-2015</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; other = &#123; foo = <span class="number">3</span> &#125; </span><br><span class="line">&gt; t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123; <span class="built_in">__index</span> = other &#125;) </span><br><span class="line">&gt; t.foo</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; t.bar</span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果 <strong>__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数</strong>。</li></ol><p><strong>__index 元方法查看表中元素是否存在</strong>，如果<strong>不存在</strong>，返回结果<strong>为 nil</strong>；如果<strong>存在</strong>则<strong>由 __index 返回结果</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;key1 = <span class="string">&quot;value1&quot;</span>&#125;, &#123;</span><br><span class="line">  <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, key)</span></span></span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&quot;key2&quot;</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;metatablevalue&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mytable.key1,mytable.key2)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">value1    metatablevalue  </span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>实例解析（⭐）：</li></ol><ul><li><p>mytable 表赋值为 {key1 &#x3D; “value1”}。</p></li><li><p>mytable 设置了元表，元方法为 __index。</p></li><li><p>在mytable表中查找 key1，如果找到，返回该元素，找不到则继续。</p></li><li><p>在mytable表中查找 key2，如果找到，返回 metatablevalue，找不到则继续。</p></li><li><p>判断元表有没有__index方法，如果__index方法是一个函数，则调用该函数。</p></li><li><p>元方法中查看是否传入 “key2” 键的参数（mytable.key2已设置），如果传入 “key2” 参数返回 “metatablevalue”，否则返回 mytable 对应的键值。</p></li></ul><p>5.我们可以将以上代码简单写成：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;key1 = <span class="string">&quot;value1&quot;</span>&#125;, &#123; <span class="built_in">__index</span> = &#123; key2 = <span class="string">&quot;metatablevalue&quot;</span> &#125; &#125;)</span><br><span class="line"><span class="built_in">print</span>(mytable.key1,mytable.key2)</span><br></pre></td></tr></table></figure><ol start="6"><li>总结（⭐）</li></ol><p>Lua 查找一个表元素时的规则，其实就是如下 3 个步骤:</p><ul><li><strong>在表中查找，如果找到，返回该元素，找不到则继续</strong></li><li><strong>判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。</strong></li><li><strong>判断元表有没有 __index 方法，</strong><ul><li>如果 __index 方法为 <strong>nil</strong>，则返回<strong>nil</strong>；</li><li>如果 __index 方法是一个<strong>表</strong>，则<strong>重复 1、2、3</strong>；</li><li>如果 __index 方法是一个<strong>函数</strong>，则返回<strong>该函数的返回值</strong>。</li></ul></li></ul><h3 id="15-3-newindex-元方法（⭐）"><a href="#15-3-newindex-元方法（⭐）" class="headerlink" title="15.3 __newindex 元方法（⭐）"></a>15.3 __newindex 元方法（⭐）</h3><ol><li><strong>__newindex 元方法用来对表更新（赋值修改）</strong>，**__index<strong>则用来</strong>对表访问** 。</li><li>当你给表的一个<strong>缺少的索引赋值</strong>，解释器就会<strong>查找元表的__newindex 元方法</strong>：如果<strong>存在则调用这个函数而不进行赋值操作</strong>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mymetatable = &#123;&#125;</span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;key1 = <span class="string">&quot;value1&quot;</span>&#125;, &#123; <span class="built_in">__newindex</span> = mymetatable &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mytable.key1)</span><br><span class="line"></span><br><span class="line">mytable.newkey = <span class="string">&quot;新值2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mytable.newkey,mymetatable.newkey)</span><br><span class="line"></span><br><span class="line">mytable.key1 = <span class="string">&quot;新值1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mytable.key1,mymetatable.key1)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">value1</span></span><br><span class="line"><span class="comment">nil    新值2</span></span><br><span class="line"><span class="comment">新值1    nil</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><p>以上实例中表<strong>设置了元方法 __newindex</strong>，在对新索引键 <strong>（newkey）赋值</strong>时（mytable.newkey &#x3D; “新值2”），<strong>会调用元方法</strong>，而不进行赋值。而如果对<strong>已存在的索引键（key1）</strong>，则<strong>会进行赋值，而不调用元方法</strong> __newindex。</p><h3 id="15-4-rawget和rawset"><a href="#15-4-rawget和rawset" class="headerlink" title="15.4 rawget和rawset"></a>15.4 rawget和rawset</h3><ol><li>rawget</li></ol><ul><li>绕开__index 只获取表自身属性有没有 （不关心元表的）</li></ul><ol start="2"><li>rawset</li></ol><ul><li>绕开__newindex 只设置表自身属性 （不重定向到元表__newindex对应的表）</li></ul><h3 id="15-5-运算元方法-为表添加操作符"><a href="#15-5-运算元方法-为表添加操作符" class="headerlink" title="15.5 运算元方法-为表添加操作符"></a>15.5 运算元方法-为表添加操作符</h3><ol><li>表中对应的操作列表如下：(注意：__是两个下划线)</li></ol><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>__add</td><td>对应的运算符 ‘+’.</td></tr><tr><td>__sub</td><td>对应的运算符 ‘-‘.</td></tr><tr><td>__mul</td><td>对应的运算符 ‘*’.</td></tr><tr><td>__div</td><td>对应的运算符 ‘&#x2F;‘.</td></tr><tr><td>__mod</td><td>对应的运算符 ‘%’.</td></tr><tr><td>__unm</td><td>对应的运算符 ‘-‘.</td></tr><tr><td>__concat</td><td>对应的运算符 ‘..’.</td></tr><tr><td>__eq</td><td>对应的运算符 ‘&#x3D;&#x3D;’.</td></tr><tr><td>__lt</td><td>对应的运算符 ‘&lt;’.</td></tr><tr><td>__le</td><td>对应的运算符 ‘&lt;&#x3D;’.</td></tr></tbody></table><ol start="2"><li>以下实例演示了两表相加操作：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算表中最大值，table.maxn在Lua5.2以上版本中已无法使用</span></span><br><span class="line"><span class="comment">-- 自定义计算表中最大键值函数 table_maxn，即返回表最大键值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_maxn</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> mn = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> mn &lt; k <span class="keyword">then</span></span><br><span class="line">            mn = k</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mn</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 两表相加操作</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123;</span><br><span class="line">  <span class="built_in">__add</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, newtable)</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, table_maxn(newtable) <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">table</span>.<span class="built_in">insert</span>(mytable, table_maxn(mytable)+<span class="number">1</span>,newtable[i])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mytable</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">secondtable = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">mytable = mytable + secondtable</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">1    1</span></span><br><span class="line"><span class="comment">2    2</span></span><br><span class="line"><span class="comment">3    3</span></span><br><span class="line"><span class="comment">4    4</span></span><br><span class="line"><span class="comment">5    5</span></span><br><span class="line"><span class="comment">6    6</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="built_in">__add</span> 键包含在元表中，并进行相加操作。 </span><br></pre></td></tr></table></figure><h3 id="15-6-call元方法"><a href="#15-6-call元方法" class="headerlink" title="15.6 __call元方法"></a>15.6 __call元方法</h3><ol><li>__call 元方法在 <strong>Lua 调用一个值时调用（当子表做为函数名字的形式被调用的时候，如mytable(newtable)，会调用__call函数）</strong>。以下实例演示了计算表中元素的和：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算表中最大值，table.maxn在Lua5.2以上版本中已无法使用</span></span><br><span class="line"><span class="comment">-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_maxn</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> mn = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> mn &lt; k <span class="keyword">then</span></span><br><span class="line">            mn = k</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mn</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义元方法__call</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;<span class="number">10</span>&#125;, &#123;</span><br><span class="line">  <span class="built_in">__call</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, newtable)</span></span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, table_maxn(mytable) <span class="keyword">do</span></span><br><span class="line">                sum = sum + mytable[i]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, table_maxn(newtable) <span class="keyword">do</span></span><br><span class="line">                sum = sum + newtable[i]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line">newtable = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(mytable(newtable))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">70</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><h3 id="15-7-tostring-元方法"><a href="#15-7-tostring-元方法" class="headerlink" title="15.7 __tostring 元方法"></a>15.7 __tostring 元方法</h3><ol><li>__tostring 元方法用于修改表的输出行为。以下实例我们自定义了表的输出内容：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;, &#123;</span><br><span class="line">  <span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable)</span></span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">                sum = sum + v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;表所有元素的和为 &quot;</span> .. sum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(mytable)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">表所有元素的和为 60    </span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><h1 id="十六-协同程序（coroutine）（⭐⭐⭐）"><a href="#十六-协同程序（coroutine）（⭐⭐⭐）" class="headerlink" title="十六 协同程序（coroutine）（⭐⭐⭐）"></a>十六 协同程序（coroutine）（⭐⭐⭐）</h1><h3 id="16-1-什么是协同（coroutine）"><a href="#16-1-什么是协同（coroutine）" class="headerlink" title="16.1 什么是协同（coroutine）"></a>16.1 什么是协同（coroutine）</h3><ol><li>Lua 协同程序(coroutine)与线程比较类似：<strong>拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西</strong>。</li><li>协同程序可以理解为<strong>一种特殊的线程</strong>，可以<strong>暂停和恢复其执行</strong>，从而允许非抢占式的多任务处理。</li><li>协同是非常强大的功能，但是用起来也很复杂。</li></ol><h3 id="16-2-基本语法"><a href="#16-2-基本语法" class="headerlink" title="16.2 基本语法"></a>16.2 基本语法</h3><ol><li><p><strong>协同程序由 coroutine 模块</strong>提供支持。</p></li><li><p>使用协同程序，你可以在函数中使用 <strong>coroutine.create 创建一个新的协同程序对象</strong>，并使用 <strong>coroutine.resume 启动它的执行</strong>。协同程序可以通过调用 <strong>coroutine.yield 来主动暂停自己的执行</strong>，并将控制权交还给调用者。</p></li><li><p>具体函数方法</p></li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>coroutine.create()</td><td><strong>创建 coroutine，返回 coroutine</strong>， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td></tr><tr><td>coroutine.resume()</td><td><strong>重启 coroutine</strong>，和 create 配合使用。<strong>正常结束返回true+yield的返回值，否则返回false+yield的返回值（一般对已结束的协程resume就会false）</strong>。<strong>返回值是yield()的参数。</strong></td></tr><tr><td>coroutine.yield()</td><td><strong>挂起 coroutine</strong>，将 coroutine 设置为挂起状态，这个和 resume 配合使用能有很多有用的效果。<strong>返回值是resume调用时传入的值</strong>。</td></tr><tr><td>coroutine.status()</td><td><strong>查看 coroutine 的状态</strong><br>注：coroutine 的状态有三种：dead，suspended，running(已结束、已挂起、运行中),具体什么时候有这样的状态请参考下面的程序。</td></tr><tr><td>coroutine.wrap()</td><td><strong>创建 coroutine，返回一个函数，一旦你调用这个函数，就进入 coroutine，和 create 功能重复</strong></td></tr><tr><td>coroutine.running()</td><td><strong>返回正在跑的 coroutine</strong>，一个 coroutine 就是一个线程，当使用running的时候，就是<strong>返回一个 coroutine 的线程号</strong> + <strong>true&#x2F;false</strong></td></tr></tbody></table><ol start="4"><li>以下实例演示了如何使用 Lua 协同程序：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;协同程序 foo 开始执行&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> value = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="string">&quot;暂停 foo 的执行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;协同程序 foo 恢复执行，传入的值为: &quot;</span> .. <span class="built_in">tostring</span>(value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;协同程序 foo 结束执行&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建协同程序</span></span><br><span class="line"><span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(foo)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 启动协同程序</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">status</span>, result = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">-- 输出: 暂停 foo 的执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 恢复协同程序的执行，并传入一个值</span></span><br><span class="line"><span class="built_in">status</span>, result = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="number">42</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">-- 输出: 协同程序 foo 恢复执行，传入的值为: 42</span></span><br></pre></td></tr></table></figure><ul><li><p>以上实例中，我们<strong>定义了一个名为 foo 的函数作为协同程序</strong>。在函数中，我们<strong>使用 coroutine.yield 暂停了协同程序的执行，并返回了一个值</strong></p></li><li><p>在主程序中，我们使用 <strong>coroutine.create 创建了一个协同程序对象</strong>，并使用 <strong>coroutine.resume 启动了它的执行</strong>。</p></li><li><p>在<strong>第一次调用 coroutine.resume 后，协同程序执行到 coroutine.yield 处暂停</strong>，<strong>并将值返回给主程序</strong>。然后，我们<strong>再次调用 coroutine.resume，并传入一个值作为协同程序恢复执行时的参数</strong>。</p></li></ul><p>执行以上代码输出结果为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">协同程序 foo 开始执行</span><br><span class="line">暂停 foo 的执行</span><br><span class="line">协同程序 foo 恢复执行，传入的值为: <span class="number">42</span></span><br><span class="line">协同程序 foo 结束执行</span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure><h3 id="16-3-各个语法的用法实例"><a href="#16-3-各个语法的用法实例" class="headerlink" title="16.3 各个语法的用法实例"></a>16.3 各个语法的用法实例</h3><ol><li>实例1</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- coroutine_test.lua 文件</span></span><br><span class="line"><span class="comment">-- 创建了一个新的协同程序对象 co，其中协同程序函数打印传入的参数 i</span></span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 使用 coroutine.resume 启动协同程序 co 的执行，并传入参数 1。协同程序开始执行，打印输出为 1</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="number">1</span>)   <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过 coroutine.status 检查协同程序 co 的状态，输出为 dead，表示协同程序已经执行完毕</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co))  <span class="comment">-- dead</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 coroutine.wrap 创建了一个协同程序包装器，将协同程序函数转换为一个可直接调用的函数对象</span></span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">co(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"><span class="comment">-- 创建了另一个协同程序对象 co2，其中的协同程序函数通过循环打印数字 1 到 10，在循环到 3 的时候输出当前协同程序的状态和正在运行的线程</span></span><br><span class="line">co2 = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co2))  <span class="comment">--running</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">running</span>()) <span class="comment">--thread:XXXXXX</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连续调用 coroutine.resume 启动协同程序 co2 的执行</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co2) <span class="comment">--1</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co2) <span class="comment">--2</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co2) <span class="comment">--3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过 coroutine.status 检查协同程序 co2 的状态，输出为 suspended，表示协同程序暂停执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co2))   <span class="comment">-- suspended</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">running</span>())</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">dead</span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">running</span></span><br><span class="line">thread: <span class="number">0x7fb801c05868</span>    <span class="literal">false</span></span><br><span class="line">suspended</span><br><span class="line">thread: <span class="number">0x7fb801c04c88</span>    <span class="literal">true</span></span><br><span class="line"><span class="comment">----------</span></span><br></pre></td></tr></table></figure><p>coroutine.running就可以看出来,<strong>coroutine在底层实现就是一个线程</strong>。</p><p>当<strong>create一个coroutine的时候就是在新线程中注册了一个事件</strong>。</p><p>当<strong>使用resume触发事件的时候</strong>，create的<strong>coroutine函数就被执行了</strong>，当<strong>遇到yield的时候就代表挂起当前线程</strong>，<strong>等候再次resume触发事件</strong>。</p><ol start="2"><li>接下来我们分析一个更详细的实例：</li></ol><figure class="highlight lua"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(a)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;foo 函数输出&quot;</span>, a)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="number">2</span> * a) <span class="comment">-- 返回  2*a 的值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span> <span class="params">(a , b)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次协同程序执行输出&quot;</span>, a, b) <span class="comment">-- co-body 1 10</span></span><br><span class="line">    <span class="keyword">local</span> r = foo(a + <span class="number">1</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次协同程序执行输出&quot;</span>, r)</span><br><span class="line">    <span class="keyword">local</span> r, s = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a + b, a - b)  <span class="comment">-- a，b的值为第一次调用协同程序时传入</span></span><br><span class="line">     </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第三次协同程序执行输出&quot;</span>, r, s)</span><br><span class="line">    <span class="keyword">return</span> b, <span class="string">&quot;结束协同程序&quot;</span>                   <span class="comment">-- b的值为第二次调用协同程序时传入</span></span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="number">1</span>, <span class="number">10</span>)) <span class="comment">-- true, 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--分割线----&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">&quot;r&quot;</span>)) <span class="comment">-- true 11 -9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---分割线---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>)) <span class="comment">-- true 10 end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---分割线---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>)) <span class="comment">-- cannot resume dead coroutine</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---分割线---&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">第一次协同程序执行输出    1    10</span></span><br><span class="line"><span class="comment">foo 函数输出    2</span></span><br><span class="line"><span class="comment">main    true    4</span></span><br><span class="line"><span class="comment">--分割线----</span></span><br><span class="line"><span class="comment">第二次协同程序执行输出    r</span></span><br><span class="line"><span class="comment">main    true    11    -9</span></span><br><span class="line"><span class="comment">---分割线---</span></span><br><span class="line"><span class="comment">第三次协同程序执行输出    x    y</span></span><br><span class="line"><span class="comment">main    true    10    结束协同程序</span></span><br><span class="line"><span class="comment">---分割线---</span></span><br><span class="line"><span class="comment">main    false    cannot resume dead coroutine</span></span><br><span class="line"><span class="comment">---分割线---</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><p>对以上程序进行详细流程说明（⭐⭐⭐）:</p><ul><li>首先按正常流程走到第6行创建协程，但没有启动</li><li>运行<strong>17行</strong>启动协程co。传入参数1，10。</li><li>此时<strong>6行</strong>的匿名函数参数a，b的值为1，10</li><li>运行<strong>7行</strong> 输出 <strong><font color="red">第一次协同程序执行输出    1    10</font></strong></li><li>运行<strong>8行</strong>执行函数1行foo，传入参数a+1 (即1+1 为2)</li><li>此时<strong>1行</strong>的函数foo参数a的值为2</li><li>运行<strong>2行</strong> 输出 <strong><font color="red">foo 函数输出    2</font></strong></li><li>运行<strong>3行</strong> <strong>中断协程</strong>，此时返回给<strong>17行</strong>的coroutine.resume(co, 1, 10) 返回值。 返回值构成为两部分：<ul><li>true(正常结束返回true，<strong>一般对已结束的协程resume就会false</strong>)</li><li>3行中coroutine.yield(2 * a)中的所有参数，这里为 2*a （即 2*2 为 4）</li><li>最终返回值为 true, 4</li></ul></li><li>返回到<strong>17行</strong> 输出 <strong><font color="red">main    true    4</font></strong></li><li>运行<strong>18行</strong> 输出 <strong><font color="red">–分割线—-</font></strong></li><li>-——————————————————————————————————-</li><li>运行<strong>19行</strong>再次启动协程co，传入参数“r”，并从上一次终端的位置开始运行，即<strong>3行</strong></li><li>运行<strong>3行</strong> 此时 <strong>coroutine.yield(2 * a)</strong> 的值<strong>为再次启动协程时传入的参数</strong>，即<strong>19行传入的参数 “r”</strong><ul><li><strong>因此3行执行的代码为 return “r”</strong></li></ul></li><li>运行<strong>4行</strong> end</li><li>返回<strong>8行</strong> 得到foo（a+1）的返回值为3行的返回值 <strong>“r”</strong>,并赋值给本地变量r</li><li>运行<strong>10行</strong> 输出 <strong><font color="red">第二次协同程序执行输出    r</font></strong></li><li>运行<strong>11行</strong> <strong>中断协程</strong>，此时返回给<strong>19行</strong> 的coroutine.resume(co, 1, 10) 返回值.返回值构成为：<ul><li>true(正常结束返回true，<strong>一般对已结束的协程resume就会false</strong>)</li><li>coroutine.yield(a + b, a - b)中的所有参数，即a + b, a - b -&gt; 1+10 , 1-10 -&gt; 11,-9 <strong>(a，b的值为第一次调用协同程序时传入)</strong></li><li>最终返回值为 true, 11, -9</li></ul></li><li>返回<strong>19行</strong> 输出 <strong><font color="red">main    true    11    -9</font></strong></li><li>运行<strong>20行</strong> 输出 <strong><font color="red">—分割线—</font></strong></li><li>-——————————————————————————————————-</li><li>运行<strong>21行</strong> <strong>同理19行</strong>，再次启动协程co，传入参数”x”, “y”，并从上一次终端的位置开始运行，即<strong>11行</strong></li><li>运行<strong>11行</strong> 此时 <strong>coroutine.yield(a + b, a - b)</strong> 的值<strong>为再次启动协程时传入的参数</strong>，即<strong>21行传入的参数 “x”, “y”</strong><ul><li><strong>因此11行执行的代码为 local r, s &#x3D; “x”, “y”</strong></li></ul></li><li>运行<strong>13行</strong> 输出 <strong><font color="red">第三次协同程序执行输出    x    y</font></strong></li><li>运行<strong>14行</strong> 返回协程返回值，构成为：<ul><li>true(正常结束返回true，<strong>一般对已结束的协程resume就会false</strong>)</li><li>协程正常返回值，即<strong>b, “结束协同程序”</strong> 。**(a，b的值为第一次调用协同程序时传入)**</li><li>最终返回值为 true, 10, “结束协同程序”</li></ul></li><li>返回<strong>21行</strong> 输出 <strong><font color="red">main    true    10    结束协同程序</font></strong></li><li>运行<strong>22行</strong> 输出 <strong><font color="red">—分割线—</font></strong></li><li>运行<strong>23行</strong> 由于协程运行完成，因此启用协程会失败。输出 <strong><font color="red">main    false    cannot resume dead coroutine</font></strong></li><li>运行<strong>24行</strong> 输出 <strong><font color="red">—分割线—</font></strong></li></ul><h3 id="16-4-生产者-消费者问题"><a href="#16-4-生产者-消费者问题" class="headerlink" title="16.4 生产者-消费者问题"></a>16.4 生产者-消费者问题</h3><ol><li>使用Lua的协同程序来完成生产者-消费者这一经典问题。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> newProductor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">productor</span><span class="params">()</span></span></span><br><span class="line">     <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">     <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">          i = i + <span class="number">1</span></span><br><span class="line">          send(i)     <span class="comment">-- 将生产的物品发送给消费者</span></span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span><span class="params">()</span></span></span><br><span class="line">     <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">local</span> i = receive()     <span class="comment">-- 从生产者那里得到物品</span></span><br><span class="line">          <span class="built_in">print</span>(i)</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">()</span></span></span><br><span class="line">     <span class="keyword">local</span> <span class="built_in">status</span>, value = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(newProductor)</span><br><span class="line">     <span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(x)</span></span></span><br><span class="line">     <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(x)     <span class="comment">-- x表示需要发送的值，值返回以后，就挂起该协同程序</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 启动程序</span></span><br><span class="line">newProductor = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(productor)</span><br><span class="line">consumer()</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">……</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="comment">-- 启动程序</span></span><br><span class="line">newProductor = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(productor)</span><br><span class="line">consumer()</span><br></pre></td></tr></table></figure><h3 id="16-5-线程和协同程序区别"><a href="#16-5-线程和协同程序区别" class="headerlink" title="16.5 线程和协同程序区别"></a>16.5 线程和协同程序区别</h3><ol><li><p>线程与协同程序的<strong>主要区别在于，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行</strong>。</p></li><li><p>在<strong>任一指定时刻只有一个协同程序在运行</strong>，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起。<br>协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</p></li><li><p>主要区别归纳如下：</p></li></ol><ul><li><p><strong>调度方式</strong>：<strong>线程</strong>通常由<strong>操作系统的调度器进行抢占式调度</strong>，操作系统会在不同线程之间切换执行权。而<strong>协同程序</strong>是<strong>非抢占式调度</strong>的，它们由<strong>程序员显式地控制执行权</strong>的转移。</p></li><li><p><strong>并发性</strong>：<strong>线程是并发</strong>执行的，<strong>多个线程可以同时运行</strong>在多个处理器核心上，或者通过时间片轮转在单个核心上切换执行。<strong>协同程序则是协作式</strong>的，<strong>只有一个协同程序处于运行状态</strong>，其他协同程序<strong>必须等待当前协同程序主动放弃执行权</strong>。</p></li><li><p><strong>内存占用</strong>：<strong>线程通常需要独立的堆栈和上下文环境</strong>，因此线程的<strong>创建和销毁</strong>会带来<strong>额外的开销</strong>。而<strong>协同程序可以共享相同的堆栈和上下文</strong>，因此创建和销毁协同程序的<strong>开销较小</strong>。</p></li><li><p><strong>数据共享</strong>：<strong>线程</strong>之间可以<strong>共享内存空间</strong>，但<strong>需要注意线程安全性和同步</strong>问题。<strong>协同程序</strong>通常<strong>通过参数传递和返回值</strong>来进行<strong>数据共享</strong>，<strong>不同协同程序</strong>之间的<strong>数据隔离性较好</strong>。</p></li><li><p>调试和错误处理：<strong>线程通常在调试和错误处理方面更复杂</strong>，因为多个线程之间的交互和并发执行可能导致难以调试的问题。<strong>协同程序则在调试和错误处理方面相对简单</strong>，因为它们是由程序员显式地控制执行流程的。</p></li></ul><ol start="4"><li>总体而言，<strong>线程适用于需要并发执行的场景</strong>，例如在多核处理器上利用并行性加快任务的执行速度。而<strong>协同程序适用于需要协作和协调的场景</strong>，例如<strong>状态机、事件驱动编程或协作式任务处理</strong>。选择使用线程还是协同程序取决于具体的应用需求和编程模型。</li></ol><h1 id="十七-文件I-O"><a href="#十七-文件I-O" class="headerlink" title="十七 文件I&#x2F;O"></a>十七 文件I&#x2F;O</h1><h3 id="17-1-概述及用法"><a href="#17-1-概述及用法" class="headerlink" title="17.1 概述及用法"></a>17.1 概述及用法</h3><ol><li>Lua I&#x2F;O 库用于读取和处理文件。分为简单模式（和C一样）、完全模式。</li></ol><ul><li>简<strong>单模式（simple model）拥有一个当前输入文件和一个当前输出文件</strong>，并且提供针对这些文件相关的操作。</li><li><strong>完全模式（complete model） 使用外部的文件句柄来实现</strong>。它以一种面对对象的形式，将所有的文件操作定义为文件句柄的方法</li></ul><ol start="2"><li><p><strong>简单模式在做一些简单的文件操作时较为合适</strong>。但是在<strong>进行一些高级的文件操作的时候，简单模式就显得力不从心。例如同时读取多个文件这样的操作，使用完全模式则较为合适</strong>。</p></li><li><p>打开文件操作语句如下：</p></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span> (filename [, mode])</span><br></pre></td></tr></table></figure><ul><li>mode的值有：</li></ul><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以<strong>只读方式打开文</strong>件，该<strong>文件必须存在</strong>。</td></tr><tr><td>w</td><td><strong>打开只写文件</strong>，若<strong>文件存在则</strong>文件长度清为0，即<strong>该文件内容会消失</strong>。若<strong>文件不存在则建立该文件</strong>。</td></tr><tr><td>a</td><td>以<strong>附加的方式打开只写文件</strong>。若<strong>文件不存在</strong>，则会<strong>建立</strong>该文件，如果<strong>文件存在</strong>，写入的<strong>数据会被加到文件尾</strong>，即文件<strong>原先的内容会被保留</strong>。（EOF符保留）</td></tr><tr><td>r+</td><td>以<strong>可读写方式打开文件</strong>，该<strong>文件必须存在</strong>。</td></tr><tr><td>w+</td><td><strong>打开可读写文件</strong>，若*<em><strong>文件存在</strong>则文件长度清为零，即该文件</em>*内容会消失<strong>。若文件</strong>不存在则建立**该文件。</td></tr><tr><td>a+</td><td>与<strong>a类似，但此文件可读可写</strong></td></tr><tr><td>b</td><td><strong>二进制模式，如果文件是二进制文件，可以加上b</strong></td></tr><tr><td>+</td><td><strong>号表示对文件既可以读也可以写</strong></td></tr></tbody></table><h3 id="17-2-简单模式（io-调用）"><a href="#17-2-简单模式（io-调用）" class="headerlink" title="17.2 简单模式（io.调用）"></a>17.2 简单模式（io.调用）</h3><ol><li>简单模式使用标准的 I&#x2F;O 或使用一个当前输入文件和一个当前输出文件。<br>以下为 file.lua 文件代码，操作的文件为test.lua(如果没有你需要创建该文件)，代码如下：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以只读方式打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置默认输入文件为 test.lua</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test.lua&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置默认输出文件为 test.lua</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在文件最后一行添加 Lua 注释</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;--  test.lua 文件末尾注释&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br></pre></td></tr></table></figure><p>执行以上代码，你会发现，输出了 test.lua 文件的第一行信息，并在该文件最后一行添加了 lua 的注释。如我这边输出的是：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- test.lua 文件</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在以上实例中我们使用了 io.”x” 方法，其中 io.read() 中我们没有带参数，参数可以是下表中的一个：</li></ol><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>“*n”</td><td><strong>读取一个数字并返回它</strong>。例：file.read(“*n”)</td></tr><tr><td>“*a”</td><td><strong>从当前位置读取整个文件</strong>。例：file.read(“*a”)</td></tr><tr><td>“*l”（默认）</td><td><strong>读取下一行</strong>，在文件尾 (EOF) 处返回 nil。例：file.read(“*l”)</td></tr><tr><td>number</td><td><strong>返回一个指定字符个数的字符串</strong>，如果number为0则返回空字串，或在 EOF 时返回 nil。例：file.read(5)</td></tr></tbody></table><ol start="3"><li>简单模式的I&#x2F;O方法汇总<br>参考博客：<a href="https://blog.csdn.net/duanxuyun/article/details/4751118">lua 的io操作，非常详细。</a></li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>io.close ([file])</td><td>功能：相当于file:close()，关闭默认的输出文件</td></tr><tr><td>io.flush ()</td><td>功能：相当于file:flush(),<strong>输出所有缓冲中的内容到默认输出文件</strong></td></tr><tr><td>io.lines ([filename])</td><td>功能：打开指定的文件filename为读模式并<strong>返回一个迭代函数（配合循环语句使用）</strong>,每次调用将<strong>获得文件中的一行内容,当到文件尾时，将返回nil,并自动关闭文件</strong>。<strong>若不带参数时io.lines() &lt;&#x3D;&gt; io.input():lines()</strong>; <strong>读取默认输入设备的内容，但结束时不关闭文件。</strong> <br>如：for line in io.lines(“main.lua”) do<br>　　print(line)<br>　　end</td></tr><tr><td>io.open (filename [, mode])</td><td>功能：<strong>按指定的模式打开一个文件</strong>，成功则返回文件句柄，失败则返回nil+错误信息。模式参数说明在 <a href="#171-%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%A8%E6%B3%95">17.1 概述及用法</a> 中的第3点有说明</td></tr><tr><td>io.output ([file])</td><td>功能：相当于io.input，但操作在默认输出文件上</td></tr><tr><td>io.popen ([prog [, mode]])</td><td>功能：开始程序prog于额外的进程,并返回用于prog的文件句柄(并不支持所有的系统平台)</td></tr><tr><td>io.read (…)</td><td>功能：从当前输入流输入读取一行，参数在 <a href="#172-%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8Fio%E8%B0%83%E7%94%A8">17.2 简单模式</a> 中的第2点提到。相当于io.input():read。 <strong>不带参数时，默认每运行一次io.read()就向下读一行</strong></td></tr><tr><td>io.tmpfile ()</td><td>功能：返回一个临时文件句柄，该文件以更新模式打开，程序结束时自动删除</td></tr><tr><td>io.type (obj)</td><td>功能：检测obj是否一个可用的文件句柄<br>返回：<br>　　“file”：为一个打开的文件句柄<br>　　“closed file”：为一个已关闭的文件句柄<br>　　nil: 表示obj不是一个文件句柄</td></tr><tr><td>io.write (…)</td><td>功能：相当于io.output():write,向文件写入内容，写入方式会根据mode而不同。</td></tr></tbody></table><h3 id="17-3-完全模式（file-调用）"><a href="#17-3-完全模式（file-调用）" class="headerlink" title="17.3 完全模式（file:调用）"></a>17.3 完全模式（file:调用）</h3><ol><li>通常我们<strong>需要在同一时间处理多个文件</strong>。我们需要<strong>使用 file:function_name 来代替 io.function_name 方法</strong>。以下实例演示了如何同时处理同一个文件:<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以只读方式打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">print</span>(file:<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line">file:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test.lua&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在文件最后一行添加 Lua 注释</span></span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;--test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line">file:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure></li></ol><p><strong>read 的参数与简单模式一致。</strong></p><ol start="2"><li>完全模式的I&#x2F;O方法汇总</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>file:close()</td><td>功能：关闭文件。　注：<strong>当文件句柄被垃圾收集后，文件将自动关闭。句柄将变为一个不可预知的值</strong></td></tr><tr><td>file:flush()</td><td>功能：向文件写入缓冲中的所有数据</td></tr><tr><td>file:lines()</td><td>功能：<strong>返回一个迭代函数（配合循环语句使用）</strong>,每次调用将获得文件中的一行内容,<strong>当到文件尾时，将返回nil,但不关闭文件。</strong> <br>如：for line in file:lines() do body end</td></tr><tr><td>file:read(…)</td><td>功能：<strong>按指定的格式读取一个文件</strong>,按每个格式函数将<strong>返回一个字串或数字,如果不能正确读取将返回nil</strong>,若<strong>没有指定格式将指默认按行方式</strong>进行<strong>读取</strong>。参数与 <a href="#172-%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8Fio%E8%B0%83%E7%94%A8">17.2 简单模式</a> 中的第2点相同。 <strong>不带参数时，默认每运行一次io.read()就向下读一行</strong></td></tr><tr><td>file:seek([whence][,offset])</td><td>功能：<strong>设置和获取当前文件位置</strong>,<strong>成功则返回最终的文件位置</strong>(按字节),<strong>失败则返回nil加错误信息</strong><br>参数:<br>　　whence:<br>　　　“set”: 从文件头开始<br>　　　“cur”: 从当前位置开始[默认]<br>　　　“end”: 从文件尾开始<br>　　offset: 默认为0<br><strong>不带参数file:seek()则返回当前位置</strong>,file:seek(“set”)<strong>则定位到文件头</strong>,file:seek(“end”)<strong>则定位到文件尾并返回文件大小</strong></td></tr><tr><td>file:setvbuf(mode,[,size])</td><td>功能：<strong>设置输出文件的缓冲模式</strong><br>　　参数<br>　　mode:<br>　　　“no”: 没有缓冲，即直接输出<br>　　　“full”: 全缓冲，即当缓冲满后才进行输出操作(也可调用flush马上输出)<br>　　　“line”: 以行为单位，进行输出(多用于终端设备)<br><strong>最后两种模式,size可以指定缓冲的大小</strong>(按字节)，<strong>忽略size将自动调整为最佳的大小</strong></td></tr><tr><td>file:write(…)</td><td>功能：<strong>按指定的参数格式输出文件内容，参数必须为字符或数字</strong>，若要输出<strong>其它值</strong>，则需<strong>通过tostring或string.format进行转换</strong></td></tr></tbody></table><p>以下实例使用了 <strong>seek 方法</strong>，<strong>定位到文件倒数第 25 个位置并使用 read 方法的 *a 参数</strong>，<strong>即从当前位置(倒数第 25 个位置)读取整个文件</strong>:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以只读方式打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">file:seek(<span class="string">&quot;end&quot;</span>,<span class="number">-25</span>)</span><br><span class="line"><span class="built_in">print</span>(file:<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line">file:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">st.lua 文件末尾--test</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="十八-错误处理"><a href="#十八-错误处理" class="headerlink" title="十八 错误处理"></a>十八 错误处理</h1><h3 id="18-1-概述"><a href="#18-1-概述" class="headerlink" title="18.1 概述"></a>18.1 概述</h3><ol><li><p>程序运行中错误处理是必要的，在我们进行文件操作，数据转移及web service 调用过程中都会出现不可预期的错误。如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。</p></li><li><p>任何程序语言中，都需要错误处理。错误类型有：</p><ul><li>语法错误</li><li>运行错误</li></ul></li></ol><h3 id="18-2-语法错误"><a href="#18-2-语法错误" class="headerlink" title="18.2 语法错误"></a>18.2 语法错误</h3><p>1.语法错误通常是由于对程序的组件（如运算符、表达式）使用不当引起的。一个简单的实例如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- test.lua 文件</span></span><br><span class="line">a == <span class="number">2</span></span><br></pre></td></tr></table></figure><p>以上代码执行结果为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua: test.lua:<span class="number">2</span>: syntax <span class="built_in">error</span> near <span class="string">&#x27;==&#x27;</span></span><br></pre></td></tr></table></figure><p>正如你所看到的，以上出现了语法错误，一个 “&#x3D;” 号跟两个 “&#x3D;” 号是有区别的。一个 “&#x3D;” 是赋值表达式两个 “&#x3D;” 是比较运算。</p><h3 id="18-3-运行错误"><a href="#18-3-运行错误" class="headerlink" title="18.3 运行错误"></a>18.3 运行错误</h3><ol><li>运行错误是程序可以正常执行，但是会输出报错信息。如下实例由于参数输入错误，程序执行时报错：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a,b)</span></span></span><br><span class="line">   <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>当我们编译运行以上代码时，编译是可以成功的，但在运行的时候会产生如下错误：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lua: test2.lua:<span class="number">2</span>: attempt to perform arithmetic on <span class="keyword">local</span> <span class="string">&#x27;b&#x27;</span> (a <span class="literal">nil</span> value)</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">    test2.lua:<span class="number">2</span>: <span class="keyword">in</span> <span class="function"><span class="keyword">function</span> &#x27;<span class="title">add</span>&#x27;</span></span><br><span class="line"><span class="function">    <span class="title">test2.lua</span>:5: <span class="title">in</span> <span class="title">main</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="function">    [<span class="title">C</span>]: ?</span></span><br></pre></td></tr></table></figure><p>lua 里调用函数时，即使实参列表和形参列表不一致也能成功调用，多余的参数会被舍弃，缺少的参数会被补为 nil。<br><strong>以上报错信息是由于参数 b 被补为 nil 后，nil 参与了 + 运算</strong>。<br>假如 add 函数内不是 “return a+b” 而是 “print(a,b)” 的话，结果会变成 “10 nil” 不会报错。</p><h3 id="18-4-错误处理"><a href="#18-4-错误处理" class="headerlink" title="18.4 错误处理"></a>18.4 错误处理</h3><p>可以使用两个函数：<strong>assert 和 error 来处理错误</strong>。实例如下：</p><ol><li>assert</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a,b)</span></span></span><br><span class="line">   <span class="built_in">assert</span>(<span class="built_in">type</span>(a) == <span class="string">&quot;number&quot;</span>, <span class="string">&quot;a 不是一个数字&quot;</span>)</span><br><span class="line">   <span class="built_in">assert</span>(<span class="built_in">type</span>(b) == <span class="string">&quot;number&quot;</span>, <span class="string">&quot;b 不是一个数字&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">add(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>执行以上程序会出现如下错误：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lua: test.lua:<span class="number">3</span>: b 不是一个数字</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">    [C]: <span class="keyword">in</span> <span class="function"><span class="keyword">function</span> &#x27;<span class="title">assert</span>&#x27;</span></span><br><span class="line"><span class="function">    <span class="title">test.lua</span>:3: <span class="title">in</span> <span class="title">local</span> &#x27;<span class="title">add</span>&#x27;</span></span><br><span class="line"><span class="function">    <span class="title">test.lua</span>:6: <span class="title">in</span> <span class="title">main</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="function">    [<span class="title">C</span>]: <span class="title">in</span> ?</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>实例中<strong>assert首先检查第一个参数，若没问题</strong>，assert<strong>不做任何事情</strong>；<strong>否则</strong>，assert<strong>以第二个参数作为错误信息抛出</strong>。<br>2. error</p><ul><li>语法格式：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">error</span> (message [, level])</span><br></pre></td></tr></table></figure><ul><li>功能：<strong>终止正在执行的函数，并返回message的内容作为错误信息</strong>(<strong>error函数永远都不会返回</strong>)</li><li>通常情况下，error会附加一些错误位置的信息到message头部。</li><li>Level参数指示获得错误的位置:<ul><li><strong>Level&#x3D;1[默认]：为调用error位置(文件+行号)</strong></li><li><strong>Level&#x3D;2：指出哪个调用error的函数的函数</strong></li><li><strong>Level&#x3D;0:不添加错误位置信息</strong></li></ul></li></ul><h3 id="18-5-pcall-和-xpcall、debug"><a href="#18-5-pcall-和-xpcall、debug" class="headerlink" title="18.5 pcall 和 xpcall、debug"></a>18.5 pcall 和 xpcall、debug</h3><ol><li>pcall<br>(1) Lua中处理错误，可以<strong>使用函数pcall（protected call）来包装需要执行的代码</strong>。<br>(2) pcall接收<strong>一个函数和要传递给后者(即函数)的参数</strong>，并执行，<strong>执行结果: 有错误、无错误</strong>. 返回值<strong>true或false，errorinfo（实际好像只返回一个true或false，没有其他信息）</strong>。</li></ol><p>语法格式如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">pcall</span>(function_name, ….) <span class="keyword">then</span></span><br><span class="line"><span class="comment">-- 没有错误</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">-- 一些错误</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>(3) 简单实例：</p><figure class="highlight lua"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span> <span class="built_in">print</span>(i) <span class="keyword">end</span>, <span class="number">33</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">   </span><br><span class="line">t=<span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span> <span class="built_in">print</span>(i) <span class="built_in">error</span>(<span class="string">&#x27;error..&#x27;</span>) <span class="keyword">end</span>, <span class="number">33</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">33</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">33</span></span><br><span class="line"><span class="comment">false  </span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>第4行 由于error(‘error..’)终止了正在进行的函数  所以返回false </p><p>(4) pcall以一种 <strong>“保护模式”来调用第一个参数</strong>，因此pcall可以<strong>捕获函数执行中的任何错误</strong>。通常在错误发生时，希望落得更多的调试信息，而不只是发生错误的位置。但<strong>pcall返回时，它已经销毁了调用桟的部分内容</strong>。</p><ol start="2"><li>xpcall与debug<br>(1) Lua提供了xpcall函数，<strong>xpcall接收第二个参数——一个错误处理函数</strong>，当<strong>错误发生</strong>时，<strong>Lua会在调用桟展开（unwind）前调用错误处理函数</strong>，于是就可以<strong>在这个函数中使用debug库来获取关于错误的额外信息</strong>了。</li></ol><p>(2) <strong>debug</strong>库提供了两个通用的<strong>错误处理函数</strong>:</p><ul><li>debug.debug：<strong>提供一个Lua提示符，让用户来检查错误的原因</strong></li><li>debug.traceback：<strong>根据调用桟来构建一个扩展的错误消息</strong></li></ul><p>(3) 实例</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;=<span class="built_in">xpcall</span>(<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span> <span class="built_in">print</span>(i) <span class="built_in">error</span>(<span class="string">&#x27;error..&#x27;</span>) <span class="keyword">end</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">traceback</span>()) <span class="keyword">end</span>, <span class="number">33</span>)</span><br><span class="line"><span class="number">33</span></span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: <span class="keyword">in</span> <span class="function"><span class="keyword">function</span> &lt;<span class="title">stdin</span>:1&gt;</span></span><br><span class="line"><span class="function">[<span class="title">C</span>]: <span class="title">in</span> <span class="title">function</span> &#x27;<span class="title">error</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">stdin</span>:1: <span class="title">in</span> <span class="title">function</span> &lt;<span class="title">stdin</span>:1&gt;</span></span><br><span class="line"><span class="function">[<span class="title">C</span>]: <span class="title">in</span> <span class="title">function</span> &#x27;<span class="title">xpcall</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">stdin</span>:1: <span class="title">in</span> <span class="title">main</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="function">[<span class="title">C</span>]: <span class="title">in</span> ?</span></span><br><span class="line"><span class="function"><span class="title">false</span>        <span class="title">nil</span></span></span><br></pre></td></tr></table></figure><p>(4) 实例2</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span> <span class="params">()</span></span></span><br><span class="line">   n = n/<span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myerrorhandler</span><span class="params">( err )</span></span></span><br><span class="line">   <span class="built_in">print</span>( <span class="string">&quot;ERROR:&quot;</span>, err )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">status</span> = <span class="built_in">xpcall</span>( myfunction, myerrorhandler )</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">status</span>)</span><br></pre></td></tr></table></figure><p>执行以上程序会出现如下错误：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:    test2.lua:<span class="number">2</span>: attempt to perform arithmetic on global <span class="string">&#x27;n&#x27;</span> (a <span class="literal">nil</span> value)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="十九-调试-Debug"><a href="#十九-调试-Debug" class="headerlink" title="十九 调试(Debug)"></a>十九 调试(Debug)</h1><h3 id="19-1-概述及Debug的方法"><a href="#19-1-概述及Debug的方法" class="headerlink" title="19.1 概述及Debug的方法"></a>19.1 概述及Debug的方法</h3><ol><li><p>Lua 提供了 debug 库用于提供创建我们自定义调试器的功能。Lua 本身并未有内置的调试器，但很多开发者共享了他们的 Lua 调试器代码。</p></li><li><p>Lua 中 debug 库包含以下函数：</p></li></ol><table><thead><tr><th>序号</th><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>1</td><td>debug()</td><td><strong>进入一个用户交互模式，运行用户输入的每个字符串</strong>。 使用简单的命令以及其它调试设置，用户可以检阅全局变量和局部变量， 改变变量的值，计算一些表达式，等等。<br>输入一行仅包含 cont 的字符串将结束这个函数， 这样调用者就可以继续向下运行。</td></tr><tr><td>2</td><td>getfenv(object)</td><td><strong>返回对象的环境变量</strong>。</td></tr><tr><td>3</td><td>gethook(optional thread)</td><td><strong>返回三个表示线程钩子设置的值</strong>： 当前钩子函数，当前钩子掩码，当前钩子计数</td></tr><tr><td>4</td><td>getinfo ([thread,] f [, what])</td><td><strong>返回关于一个函数信息的表</strong>。 你可以直接提供该函数， 也可以用一个数字 f 表示该函数。 数字 <strong>f 表示运行在指定线程的调用栈对应层次上的函数</strong>： <strong>0 层表示当前函数</strong>（<strong>getinfo 自身</strong>）； <strong>1 层表示调用 getinfo 的函数</strong> （除非是尾调用，这种情况不计入栈）；等等。 如果 <strong>f 是一个比活动函数数量还大的数字</strong>， getinfo <strong>返回 nil</strong>。</td></tr><tr><td>5</td><td>debug.getlocal ([thread,] f, local)</td><td>此函数<strong>返回在栈的 f 层处函数的索引为 local 的局部变量 的名字和值</strong>。 这个函数不仅用于访问显式定义的局部变量，也包括形参、临时变量等。</td></tr><tr><td>6</td><td>getmetatable(value)</td><td><strong>把给定索引指向的值的元表压入堆栈</strong>。如果<strong>索引无效</strong>，或是这个值没有元表，<strong>函数将返回 0 并且不会向栈上压任何东西</strong>。</td></tr><tr><td>7.</td><td>getregistry()</td><td><strong>返回注册表表</strong>，这是一个预定义出来的表， 可以用来<strong>保存任何 C 代码想保存的 Lua 值</strong>。</td></tr><tr><td>8</td><td>getupvalue (f, up)</td><td>此函数**返回函数 f 的第 up 个上值的名字和值(即函数中定义的第up个变量的名和值)**。 如果该函数没有那个上值，返回 nil 。<br>以 ‘(‘ （开括号）打头的变量名表示没有名字的变量 （去除了调试信息的代码块）。</td></tr><tr><td>9</td><td>sethook ([thread,] hook, mask [, count])</td><td><strong>将一个函数作为钩子函数设入</strong>。 字符串 mask 以及数字 count <strong>决定了钩子将在何时调用</strong>。 掩码是由下列字符组合成的字符串，每个字符有其含义：**<br>‘c’: 每当 Lua 调用一个函数时，调用钩子；<br>‘r’: 每当 Lua 从一个函数内返回时，调用钩子；<br>‘l’: 每当 Lua 进入新的一行时，调用钩子**。</td></tr><tr><td>10</td><td>setlocal ([thread,] level, local, value)</td><td>这个函数<strong>将 value 赋给 栈上第 level 层函数的第 local 个局部变量</strong>。 如果<strong>没有</strong>那个变量，函数<strong>返回 nil</strong> 。 如果 level<strong>越界</strong>，<strong>抛出</strong>一个<strong>错误</strong>。</td></tr><tr><td>11</td><td>setmetatable (value, table)</td><td><strong>将 value 的元表设为 table</strong>（可以是 nil）。 返回 value。</td></tr><tr><td>12</td><td>setupvalue (f, up, value)</td><td><strong>这个函数将 value 设为函数 f 的第 up 个上值</strong>。 如果函数没有那个上值，返回 nil 否则，返回该上值的名字。</td></tr><tr><td>13</td><td>traceback ([thread,] [message [, level]])</td><td><strong>如果 message 有，且不是字符串或 nil， 函数不做任何处理直接返回 message</strong>。 <strong>否则</strong>，它<strong>返回调用栈的栈回溯信息</strong>。 字符串可选项 message 被添加在栈回溯信息的开头。 数字<strong>可选项 level 指明从栈的哪一层开始回溯</strong> （**默认为 1 **，即调用 traceback 的那里）。</td></tr></tbody></table><ol start="3"><li>上表列出了我们常用的调试函数，接下来我们可以看些简单的例子：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span> <span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">traceback</span>(<span class="string">&quot;Stack trace&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Stack trace end&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">myfunction ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stack trace</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">c:\Users\XXX\Desktop\notes\Lua\test.lua:<span class="number">2</span>: <span class="keyword">in</span> <span class="function"><span class="keyword">function</span> &#x27;<span class="title">myfunction</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">c</span>:\<span class="title">Users</span>\<span class="title">XXX</span>\<span class="title">Desktop</span>\<span class="title">notes</span>\<span class="title">Lua</span>\<span class="title">test.lua</span>:7: <span class="title">in</span> <span class="title">main</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="function">[<span class="title">C</span>]: ?</span></span><br><span class="line"><span class="function"><span class="title">table</span>: 03069<span class="title">D28</span></span></span><br><span class="line"><span class="function"><span class="title">Stack</span> <span class="title">trace</span> <span class="title">end</span></span></span><br><span class="line"><span class="function"><span class="title">table</span>: 03069<span class="title">C60</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>我们经常需要调试函数的内的局部变量。我们可以使用 setupvalue 函数来设置这些局部变量。实例如下：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newCounter</span> <span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">local</span> k = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    k = n</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">counter = newCounter ()</span><br><span class="line"><span class="built_in">print</span>(counter())</span><br><span class="line"><span class="built_in">print</span>(counter())</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">  name, val = <span class="built_in">debug</span>.<span class="built_in">getupvalue</span>(counter, i)</span><br><span class="line">  <span class="keyword">if</span> name <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;index&quot;</span>, i, name, <span class="string">&quot;=&quot;</span>, val)</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="string">&quot;n&quot;</span>) <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">debug</span>.<span class="built_in">setupvalue</span> (counter,<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span> <span class="comment">-- if</span></span><br><span class="line"><span class="keyword">until</span> <span class="keyword">not</span> name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter())</span><br></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">index    <span class="number">1</span>    k    =    <span class="number">1</span></span><br><span class="line">index    <span class="number">2</span>    n    =    <span class="number">2</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>在以上实例中，计数器在每次调用时都会自增1。实例中我们使用了 getupvalue 函数查看局部变量的当前状态。我们可以<strong>设置局部变量为新值。实例中，在设置前 n 的值为 2,使用 setupvalue 函数将其设置为 10。现在我们调用函数，执行后输出为 11 而不是 3</strong>。</p><h3 id="19-2-调试类型"><a href="#19-2-调试类型" class="headerlink" title="19.2 调试类型"></a>19.2 调试类型</h3><ul><li>命令行调试<ul><li>命令行调试器有：RemDebug、clidebugger、ctrace、xdbLua、LuaInterface - Debugger、Rldb、ModDebug。</li></ul></li><li>图形界面调试<ul><li>图形界调试器有：SciTE、Decoda、ZeroBrane Studio、akdebugger、luaedit。</li></ul></li></ul><h1 id="二十-垃圾回收"><a href="#二十-垃圾回收" class="headerlink" title="二十 垃圾回收"></a>二十 垃圾回收</h1><h3 id="20-1-概述"><a href="#20-1-概述" class="headerlink" title="20.1 概述"></a>20.1 概述</h3><ol><li><p>Lua 采用了<strong>自动内存管理</strong>。 这意味着你<strong>不用操心</strong>新创建的对象需要的内存如何分配出来， 也不用考虑在对象不再被使用后怎样释放它们所占用的内存。</p></li><li><p>Lua运行了一个<strong>垃圾收集器</strong>来收集所有<strong>死对象</strong> （即在 Lua 中不可能再访问到的对象）<strong>来完成自动内存管理的工作</strong>。 Lua 中所有用到的内存，如：<strong>字符串、表、用户数据、函数、线程、 内部结构等，都服从自动管理</strong>。</p></li><li><p>Lua 实现了一个<strong>增量标记-扫描收集器</strong>。 它<strong>使用这两个数字来控制垃圾收集循环</strong>： <strong>垃圾收集器间歇率和垃圾收集器步进倍率</strong>。 这两个数字都使用百分数为单位 （例如：值 100 在内部表示 1 ）。</p></li><li><p><strong>垃圾收集器间歇率</strong>控制着收集器需要在<strong>开启新的循环前要等待多久</strong>。 <strong>增大这个值会减少收集器的积极性</strong>。 当这个值比 100 小的时候，收集器在开启新的循环前不会有等待。 设置这个值为 200 就会让收集器等到总内存使用量达到 之前的两倍时才开始新的循环。</p></li><li><p><strong>垃圾收集器步进倍率</strong>控制着<strong>收集器运作速度相对于内存分配速度的倍率</strong>。 增大这个值<strong>不仅会让收集器更加积极，还会增加每个增量步骤的长度</strong>。 不要把这个值设得小于 100 ， 那样的话收集器就工作的太慢了以至于永远都干不完一个循环。 默认值是 200 ，这表示收集器以内存分配的”两倍”速工作。</p></li><li><p>如果你把步进倍率设为一个非常大的数字 （比你的程序可能用到的字节数还大 10% ）， 收集器的行为就像一个 stop-the-world 收集器。 接着你若把间歇率设为 200 ， 收集器的行为就和过去的 Lua 版本一样了： 每次 Lua 使用的内存翻倍时，就做一次完整的收集。</p></li></ol><h3 id="20-2-垃圾回收器函数"><a href="#20-2-垃圾回收器函数" class="headerlink" title="20.2 垃圾回收器函数"></a>20.2 垃圾回收器函数</h3><ol><li>Lua 提供了以下函数<strong>collectgarbage ([opt [, arg]])<strong>用来控制自动内存管理，根据</strong>参数opt的不同，提供不同的功能</strong>:</li></ol><ul><li><p>collectgarbage(“collect”): <strong>做一次完整的垃圾收集循环</strong>。通过参数 opt 它提供了一组不同的功能：</p></li><li><p>collectgarbage(“count”): <strong>以 K 字节数为单位返回 Lua 使用的总内存数</strong>。 这个值有小数部分，所以只需要<strong>乘上 1024 就能得到 Lua 使用的准确字节数</strong>（除非溢出）。</p></li><li><p>collectgarbage(“restart”): <strong>重启垃圾收集器的自动运行</strong>。</p></li><li><p>collectgarbage(“setpause”): 将 <strong>arg 设为收集器的 间歇率</strong>。 <strong>返回 间歇率 的前一个值</strong>。</p></li><li><p>collectgarbage(“setstepmul”): 返回 <strong>步进倍率 的前一个值</strong>。</p></li><li><p>collectgarbage(“step”): <strong>单步运行垃圾收集器</strong>。 步长”大小”由 arg 控制。 传入 0 时，收集器步进（不可分割的）一步。 传入非 0 值， 收集器收集相当于 Lua 分配这些多（K 字节）内存的工作。 如果收集器结束一个循环将返回 true 。</p></li><li><p>collectgarbage(“stop”): <strong>停止垃圾收集器的运行</strong>。 在调用重启前，收集器只会因显式的调用运行。</p></li></ul><ol start="2"><li>实例</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mytable = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">&quot;count&quot;</span>))</span><br><span class="line"></span><br><span class="line">mytable = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">&quot;count&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">&quot;collect&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">&quot;count&quot;</span>))</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下(注意内存使用的变化)：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20.9560546875</span></span><br><span class="line"><span class="number">20.9853515625</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">19.4111328125</span></span><br></pre></td></tr></table></figure><p>lua中 有自动定时执行垃圾回收的机制<br>unity中热更新开发 尽量不要去自动执行垃圾回收</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过<span class="built_in">collectgarbage</span>(<span class="string">&quot;setpause&quot;</span>,<span class="number">100</span>) 设置垃圾回收的间隔时间</span><br><span class="line">通过<span class="built_in">collectgarbage</span>(<span class="string">&quot;setstepmul&quot;</span>,<span class="number">200</span>) 设置垃圾回收的速度</span><br><span class="line">通过<span class="built_in">collectgarbage</span>(<span class="string">&quot;stop&quot;</span>) 停止自动执行垃圾回收</span><br><span class="line">通过<span class="built_in">collectgarbage</span>(<span class="string">&quot;restart&quot;</span>) 重新开始自动执行垃圾回收</span><br><span class="line">通过<span class="built_in">collectgarbage</span>(<span class="string">&quot;step&quot;</span>,<span class="number">100</span>) 执行一次垃圾回收</span><br><span class="line">通过<span class="built_in">collectgarbage</span>(<span class="string">&quot;isrunning&quot;</span>) 判断垃圾回收是否正在执行</span><br></pre></td></tr></table></figure><h1 id="二十一-面向对象（⭐）"><a href="#二十一-面向对象（⭐）" class="headerlink" title="二十一 面向对象（⭐）"></a>二十一 面向对象（⭐）</h1><h3 id="21-1-概述"><a href="#21-1-概述" class="headerlink" title="21.1 概述"></a>21.1 概述</h3><ol><li>面向对象编程（Object Oriented Programming，OOP）是一种非常流行的计算机编程架构。<br>以下几种编程语言都支持面向对象编程：</li></ol><ul><li>C++</li><li>Java</li><li>Objective-C</li><li>Smalltalk</li><li>C#</li><li>Ruby</li></ul><h3 id="21-2-面向对象特征"><a href="#21-2-面向对象特征" class="headerlink" title="21.2 面向对象特征"></a>21.2 面向对象特征</h3><p><strong>一般是 封装、继承、多态</strong></p><ul><li>1） 封装：指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性。</li><li>2） 继承：继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。</li><li>3） 多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。</li><li>4）抽象：抽象(Abstraction)是简化复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</li></ul><h3 id="21-3-Lua-中面向对象"><a href="#21-3-Lua-中面向对象" class="headerlink" title="21.3 Lua 中面向对象"></a>21.3 Lua 中面向对象</h3><ol><li>我们知道，<strong>对象由属性和方法组成</strong>。LUA中最基本的结构是table，所以需要<strong>用table来描述对象的属性</strong>。</li><li>lua 中的<strong>function 可以用来表示方法</strong>。那么<strong>LUA中的类可以通过 table + function 模拟出来</strong>。</li><li>至于<strong>继承，可以通过 metetable 模拟出来</strong>（不推荐用，只模拟最基本的对象大部分实现够用了）。</li><li><strong>Lua 中的表不仅在某种意义上是一种对象</strong>。像对象一样，表也有状态（成员变量）；也有与对象的值独立的本性，特别是拥有两个不同值的对象（table）代表两个不同的对象；一个对象在不同的时候也可以有不同的值，但他始终是一个对象；与对象类似，表的生命周期与其由什么创建、在哪创建没有关系。对象有他们的成员函数，表也有：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Account = &#123;balance = <span class="number">0</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account.withdraw</span> <span class="params">(v)</span></span></span><br><span class="line">    Account.balance = Account.balance - v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这个定义创建了一个新的函数，并且保存在Account对象的withdraw域内，下面我们可以这样调用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Account.withdraw(<span class="number">100.00</span>)</span><br></pre></td></tr></table></figure><h3 id="21-4-简单实例（⭐）"><a href="#21-4-简单实例（⭐）" class="headerlink" title="21.4 简单实例（⭐）"></a>21.4 简单实例（⭐）</h3><ol><li>以下简单的类包含了三个属性： area, length 和 breadth，printArea方法用于打印计算结果：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 元类</span></span><br><span class="line">Rectangle = &#123;area = <span class="number">0</span>, length = <span class="number">0</span>, breadth = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类的方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:new</span> <span class="params">(o,length,breadth)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  <span class="built_in">self</span>.length = length <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="built_in">self</span>.breadth = breadth <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="built_in">self</span>.area = length*breadth;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类的方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;矩形面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象</li></ol><p>创建对象是为类的实例分配内存的过程。每个类都有属于自己的内存并共享公共数据。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = Rectangle:new(<span class="literal">nil</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>访问属性</li></ol><p>我们可以使用点号(.)来访问类的属性：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(r.length)</span><br></pre></td></tr></table></figure><ol start="4"><li>访问成员函数</li></ol><p>我们可以使用冒号 : 来访问类的成员函数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:printArea()</span><br></pre></td></tr></table></figure><p>内存在对象初始化时分配。</p><ol start="5"><li>以下我们演示了 Lua 面向对象的完整实例：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 元类</span></span><br><span class="line">Shape = &#123;area = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基础类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  side = side <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="built_in">self</span>.area = side*side;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基础类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myshape = Shape:new(<span class="literal">nil</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">myshape:printArea()</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">面积为     <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="21-5-点调用和冒号调用的区别（⭐⭐⭐）"><a href="#21-5-点调用和冒号调用的区别（⭐⭐⭐）" class="headerlink" title="21.5 点调用和冒号调用的区别（⭐⭐⭐）"></a>21.5 点调用和冒号调用的区别（⭐⭐⭐）</h3><ul><li>点就是正常调用函数</li><li>冒号是会把 调用者 作为第一个参数传入</li><li>冒号可以用来声明函数 只能是function 表名::函数名 的形式</li><li>如果是冒号声明相当于有一个默认参数self</li><li>lua中 有一个关键字 self 表示 默认传入的第一个参数 。用来冒号声明时作为第一个参数的代表</li><li>注: self不是this 只是第一个参数</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student:Speak2</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- lua中 有一个关键字 self 表示 默认传入的第一个参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.name..<span class="string">&quot;Speak2&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Student:Speak2()</span><br><span class="line">Student.Speak2(Student)</span><br></pre></td></tr></table></figure><h3 id="21-6-Lua-继承-⭐⭐⭐"><a href="#21-6-Lua-继承-⭐⭐⭐" class="headerlink" title="21.6 Lua 继承(⭐⭐⭐)"></a>21.6 Lua 继承(⭐⭐⭐)</h3><ol><li>继承是指一个对象直接使用另一对象的属性和方法。可用于扩展基础类的属性和方法。<br>以下演示了一个简单的继承实例：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Meta class</span></span><br><span class="line">Shape = &#123;area = <span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">-- 基础类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  side = side <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="built_in">self</span>.area = side*side;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 基础类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Square 对象继承了 Shape 类:</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Square = Shape:new()</span><br><span class="line"><span class="comment">-- Derived class method new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> Shape:new(o,side)</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="3"><li>完整示例（⭐⭐⭐）</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Meta class</span></span><br><span class="line">Shape = &#123;area = <span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">-- 基础类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  side = side <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="built_in">self</span>.area = side*side;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 基础类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myshape = Shape:new(<span class="literal">nil</span>,<span class="number">10</span>)</span><br><span class="line">myshape:printArea()</span><br><span class="line"></span><br><span class="line">Square = Shape:new()</span><br><span class="line"><span class="comment">-- 派生类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> Shape:new(o,side)</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;正方形面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">mysquare = Square:new(<span class="literal">nil</span>,<span class="number">10</span>)</span><br><span class="line">mysquare:printArea()</span><br><span class="line"></span><br><span class="line">Rectangle = Shape:new()</span><br><span class="line"><span class="comment">-- 派生类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:new</span> <span class="params">(o,length,breadth)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> Shape:new(o)</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  <span class="built_in">self</span>.area = length * breadth</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;矩形面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myrectangle = Rectangle:new(<span class="literal">nil</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">myrectangle:printArea()</span><br></pre></td></tr></table></figure><h3 id="21-7-Lua多态（函数重写）"><a href="#21-7-Lua多态（函数重写）" class="headerlink" title="21.7 Lua多态（函数重写）"></a>21.7 Lua多态（函数重写）</h3><p>Lua 中我们可以重写基础类的函数，在派生类中定义自己的实现方式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;正方形面积 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="二十二-数据库访问（LuaSQL）"><a href="#二十二-数据库访问（LuaSQL）" class="headerlink" title="二十二 数据库访问（LuaSQL）"></a>二十二 数据库访问（LuaSQL）</h1><h3 id="22-1-概述"><a href="#22-1-概述" class="headerlink" title="22.1 概述"></a>22.1 概述</h3><ol><li>本文主要为大家介绍 Lua 数据库的操作库：LuaSQL。他是开源的，支持的数据库有：ODBC, ADO, Oracle, MySQL, SQLite 和 PostgreSQL。</li><li>本文介绍MySQL的数据库连接。</li></ol><h3 id="22-2-安装"><a href="#22-2-安装" class="headerlink" title="22.2 安装"></a>22.2 安装</h3><ol><li>LuaSQL 可以使用 <a href="https://luarocks.org/">LuaRocks</a> 来安装可以根据需要安装你需要的数据库驱动。<br>LuaRocks 安装方法：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget http://luarocks.org/releases/luarocks-2.2.1.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar zxpf luarocks-2.2.1.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> luarocks-2.2.1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure; <span class="built_in">sudo</span> make bootstrap</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> luarocks install luasocket</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lua</span></span><br><span class="line">Lua 5.3.0 Copyright (C) 1994-2015 Lua.org, PUC-Rio</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">require <span class="string">&quot;socket&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Window 下安装 LuaRocks：<a href="https://github.com/keplerproject/luarocks/wiki/Installation-instructions-for-Windows">https://github.com/keplerproject/luarocks/wiki/Installation-instructions-for-Windows</a></p></li><li><p>安装不同数据库驱动：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">luarocks install luasql-sqlite3</span><br><span class="line">luarocks install luasql-postgres</span><br><span class="line">luarocks install luasql-mysql</span><br><span class="line">luarocks install luasql-sqlite</span><br><span class="line">luarocks install luasql-odbc</span><br></pre></td></tr></table></figure><ol start="4"><li>也可以使用源码安装方式，Lua Github 源码地址：<a href="https://github.com/keplerproject/luasql">https://github.com/keplerproject/luasql</a></li></ol><h3 id="22-3-实例"><a href="#22-3-实例" class="headerlink" title="22.3 实例"></a>22.3 实例</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">&quot;luasql.mysql&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建环境对象</span></span><br><span class="line">env = luasql.mysql()</span><br><span class="line"></span><br><span class="line"><span class="comment">--连接数据库</span></span><br><span class="line">conn = env:connect(<span class="string">&quot;数据库名&quot;</span>,<span class="string">&quot;用户名&quot;</span>,<span class="string">&quot;密码&quot;</span>,<span class="string">&quot;IP地址&quot;</span>,端口)</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置数据库的编码格式</span></span><br><span class="line">conn:<span class="built_in">execute</span><span class="string">&quot;SET NAMES UTF8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--执行数据库操作</span></span><br><span class="line">cur = conn:<span class="built_in">execute</span>(<span class="string">&quot;select * from role&quot;</span>)</span><br><span class="line"></span><br><span class="line">row = cur:fetch(&#123;&#125;,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--文件对象的创建</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;role.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> row <span class="keyword">do</span></span><br><span class="line">    var = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%d %s\n&quot;</span>, row.id, row.name)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(var)</span><br><span class="line"></span><br><span class="line">    file:<span class="built_in">write</span>(var)</span><br><span class="line"></span><br><span class="line">    row = cur:fetch(row,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file:<span class="built_in">close</span>()  <span class="comment">--关闭文件对象</span></span><br><span class="line">conn:<span class="built_in">close</span>()  <span class="comment">--关闭数据库连接</span></span><br><span class="line">env:<span class="built_in">close</span>()   <span class="comment">--关闭数据库环境</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;lua学习笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="lua" scheme="http://example.com/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>hexo文章多了如何管理</title>
    <link href="http://example.com/2024/08/13/hexo%E6%96%87%E7%AB%A0%E5%A4%9A%E4%BA%86%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2024/08/13/hexo%E6%96%87%E7%AB%A0%E5%A4%9A%E4%BA%86%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/</id>
    <published>2024-08-13T15:26:54.000Z</published>
    <updated>2024-08-13T15:57:49.555Z</updated>
    
    <content type="html"><![CDATA[<p>每次通过hexo new ‘xxx’创建新的博文时，都会将生成的.md文件放置在_post文件夹下，随着文章数的增多，_post文件夹也会越来越混乱。</p><span id="more"></span><p>可以通过配置全局配置文件_config.yml来依据年月进行分配，在文件中查找new_post_name:并修改为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span></span><br></pre></td></tr></table></figure><p>修改后，每次创建的文章将会以生成的年月进行管理。</p><ul><li>如果想直接进行分类创建，可以选择采用如下命令进行创建。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post -p /文件夹名/文件名.md</span><br></pre></td></tr></table></figure><p>如执行如下命令后<br><img src="/2024/08/13/hexo%E6%96%87%E7%AB%A0%E5%A4%9A%E4%BA%86%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/%E5%91%BD%E4%BB%A4.jpg"><br>文章将会被创建在QFramework中<br><img src="/2024/08/13/hexo%E6%96%87%E7%AB%A0%E5%A4%9A%E4%BA%86%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg"><br><img src="/2024/08/13/hexo%E6%96%87%E7%AB%A0%E5%A4%9A%E4%BA%86%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%841.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次通过hexo new ‘xxx’创建新的博文时，都会将生成的.md文件放置在_post文件夹下，随着文章数的增多，_post文件夹也会越来越混乱。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>post</title>
    <link href="http://example.com/2024/08/13/QFramework-QFramework%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/08/13/QFramework-QFramework%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-08-13T15:24:58.000Z</published>
    <updated>2024-08-20T13:51:31.282Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决Hexo图片不显示的问题</title>
    <link href="http://example.com/2024/08/11/%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/08/11/%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-08-11T05:27:23.000Z</published>
    <updated>2024-08-13T15:57:40.231Z</updated>
    
    <content type="html"><![CDATA[<p>在本地markdown上，照片能正常显示，但是部署后却不显示。看了一下<a href="https://hexo.io/zh-cn/docs/asset-folders">官方文档</a>，Hexo3以上可以通过设置post_asset_folder来解决。</p><span id="more"></span><ol><li>在Blog根目录安装插件：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="selector-tag">image</span> <span class="attr">--save</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在全局配置文件中找到post_asset_folder并配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启用后，资源图片将会被自动解析为其对应文章的路径。 例如： image.jpg 位置为 &#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;image.jpg ，这表示它是 &#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F; 文章的一张资源图片， ![](image.jpg) 将会被解析为 &lt;img src&#x3D;”&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;image.jpg”&gt; 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在本地markdown上，照片能正常显示，但是部署后却不显示。看了一下&lt;a href=&quot;https://hexo.io/zh-cn/docs/asset-folders&quot;&gt;官方文档&lt;/a&gt;，Hexo3以上可以通过设置post_asset_folder来解决。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+next博客搭建并部署到github</title>
    <link href="http://example.com/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <id>http://example.com/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/</id>
    <published>2024-08-06T16:55:21.000Z</published>
    <updated>2024-08-11T09:24:38.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装下载Node-js、Vscode、Git"><a href="#一、安装下载Node-js、Vscode、Git" class="headerlink" title="一、安装下载Node.js、Vscode、Git"></a>一、安装下载Node.js、Vscode、Git</h1><p>1.1 安装可以看这篇博文的第2点 《在Windows系统下安装Node.js》的1-6点（补充除外）：<a href="https://blog.csdn.net/loze/article/details/94208742">https://blog.csdn.net/loze/article/details/94208742</a></p><span id="more"></span><p>1.2 补充：上面博文的补充地方镜像有问题。 应执行下面语句：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（如果不小心跟着<span class="number">1.</span> 执行了补充，先运行这个，否则没必要）</span><br><span class="line">npm cache clean --force</span><br><span class="line"></span><br><span class="line">npm config set registry https:<span class="comment">//registry.npmmirror.com</span></span><br></pre></td></tr></table></figure><p>1.3 （可选）将npm的安装路径修改到其他盘避免占用C盘：<a href="https://blog.csdn.net/Deng872347348/article/details/121646375">https://blog.csdn.net/Deng872347348/article/details/121646375</a> 只做到 <strong>“接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量””</strong> 之前的步骤</p><h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h1><p>2.1 新建 Blog 文件夹，进入此目录下<br>2.2 安装Hexo脚手架.下面的命令会把hexo.cmd安装到<strong>全局包仓库中</strong>，由于该仓库文件夹在Windows系统的path中。所以你就<strong>可以在任意位置执行hexo命令</strong>了。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>我这里是安装过了所以是显示这样的<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.1%E5%AE%89%E8%A3%85Hexo%E8%84%9A%E6%89%8B%E6%9E%B6.jpg"><br>2.3 执行一下命令确认hexo安装完好。这里执行如果报错（hexo‘ 不是内部或外部命令，也不是可运行的程序），请参考该内容以配置Hexo的环境变量：<a href="https://blog.csdn.net/Deng872347348/article/details/121646375">https://blog.csdn.net/Deng872347348/article/details/121646375</a> 的 <strong>“接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量””</strong> 及其之后的步骤 ，如果在2.2步之后不小心重新设置了npm的全局文件夹，则重新执行2.2的npm install -g hexo-cli命令，但**可能会出现权限问题，请以管理员身份运行cmd或者修改nodejs文件夹权限,<a href="https://blog.csdn.net/m0_56253302/article/details/130111914">可以看该网址中的方法二</a>**。解决以上问题后执行下面命令。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo -v</span></span><br></pre></td></tr></table></figure><p>2.4 新建一个<strong>空文件夹</strong>用于初始化Hexo，启动cmd并进入到文件夹中。<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.4cmd%E8%BF%9B%E5%85%A5%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.jpg"><br>执行Hexo初始化命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure><p>2.5 cmd命令中进入到themes文件夹<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.5%E8%BF%9B%E5%85%A5theme%E6%96%87%E4%BB%B6%E5%A4%B9.jpg"><br>2.6 cmd命令中执行如下命令，下载 Next主题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.6%E4%B8%8B%E8%BD%BDNext%E4%B8%BB%E9%A2%980.jpg"><br>文件夹多出文件<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.6%E4%B8%8B%E8%BD%BDNext%E4%B8%BB%E9%A2%98.jpg"></p><p>2.7 cmd中启动本地服务查看<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.7%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1.jpg"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><p>在浏览器中输入<a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到目前的界面<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/2.7%E7%95%8C%E9%9D%A2.jpg"></p><p>2.8 一些相关命令</p><ul><li>hexo clean：清除 public 静态目录</li><li>hexo s：本地启动默认指定 4000 端口预览 (s 是 server 是缩写 也就是启动 hexo 服务)</li><li>hexo g：生成 public 静态目录</li><li>hexo d： 部署</li><li>hexo n: 新建文章。示例hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客” #新建文章</li><li>hexo p &#x3D;&#x3D; hexo publish</li><li>hexo server -p 5000 #更改端口</li><li>hexo server -i 192.168.1.1 #自定义 IP</li><li>hexo new draft 草稿文件名。新建草稿命令如下，草稿不会在博客上显示。</li></ul><h1 id="三、配置文件设置"><a href="#三、配置文件设置" class="headerlink" title="三、配置文件设置"></a>三、配置文件设置</h1><h3 id="3-1-配置文件说明"><a href="#3-1-配置文件说明" class="headerlink" title="3.1 配置文件说明"></a>3.1 配置文件说明</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。</p><ol><li>站点配置文件：位于站点根目录下（&#x2F;_config.yml），主要包含 Hexo 本身的站点配置，内容如下：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>          <span class="comment"># 网站的标题，可能用在各种布局的页面中</span></span><br><span class="line"><span class="attr">subtitle:</span>            <span class="comment"># 网站子标题</span></span><br><span class="line"><span class="attr">description:</span>         <span class="comment"># 网站的描述性</span></span><br><span class="line"><span class="attr">keywords:</span>            <span class="comment"># 网站的关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>     <span class="comment"># 网站的作者</span></span><br><span class="line"><span class="attr">language:</span>            <span class="comment"># 网站采用语言，要跟/theme/***/languages/**.yml下的文件名对应。</span></span><br><span class="line"><span class="attr">timezone:</span>            <span class="comment"># 网站的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span>              <span class="comment"># 网站的url，如果不在域名根目录，应包含子目录，且root要设置为`/子目录/`</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>                               <span class="comment"># 网站的根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>  <span class="comment">#文章永久链接的形成模版。每一篇文章都有唯一的url。</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>                   <span class="comment">#文章永久链接中，各部分的默认值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>          <span class="comment"># 网站中源文件（比如Markdown啊什么的所在的文件夹）</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>          <span class="comment"># 生成的静态网站的目录</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>               <span class="comment"># 标签页所在的文件夹。</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>       <span class="comment"># 文档页所在的文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>    <span class="comment"># 类别也所在的文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>    <span class="comment"># 代码也所在的文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>             <span class="comment"># 国际语言所在的文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>                <span class="comment"># 忽略文档清单</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 写作</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>    <span class="comment"># 默认新建文档名，`:title`为变量，指文档标题，也可用其他变量</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>        <span class="comment"># 新建文档的默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>            <span class="comment"># 是否要把标题中的首字符大写</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span>         <span class="comment"># 是否要在新开tab中打开外链</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>            <span class="comment"># 文件名是否小写敏感</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>        <span class="comment"># 是否渲染草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>    <span class="comment"># 是否启用资源文件夹。如启用，新建文档同时建立同名的资源文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>        <span class="comment"># 是否把站内资源的链接改为站内相对链接。建议关闭。</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>                <span class="comment"># 文档中指定为未来时间创建</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>              <span class="comment"># 是否开启代码高亮功能</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>         <span class="comment"># 代码块中是否在前面加上行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>        <span class="comment"># 是否自动检测代码块的语言（比如xml、JavaScript、mermaid等）</span></span><br><span class="line">  <span class="attr">tab_replace:</span>              <span class="comment"># 用什么字符来代替tab(`\t`)字符。</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span>       </span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span>              <span class="comment"># 主页所在路径，默认为&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span>          <span class="comment"># 主页的索引页包含文章数量，如未定义，则采用根目录下的`per_page`值</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>       <span class="comment"># 文章（Post类型）排序属性，`-`为降序</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span>      <span class="comment"># 对文档的默认分类</span></span><br><span class="line"><span class="attr">category_map:</span>                        <span class="comment"># 对文档中的分类字段进行映射。建立分类文件夹时采用映射后的字符串</span></span><br><span class="line"><span class="attr">tag_map:</span>                             <span class="comment"># 对文档中的标签字段进行映射。建立标签文件夹时采用映射后的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>   <span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>     <span class="comment"># 时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>                      <span class="comment"># 主页/分类/标签/存档等类型索引页包含文章数量</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>              <span class="comment"># 分页所在文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions                      # 扩展。放置插件和主题</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>                                <span class="comment"># 默认主题landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html    </span></span><br><span class="line"><span class="attr">deploy:</span>                                         <span class="comment"># 定义部署</span></span><br><span class="line">  <span class="attr">type:</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>主题配置文件：位于主题目录下（themes&#x2F;hexo-theme-next&#x2F;_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项。</p></li><li><p>设置站点配置文件主题为 next。（用于我clone下来的next的文件夹名为hexo-theme-next），所以要将主题设置为 hexo-theme-next 而不是next</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-next</span></span><br></pre></td></tr></table></figure><h3 id="3-2-主题方案设置"><a href="#3-2-主题方案设置" class="headerlink" title="3.2 主题方案设置"></a>3.2 主题方案设置</h3><p>在主题配置文件中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><h3 id="3-3-配置menu"><a href="#3-3-配置menu" class="headerlink" title="3.3 配置menu"></a>3.3 配置menu</h3><ol><li>在站点配置文件中</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">MiDoLi&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;Code builds world !&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;欢迎来到我的世界💜&quot;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">MiDoLi</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在主题配置文件中</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment"># sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span> <span class="comment"># 是否显示各个页面的图标</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span> <span class="comment"># 是否显示分类/标签/归档页的内容量</span></span><br></pre></td></tr></table></figure><h3 id="3-4-隐藏网页底部-powered-By-Hexo-强力驱动-TODO"><a href="#3-4-隐藏网页底部-powered-By-Hexo-强力驱动-TODO" class="headerlink" title="3.4 隐藏网页底部 powered By Hexo &#x2F; 强力驱动(TODO)"></a>3.4 隐藏网页底部 powered By Hexo &#x2F; 强力驱动(TODO)</h3><p>全局搜索并注释掉相应代码即可(我就没注释了)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--</span> <span class="string">删除</span> <span class="string">“由</span> <span class="string">Hexo</span> <span class="string">&amp;</span> <span class="string">NexT.Gemini</span> <span class="string">强力驱动”</span> <span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span> &#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">theme.footer.powered</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="string">&lt;div</span> <span class="string">class=&quot;powered-by&quot;&gt;</span></span><br><span class="line">    &#123;<span class="string">%-</span> <span class="string">set</span> <span class="string">next_site</span> <span class="string">=</span> <span class="string">&#x27;https://theme-next.js.org&#x27;</span> <span class="string">if</span> <span class="string">theme.scheme</span> <span class="string">===</span> <span class="string">&#x27;Gemini&#x27;</span> <span class="string">else</span> <span class="string">&#x27;https://theme-next.js.org/&#x27;</span> <span class="string">+</span> <span class="string">theme.scheme</span> <span class="string">|</span> <span class="string">lower</span> <span class="string">+</span> <span class="string">&#x27;/&#x27;</span> <span class="string">%</span>&#125;</span><br><span class="line">    &#123;&#123;<span class="bullet">-</span> <span class="string">__(&#x27;footer.powered&#x27;</span>, <span class="string">next_url(&#x27;https://hexo.io&#x27;</span>, <span class="string">&#x27;Hexo&#x27;</span><span class="string">)</span> <span class="string">+</span> <span class="string">&#x27; &amp; &#x27;</span> <span class="string">+</span> <span class="string">next_url(next_site</span>, <span class="string">&#x27;NexT.&#x27;</span> <span class="string">+</span> <span class="string">theme.scheme))</span> &#125;&#125;</span><br><span class="line">  <span class="string">&lt;/div&gt;</span></span><br><span class="line">&#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125; <span class="string">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-配置代码块高亮风格"><a href="#3-5-配置代码块高亮风格" class="headerlink" title="3.5 配置代码块高亮风格"></a>3.5 配置代码块高亮风格</h3><p>highlight 和 prismjs 是两种代码块风格，现在 highlight 是主流，且二者只能开启其一。</p><ul><li>站点配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启代码高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment">#是否增加代码行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span> <span class="comment">#自动判断代码语言</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>主题配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span> <span class="comment"># 一键复制</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><p>代码风格我就直接用的默认的 normal<br>复制按钮可以选择default | flat | mac三种风格</p><p>可在 <a href="https://theme-next.js.org/highlight/">https://theme-next.js.org/highlight/</a> 中查看各个代码风格主题，选择自己喜欢的代码风格</p><h3 id="3-6-文章添加阴影-TODO"><a href="#3-6-文章添加阴影-TODO" class="headerlink" title="3.6  文章添加阴影(TODO)"></a>3.6  文章添加阴影(TODO)</h3><p>找到文件blog\themes\hexo-theme-next\source\css\_common\components\post\post.styl （旧版可能是index.styl文件），并在修改其中use-motion的内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.use-motion</span> &#123;</span><br><span class="line">if (hexo-config(&#x27;motion<span class="selector-class">.transition</span><span class="selector-class">.post_block</span>&#x27;)) &#123;</span><br><span class="line">    <span class="selector-class">.post-block</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.pagination</span>, <span class="selector-class">.comments</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-7-显示当前浏览进度"><a href="#3-7-显示当前浏览进度" class="headerlink" title="3.7 显示当前浏览进度"></a>3.7 显示当前浏览进度</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Back to top in sidebar.</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-8-文章分享功能"><a href="#3-8-文章分享功能" class="headerlink" title="3.8 文章分享功能"></a>3.8 文章分享功能</h3><p>等有了域名以后才能在addthis中配置</p><h3 id="3-9-Local-Search本地搜索"><a href="#3-9-Local-Search本地搜索" class="headerlink" title="3.9 Local Search本地搜索"></a>3.9 Local Search本地搜索</h3><ul><li>安装插件 hexo-generator-searchdb，执行以下命令:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ul><li>修改 hexo&#x2F;_config.yml 站点配置文件，新增以下内容到末尾位置：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>修改 主题配置文件，启用本地搜索功能：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 页面打开时预加载搜索数据</span></span><br><span class="line"><span class="attr">preload:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>我还将 页面打开时预加载搜索数据设置为了true 这个看个人需要。</p><h3 id="3-10-设置favicon-ico图标-TODO"><a href="#3-10-设置favicon-ico图标-TODO" class="headerlink" title="3.10 设置favicon.ico图标(TODO)"></a>3.10 设置favicon.ico图标(TODO)</h3><p>在 EasyIcon 中找一张（32 * 32）的 ico 图标，或者去别的网站下载或者制作，并将图标名称改为 favicon.ico，然后把图标放在 &#x2F;themes&#x2F;next&#x2F;source&#x2F;images 里，并且修改主题配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure><h3 id="3-11-修改文章底部的-号的标签"><a href="#3-11-修改文章底部的-号的标签" class="headerlink" title="3.11 修改文章底部的#号的标签"></a>3.11 修改文章底部的#号的标签</h3><p>新版本的next无需修改</p><h3 id="3-12-增加文章字数统计和阅读时长"><a href="#3-12-增加文章字数统计和阅读时长" class="headerlink" title="3.12 增加文章字数统计和阅读时长"></a>3.12 增加文章字数统计和阅读时长</h3><ul><li>安装 hexo-word-counter 插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line">npm install eslint --save</span><br></pre></td></tr></table></figure><ul><li>站点配置文件，将以下内容粘贴在末尾位置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加文章字数统计及阅读时长功能</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure><ul><li>在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                   <span class="comment"># Average Word Length</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                 <span class="comment"># Words Per Minute（每分钟阅读词数）</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure><h3 id="3-13-阅读全文"><a href="#3-13-阅读全文" class="headerlink" title="3.13 阅读全文"></a>3.13 阅读全文</h3><p>直接在文章中添加 <!-- more --> 来精确控制摘要内容，即控制 Read More（阅读全文） 的位置</p><p>我们可以添加前言引用来对文章进行总结提炼 详情可点击阅读全文~<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.13%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87.png"></p><h3 id="3-14-添加作者头像"><a href="#3-14-添加作者头像" class="headerlink" title="3.14 添加作者头像"></a>3.14 添加作者头像</h3><p>进入主题配置文件，找到下面这行</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> </span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br></pre></td></tr></table></figure><p>上传自定义的图片到下列目录：&#x2F;themes&#x2F;hexo-theme-next&#x2F;source&#x2F;images&#x2F;，更改 avatar 路径完成！ （我clone下来的next项目名是hexo-theme-next，有的是next，所以看清自己的路径）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/Ben.jpg</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 设置头像为圆形显示</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment"># 当鼠标选中头像后 头像会旋转一周</span></span><br></pre></td></tr></table></figure><h3 id="3-15-添加页面顶部加载条-TODO"><a href="#3-15-添加页面顶部加载条-TODO" class="headerlink" title="3.15 添加页面顶部加载条(TODO)"></a>3.15 添加页面顶部加载条(TODO)</h3><p>全局搜索 pace 然后设置 pace: true 开启</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># All available colors:</span></span><br><span class="line">  <span class="comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">blue</span></span><br><span class="line">  <span class="comment"># All available themes:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">bounce</span></span><br></pre></td></tr></table></figure><p>我看<strong>最新版本next没有这个color的参数</strong>，可以自行设置看看</p><h3 id="3-16-添加本站运行时间"><a href="#3-16-添加本站运行时间" class="headerlink" title="3.16 添加本站运行时间"></a>3.16 添加本站运行时间</h3><p>修改 &#x2F;blog&#x2F;themes&#x2F;hexo-theme-next&#x2F;layout&#x2F;_partials&#x2F;footer.swig 文件，在末尾加入如下代码：（我clone下来的next项目名是hexo-theme-next，有的是next，所以看清自己的路径）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;03/01/2023 10:00:00&quot;); //此处修改你的建站时间或者网站上线时间</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-17-鼠标点击动画"><a href="#3-17-鼠标点击动画" class="headerlink" title="3.17 鼠标点击动画"></a>3.17 鼠标点击动画</h3><ol><li>爱心特效</li></ol><ul><li>在 &#x2F;themes&#x2F;hexo-theme-next&#x2F;source&#x2F;js&#x2F; 下新建文件 clicklove.js 并添加代码：（我clone下来的next项目名是hexo-theme-next，有的是next，所以看清自己的路径）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params">e,t,a</span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>)&#123;<span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="title function_">o</span>(),<span class="title function_">r</span>()&#125;<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.<span class="property">length</span>;e++)d[e].<span class="property">alpha</span>&lt;=<span class="number">0</span>?(t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>),d.<span class="title function_">splice</span>(e,<span class="number">1</span>)):(d[e].<span class="property">y</span>--,d[e].<span class="property">scale</span>+=<span class="number">.004</span>,d[e].<span class="property">alpha</span>-=<span class="number">.013</span>,d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;left:&quot;</span>+d[e].<span class="property">x</span>+<span class="string">&quot;px;top:&quot;</span>+d[e].<span class="property">y</span>+<span class="string">&quot;px;opacity:&quot;</span>+d[e].<span class="property">alpha</span>+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;,&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="property">color</span>+<span class="string">&quot;;z-index:99999&quot;</span>);<span class="title function_">requestAnimationFrame</span>(r)&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.<span class="property">onclick</span>&amp;&amp;e.<span class="property">onclick</span>;e.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;t&amp;&amp;<span class="title function_">t</span>(),<span class="title function_">i</span>(e)&#125;&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);a.<span class="property">className</span>=<span class="string">&quot;heart&quot;</span>,d.<span class="title function_">push</span>(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.<span class="property">clientX</span>-<span class="number">5</span>,<span class="attr">y</span>:e.<span class="property">clientY</span>-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="title function_">s</span>()&#125;),t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);a.<span class="property">type</span>=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))&#125;<span class="keyword">catch</span>(t)&#123;a.<span class="property">styleSheet</span>.<span class="property">cssText</span>=e&#125;t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.<span class="property">requestAnimationFrame</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span>||e.<span class="property">webkitRequestAnimationFrame</span>||e.<span class="property">mozRequestAnimationFrame</span>||e.<span class="property">oRequestAnimationFrame</span>||e.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),<span class="title function_">n</span>()&#125;(<span class="variable language_">window</span>,<span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure><ul><li>在 \themes\hexo-theme-next\layout_layout.swig 文件末尾添加：（我clone下来的next项目名是hexo-theme-next，有的是next，所以看清自己的路径）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.17%E7%88%B1%E5%BF%83%E5%8A%A8%E7%94%BB.gif"></p><ol start="2"><li>在 themes&#x2F;hexo-theme-next&#x2F;source&#x2F;js&#x2F; 里面新建文件 fireworks.js 并添加代码：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>; <span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>) &#123; pointerX = (e.<span class="property">clientX</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>) - canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>, pointerY = e.<span class="property">clientY</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span> - canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &#125; <span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>) &#123; <span class="keyword">var</span> t = anime.<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">360</span>) * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>, a = anime.<span class="title function_">random</span>(<span class="number">50</span>, <span class="number">180</span>), n = [-<span class="number">1</span>, <span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">1</span>)] * a; <span class="keyword">return</span> &#123; <span class="attr">x</span>: e.<span class="property">x</span> + n * <span class="title class_">Math</span>.<span class="title function_">cos</span>(t), <span class="attr">y</span>: e.<span class="property">y</span> + n * <span class="title class_">Math</span>.<span class="title function_">sin</span>(t) &#125; &#125; <span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e, t</span>) &#123; <span class="keyword">var</span> a = &#123;&#125;; <span class="keyword">return</span> a.<span class="property">x</span> = e, a.<span class="property">y</span> = t, a.<span class="property">color</span> = colors[anime.<span class="title function_">random</span>(<span class="number">0</span>, colors.<span class="property">length</span> - <span class="number">1</span>)], a.<span class="property">radius</span> = anime.<span class="title function_">random</span>(<span class="number">16</span>, <span class="number">32</span>), a.<span class="property">endPos</span> = <span class="title function_">setParticuleDirection</span>(a), a.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; ctx.<span class="title function_">beginPath</span>(), ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>, a.<span class="property">y</span>, a.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, !<span class="number">0</span>), ctx.<span class="property">fillStyle</span> = a.<span class="property">color</span>, ctx.<span class="title function_">fill</span>() &#125;, a &#125; <span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e, t</span>) &#123; <span class="keyword">var</span> a = &#123;&#125;; <span class="keyword">return</span> a.<span class="property">x</span> = e, a.<span class="property">y</span> = t, a.<span class="property">color</span> = <span class="string">&quot;#F00&quot;</span>, a.<span class="property">radius</span> = <span class="number">0.1</span>, a.<span class="property">alpha</span> = <span class="number">0.5</span>, a.<span class="property">lineWidth</span> = <span class="number">6</span>, a.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; ctx.<span class="property">globalAlpha</span> = a.<span class="property">alpha</span>, ctx.<span class="title function_">beginPath</span>(), ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>, a.<span class="property">y</span>, a.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, !<span class="number">0</span>), ctx.<span class="property">lineWidth</span> = a.<span class="property">lineWidth</span>, ctx.<span class="property">strokeStyle</span> = a.<span class="property">color</span>, ctx.<span class="title function_">stroke</span>(), ctx.<span class="property">globalAlpha</span> = <span class="number">1</span> &#125;, a &#125; <span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.<span class="property">animatables</span>.<span class="property">length</span>; t++) &#123; e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>() &#125; &#125; <span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e, t</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="title function_">createCircle</span>(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123; n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e, t)) &#125; anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123; <span class="attr">targets</span>: n, <span class="attr">x</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span> &#125;, <span class="attr">y</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span> &#125;, <span class="attr">radius</span>: <span class="number">0.1</span>, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">1200</span>, <span class="number">1800</span>), <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>, <span class="attr">update</span>: renderParticule &#125;).<span class="title function_">add</span>(&#123; <span class="attr">targets</span>: a, <span class="attr">radius</span>: anime.<span class="title function_">random</span>(<span class="number">80</span>, <span class="number">160</span>), <span class="attr">lineWidth</span>: <span class="number">0</span>, <span class="attr">alpha</span>: &#123; <span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">600</span>, <span class="number">800</span>) &#125;, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">1200</span>, <span class="number">1800</span>), <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>, <span class="attr">update</span>: renderParticule, <span class="attr">offset</span>: <span class="number">0</span> &#125;) &#125; <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e, t</span>) &#123; <span class="keyword">var</span> a; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> n = <span class="variable language_">this</span>, i = <span class="variable language_">arguments</span>; <span class="built_in">clearTimeout</span>(a), a = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; e.<span class="title function_">apply</span>(n, i) &#125;, t) &#125; &#125; <span class="keyword">var</span> canvasEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>); <span class="keyword">if</span> (canvasEl) &#123; <span class="keyword">var</span> ctx = canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>), numberOfParticules = <span class="number">30</span>, pointerX = <span class="number">0</span>, pointerY = <span class="number">0</span>, tap = <span class="string">&quot;mousedown&quot;</span>, colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>], setCanvasSize = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; canvasEl.<span class="property">width</span> = <span class="number">2</span> * <span class="variable language_">window</span>.<span class="property">innerWidth</span>, canvasEl.<span class="property">height</span> = <span class="number">2</span> * <span class="variable language_">window</span>.<span class="property">innerHeight</span>, canvasEl.<span class="property">style</span>.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> + <span class="string">&quot;px&quot;</span>, canvasEl.<span class="property">style</span>.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span> + <span class="string">&quot;px&quot;</span>, canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>, <span class="number">2</span>) &#125;, <span class="number">500</span>), render = <span class="title function_">anime</span>(&#123; <span class="attr">duration</span>: <span class="number">1</span> / <span class="number">0</span>, <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvasEl.<span class="property">width</span>, canvasEl.<span class="property">height</span>) &#125; &#125;); <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap, <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="string">&quot;sidebar&quot;</span> !== e.<span class="property">target</span>.<span class="property">id</span> &amp;&amp; <span class="string">&quot;toggle-sidebar&quot;</span> !== e.<span class="property">target</span>.<span class="property">id</span> &amp;&amp; <span class="string">&quot;A&quot;</span> !== e.<span class="property">target</span>.<span class="property">nodeName</span> &amp;&amp; <span class="string">&quot;IMG&quot;</span> !== e.<span class="property">target</span>.<span class="property">nodeName</span> &amp;&amp; (render.<span class="title function_">play</span>(), <span class="title function_">updateCoords</span>(e), <span class="title function_">animateParticules</span>(pointerX, pointerY)) &#125;, !<span class="number">1</span>), <span class="title function_">setCanvasSize</span>(), <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>) &#125; <span class="string">&quot;use strict&quot;</span>; <span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>) &#123; pointerX = (e.<span class="property">clientX</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>) - canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>, pointerY = e.<span class="property">clientY</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span> - canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &#125; <span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>) &#123; <span class="keyword">var</span> t = anime.<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">360</span>) * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>, a = anime.<span class="title function_">random</span>(<span class="number">50</span>, <span class="number">180</span>), n = [-<span class="number">1</span>, <span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">1</span>)] * a; <span class="keyword">return</span> &#123; <span class="attr">x</span>: e.<span class="property">x</span> + n * <span class="title class_">Math</span>.<span class="title function_">cos</span>(t), <span class="attr">y</span>: e.<span class="property">y</span> + n * <span class="title class_">Math</span>.<span class="title function_">sin</span>(t) &#125; &#125; <span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e, t</span>) &#123; <span class="keyword">var</span> a = &#123;&#125;; <span class="keyword">return</span> a.<span class="property">x</span> = e, a.<span class="property">y</span> = t, a.<span class="property">color</span> = colors[anime.<span class="title function_">random</span>(<span class="number">0</span>, colors.<span class="property">length</span> - <span class="number">1</span>)], a.<span class="property">radius</span> = anime.<span class="title function_">random</span>(<span class="number">16</span>, <span class="number">32</span>), a.<span class="property">endPos</span> = <span class="title function_">setParticuleDirection</span>(a), a.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; ctx.<span class="title function_">beginPath</span>(), ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>, a.<span class="property">y</span>, a.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, !<span class="number">0</span>), ctx.<span class="property">fillStyle</span> = a.<span class="property">color</span>, ctx.<span class="title function_">fill</span>() &#125;, a &#125; <span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e, t</span>) &#123; <span class="keyword">var</span> a = &#123;&#125;; <span class="keyword">return</span> a.<span class="property">x</span> = e, a.<span class="property">y</span> = t, a.<span class="property">color</span> = <span class="string">&quot;#F00&quot;</span>, a.<span class="property">radius</span> = <span class="number">0.1</span>, a.<span class="property">alpha</span> = <span class="number">0.5</span>, a.<span class="property">lineWidth</span> = <span class="number">6</span>, a.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; ctx.<span class="property">globalAlpha</span> = a.<span class="property">alpha</span>, ctx.<span class="title function_">beginPath</span>(), ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>, a.<span class="property">y</span>, a.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, !<span class="number">0</span>), ctx.<span class="property">lineWidth</span> = a.<span class="property">lineWidth</span>, ctx.<span class="property">strokeStyle</span> = a.<span class="property">color</span>, ctx.<span class="title function_">stroke</span>(), ctx.<span class="property">globalAlpha</span> = <span class="number">1</span> &#125;, a &#125; <span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.<span class="property">animatables</span>.<span class="property">length</span>; t++) &#123; e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>() &#125; &#125; <span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e, t</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="title function_">createCircle</span>(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123; n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e, t)) &#125; anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123; <span class="attr">targets</span>: n, <span class="attr">x</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span> &#125;, <span class="attr">y</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span> &#125;, <span class="attr">radius</span>: <span class="number">0.1</span>, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">1200</span>, <span class="number">1800</span>), <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>, <span class="attr">update</span>: renderParticule &#125;).<span class="title function_">add</span>(&#123; <span class="attr">targets</span>: a, <span class="attr">radius</span>: anime.<span class="title function_">random</span>(<span class="number">80</span>, <span class="number">160</span>), <span class="attr">lineWidth</span>: <span class="number">0</span>, <span class="attr">alpha</span>: &#123; <span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">600</span>, <span class="number">800</span>) &#125;, <span class="attr">duration</span>: anime.<span class="title function_">random</span>(<span class="number">1200</span>, <span class="number">1800</span>), <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>, <span class="attr">update</span>: renderParticule, <span class="attr">offset</span>: <span class="number">0</span> &#125;) &#125; <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e, t</span>) &#123; <span class="keyword">var</span> a; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> n = <span class="variable language_">this</span>, i = <span class="variable language_">arguments</span>; <span class="built_in">clearTimeout</span>(a), a = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; e.<span class="title function_">apply</span>(n, i) &#125;, t) &#125; &#125; <span class="keyword">var</span> canvasEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>); <span class="keyword">if</span> (canvasEl) &#123; <span class="keyword">var</span> ctx = canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>), numberOfParticules = <span class="number">30</span>, pointerX = <span class="number">0</span>, pointerY = <span class="number">0</span>, tap = <span class="string">&quot;mousedown&quot;</span>, colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>], setCanvasSize = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; canvasEl.<span class="property">width</span> = <span class="number">2</span> * <span class="variable language_">window</span>.<span class="property">innerWidth</span>, canvasEl.<span class="property">height</span> = <span class="number">2</span> * <span class="variable language_">window</span>.<span class="property">innerHeight</span>, canvasEl.<span class="property">style</span>.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> + <span class="string">&quot;px&quot;</span>, canvasEl.<span class="property">style</span>.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span> + <span class="string">&quot;px&quot;</span>, canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>, <span class="number">2</span>) &#125;, <span class="number">500</span>), render = <span class="title function_">anime</span>(&#123; <span class="attr">duration</span>: <span class="number">1</span> / <span class="number">0</span>, <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvasEl.<span class="property">width</span>, canvasEl.<span class="property">height</span>) &#125; &#125;); <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap, <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="string">&quot;sidebar&quot;</span> !== e.<span class="property">target</span>.<span class="property">id</span> &amp;&amp; <span class="string">&quot;toggle-sidebar&quot;</span> !== e.<span class="property">target</span>.<span class="property">id</span> &amp;&amp; <span class="string">&quot;A&quot;</span> !== e.<span class="property">target</span>.<span class="property">nodeName</span> &amp;&amp; <span class="string">&quot;IMG&quot;</span> !== e.<span class="property">target</span>.<span class="property">nodeName</span> &amp;&amp; (render.<span class="title function_">play</span>(), <span class="title function_">updateCoords</span>(e), <span class="title function_">animateParticules</span>(pointerX, pointerY)) &#125;, !<span class="number">1</span>), <span class="title function_">setCanvasSize</span>(), <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>) &#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>打开 themes&#x2F;hexo-theme-next&#x2F;layout&#x2F;_layout.swig，在里添加如下代码：</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.fireworks %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>打开主题配置文件，末尾添加：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 鼠标点击动画 Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.17%E7%83%9F%E8%8A%B1%E5%8A%A8%E7%94%BB.png"></p><h3 id="3-18-背景动画"><a href="#3-18-背景动画" class="headerlink" title="3.18 背景动画"></a>3.18 背景动画</h3><ol><li>丝带背景动画(TODO) 还未启用</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 丝带背景动画</span></span><br><span class="line"><span class="comment"># Generate a ribbon in your website with HTML5 canvas.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="comment"># 丝带背景动画</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure><ol start="2"><li>网格背景动画</li></ol><ul><li>打开 hexo-theme-next&#x2F;layout&#x2F;_layout.swig，在<body></body>标签内添加代码</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.canvas_nest</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span></span><br><span class="line">    <span class="string">count=&quot;150&quot;</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">1</span></span><br><span class="line">    <span class="string">src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><p>原文怀疑src里的链接配置的 count&#x3D;99，所以设置了内联式 count&#x3D;150（默认也是150）, 设置后count的数量明显增加</p><ul><li>配置项<ul><li>color：线条颜色, 默认: ‘0,0,0’ ；三个数字分别为(R,G,B)，注意用, 分割</li><li>opacity：线条透明度（0～1），默认 0.5</li><li>count：线条的总数量，默认 150</li><li>zIndex：背景的z-index属性，css属性用于控制所在层的位置，默认：-1</li></ul></li></ul><ol start="3"><li>打开主题配置文件，添加以下代码：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span> <span class="comment"># 开启动画 老版的不能用enable: true</span></span><br><span class="line"><span class="comment"># canvas_nest: false # 关闭动画</span></span><br></pre></td></tr></table></figure><h3 id="3-19-文章结束标志"><a href="#3-19-文章结束标志" class="headerlink" title="3.19 文章结束标志"></a>3.19 文章结束标志</h3><ul><li>在路径 \themes\hexo-theme-next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------已经到底啦！&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>打开 \themes\hexo-theme-next\layout\_macro\post.swig 文件，在post-body 之后(END POST BODY)，post-footer 之前添加以下代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-20-配置live-2d模型"><a href="#3-20-配置live-2d模型" class="headerlink" title="3.20 配置live-2d模型"></a>3.20 配置live-2d模型</h3><ul><li>安装 hexo-helper-live2d 插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ul><li><p>这个默认是 shizuku 不用配置，安装后直接在站点显示，但如果想要性能优化，配置模型相关信息的话，需要再安装 shizuku。</p></li><li><p>在站点配置文件中添加参数：（想要配置参数的话，需要重新下载专门的模型包）</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-&lt;你喜欢的模型名字&gt;</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="comment"># width: 150 # 大小根据模型结构自己调整合适的</span></span><br><span class="line">    <span class="comment"># height: 300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 是否在手机端显示</span></span><br></pre></td></tr></table></figure><ul><li>可供选择模型：</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-<span class="keyword">model</span>-chitose</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-epsilon2_1</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-gf</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">01</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">02</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haruto</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hibiki</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hijiki</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-izumi</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-koharu</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-miku</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-ni-j</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nico</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nietzsche</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nipsilon</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nito</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-shizuku</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tororo</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tsumiki</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-unitychan</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-wanko</span><br><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-z16</span><br></pre></td></tr></table></figure><ul><li>上面模型的选择可在lived2d中选择，并下载相应的模型：（这里先选择了 wanko作为示例）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-wanko --save</span><br></pre></td></tr></table></figure><ul><li><p>安装 shizuku 模型时建议 cnpm，速度很快且用npm安装这个模型容易出现 network error</p></li><li><p>下载cnpm淘宝源(TODO)（我这里就没下载了,直接安装的）</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>安装 shizuku 模型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku --save</span><br></pre></td></tr></table></figure><ul><li>hexo-helper-live2d 相当于 live2d 的脚手架，不能只下载 model，删除了 hexo-helper-live2d，live2d 模型无法生成</li></ul><h3 id="3-21-侧边栏社交链接"><a href="#3-21-侧边栏社交链接" class="headerlink" title="3.21 侧边栏社交链接"></a>3.21 侧边栏社交链接</h3><p>在主题配置文件中，开启 social 并选择想要的社交链接，取消注释</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment"># GitHub: https://github.com/Benn314 || fab fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="number">936184713</span><span class="string">@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Bilibili:</span> <span class="string">https://space.bilibili.com/8032462?spm_id_from=333.1007.0.0</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/qq_41234218?type=blog</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure><h4 id="3-21-1-自定义icon图标"><a href="#3-21-1-自定义icon图标" class="headerlink" title="3.21.1 自定义icon图标"></a>3.21.1 自定义icon图标</h4><ul><li><p>首先去 <a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图库</a> 下载 svg 格式的图标，需要什么图标则搜索相应图标并下载，然后把图标放在 \themes\hexo-theme-next\source\images 目录下</p></li><li><p>在 \themes\hexo-theme-next\source\css 目录下的 main.styl 添加代码<br>这里以 bilibili 和 CSDN 为例： (记得把下载下来的图片名改为bilibili.svg和csdn.svg)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 侧边栏图标格式设置 */</span></span><br><span class="line"><span class="selector-class">.bilibili</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/bilibili.svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">1em</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.55</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0.05rem</span> <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>; </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0rem</span>;</span><br><span class="line">  <span class="comment">/*鼠标停留在图标上时，图标呈现发光效果*/</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.csdn</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/csdn.svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">1em</span> <span class="number">1em</span>; <span class="comment">/*第一个参数是宽 第二个是高*/</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.55</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0.05rem</span> <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>; </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0rem</span>;</span><br><span class="line">  <span class="comment">/*鼠标停留在图标上时，图标呈现发光效果*/</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件中，开启 social 并在 social 项下图片来源设置为 fa bilibili 和 fa csdn</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/ConanGentleman</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="number">936184713</span><span class="string">@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Bilibili:</span> <span class="string">https://space.bilibili.com/8032462?spm_id_from=333.1007.0.0</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">bilibili</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/qq_41234218?type=blog</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">csdn</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure><h3 id="3-22-添加fork-me-on-github入口"><a href="#3-22-添加fork-me-on-github入口" class="headerlink" title="3.22 添加fork me on github入口"></a>3.22 添加fork me on github入口</h3><ul><li>首先到 GitHub Corners 或者 GitHub Ribbons 选择自己喜欢的图标，然后copy相应的代码粘贴到 themes&#x2F;hexo-theme-next&#x2F;layout&#x2F;_layout.swig 文件中，把代码中的href后面的值替换成你要跳转的地址，比如你的GitHub主页</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/ConanGentleman&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.23forkmeon%20github%E5%85%A5%E5%8F%A3.jpg"></p><h3 id="3-23-更换博客背景"><a href="#3-23-更换博客背景" class="headerlink" title="3.23 更换博客背景"></a>3.23 更换博客背景</h3><ol><li>更换主背景</li></ol><ul><li><p>把准备好的背景图放入 themes\hexo-theme-next\source\images 中</p></li><li><p>新版本需要新建 hexo&#x2F;source&#x2F;_data&#x2F;styles.styl，即在 hexo目录的 source文件夹下新建 _data 文件夹，文件夹中新建 styles.styl。<strong>注意：是新建在 hexo目录下 source文件夹里，而不是主题文件 next目录下的 source文件夹</strong>，如图：<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.22%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E6%96%87%E4%BB%B6%E5%A4%B9.jpg"></p></li><li><p>打开 styles.styl，添加如下：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//背景图片设置</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/images/background.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    // <span class="attribute">background-size</span>: cover // 填充</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置项</p><ul><li>background-image:url 为图片路径，可以直接使用链接，也可以是图片路径（将自定义图片放入hexo-theme-next\public\images路径下或者之前提到的themes\hexo-theme-next\source\images中）</li><li>background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕</li><li>background-attachment：背景是否随着网页上下滚动而滚动，fixed 为固定</li><li>background-size：图片展示大小，这里设置 100%，100% 的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示</li><li>background-size: cover &#x2F;&#x2F; 填充</li></ul></li><li><p>打开主题配置文件，将 custom_file_path 的 sytle 注释打开。(<strong>variable</strong>: source&#x2F;_data&#x2F;variables.styl是<strong>后面<a href="#325-%E8%BE%B9%E6%A1%86%E5%9C%86%E8%A7%92">3.25-边框圆角</a>才设置的</strong>这里可以先不用，但也可以先设置了)</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加侧边栏背景</li></ol><ul><li>对 themes\hexo-theme-next\source\css\_schemes\Pisces\_header.styl 中 site-brand-container的background进行修改</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-brand-container</span> &#123;</span><br><span class="line">  // <span class="attribute">background</span>: <span class="built_in">var</span>(--theme-color); // 默认背景</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1668871333606-ef8461d43922?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw0fHx8ZW58MHx8fHw%3D&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=60&#x27;</span>);</span><br><span class="line">  // <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1661961110144-12ac85918e40?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDF8MHxlZGl0b3JpYWwtZmVlZHw4NHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=60&#x27;</span>);</span><br><span class="line">  // <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1668735648397-9defaa967b15?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMDV8fHxlbnwwfHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=60&#x27;</span>);</span><br><span class="line">  // <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1668765005700-021ea0bb9250?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMDN8fHxlbnwwfHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=60&#x27;</span>);</span><br><span class="line">  //<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1668681919287-7367677cdc4c?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNTV8fHxlbnwwfHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=60&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover; // 填充</span><br><span class="line">  //<span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.site-nav-on</span> &amp; &#123;</span><br><span class="line">    +tablet-mobile() &#123;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>扩展<br><a href="https://source.unsplash.com/">unsplash</a>是一个高清大图免费下载的好网站，提供了大量的图片和外链API，可以用来当作自己的博客背景</li></ul><h3 id="3-24-设置透明度"><a href="#3-24-设置透明度" class="headerlink" title="3.24 设置透明度"></a>3.24 设置透明度</h3><ul><li><p>单独给每个区域设置opacity会出现很多问题，例如搜索框弹出会被覆盖图层导致无法进行本地搜索</p></li><li><p>最理想是进行全局设置，在 blog\source\_data\styles.styl 中 直接设置body的透明度为0.85 全体透明化，opacity的值可以自行调整</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//背景图片设置</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/images/background.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    // <span class="attribute">background-size</span>: cover // 填充</span><br><span class="line">    opacity: <span class="number">0.85</span>;</span><br><span class="line">    //可选(用于移动端显示)</span><br><span class="line">    +mobile()&#123;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://unsplash.com/photos/shooting-star-in-night-sky-5LOhydOtTKU</span>); //这里选用的是https://source.unsplash.com/上的在线图片，用于移动端显示（可选）</span><br><span class="line">      background-size: cover;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-24-1-文章区域位置调整-TODO-调整了会有问题，建议别调整了，或者查一下错误"><a href="#3-24-1-文章区域位置调整-TODO-调整了会有问题，建议别调整了，或者查一下错误" class="headerlink" title="3.24.1 文章区域位置调整(TODO,调整了会有问题，建议别调整了，或者查一下错误)"></a>3.24.1 文章区域位置调整(TODO,调整了会有问题，建议别调整了，或者查一下错误)</h4><ul><li>在\themes\hexo-theme-next\source\css_common\components\post\post.styl （旧版可能是index.styl文件）设置了布局（调整位置信息） ,不需要的话可以删掉下面的margin和padding（默认值没有设置margin和padding）或者修改其值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.use-motion</span> &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion<span class="selector-class">.transition</span><span class="selector-class">.post_block</span>&#x27;)) &#123;</span><br><span class="line">    <span class="selector-class">.post-block</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">2px</span>;</span><br><span class="line">      <span class="attribute">padding-top</span>: <span class="number">45px</span>;</span><br><span class="line">      // <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0.95</span>; // 添加透明度</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.pagination</span>, <span class="selector-class">.comments</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;//文章位置调整</span><br></pre></td></tr></table></figure><h3 id="3-25-边框圆角"><a href="#3-25-边框圆角" class="headerlink" title="3.25 边框圆角"></a>3.25 边框圆角</h3><ul><li>在之前新建的 _data 目录下新建 variables.styl，类似新建 styles.styl。打开 variables.styl，添加如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 圆角设置</span><br><span class="line">$<span class="attribute">border-radius</span>-inner     = <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">$<span class="attribute">border-radius</span>           = <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><ul><li>打开主题配置文件, custom_file_path 中 variable 的注释 这个已经在<a href="#323-%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF">3.23 更换博客背景</a>中设置过了</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br></pre></td></tr></table></figure><ul><li>此时有一个问题就是 侧边栏-分类左下&#x2F;右下 的圆角明显有一层阴影，下图是修正过的（图片只是为了指明位置）<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.25%E8%BE%B9%E6%A1%86%E5%9C%86%E8%A7%92%E9%97%AE%E9%A2%98.jpg"></li><li>原因是开启 主题配置文件中back2top 的 sidebar 和 scrollpercent，back2top的阴影背景覆盖了圆角，把阴影背景改为透明便可解决，因为我们需要的只是scrollpercent。打开&#x2F;themes&#x2F;hexo-theme-next&#x2F;source&#x2F;css&#x2F;_variables&#x2F;Gemini.styl 内代码,将 $body-bg-color 赋值为透明 transparent</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Variables of Gemini scheme</span><br><span class="line">// ==================================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;Pisces.styl&quot;</span>;</span><br><span class="line"></span><br><span class="line">// Settings for some of the most global styles.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// $<span class="selector-tag">body</span>-bg-<span class="attribute">color</span>           = <span class="selector-id">#eee</span>;</span><br><span class="line">//将 $<span class="selector-tag">body</span>-bg-<span class="attribute">color</span> 赋值为透明 transparent 解决back2top的阴影背景覆盖边框圆角的问题</span><br><span class="line">$<span class="selector-tag">body</span>-bg-<span class="attribute">color</span>           = transparent; </span><br><span class="line"></span><br><span class="line">// Borders.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$<span class="attribute">box-shadow</span>-inner        = <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">12</span>);</span><br><span class="line">$<span class="attribute">box-shadow</span>              = <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">12</span>), <span class="number">0</span> -<span class="number">1px</span> .<span class="number">5px</span> <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">09</span>);</span><br><span class="line"></span><br><span class="line">$<span class="attribute">border-radius</span>-inner     = initial;</span><br><span class="line">$<span class="attribute">border-radius</span>           = initial;</span><br><span class="line">// $<span class="attribute">border-radius</span>-inner     = <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</span><br><span class="line">// $<span class="attribute">border-radius</span>           = <span class="number">3px</span>;</span><br></pre></td></tr></table></figure><h4 id="3-25-1-修改侧边栏顶部圆角"><a href="#3-25-1-修改侧边栏顶部圆角" class="headerlink" title="3.25.1 修改侧边栏顶部圆角"></a>3.25.1 修改侧边栏顶部圆角</h4><p>在 blog\themes\hexo-theme-next\source\css\_common\outline\header\header.styl (旧版可能是index.styl) 中对 site-brand-container（审查元素得知） 进行修改</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-brand-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">18.8px</span> <span class="number">18.8px</span> <span class="number">0</span> <span class="number">0</span>; // 上边圆角 下边尖角 不设置<span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span>的原因是因为下面的sidebar的class=&quot;<span class="selector-tag">header</span>&quot;有一点白色溢出 所以把圆角设置小点对其进行覆盖</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>左下&#x2F;右下角不需要设置圆角，不然反而不美观</p><h3 id="3-26-调整back2top透明度和位置"><a href="#3-26-调整back2top透明度和位置" class="headerlink" title="3.26 调整back2top透明度和位置"></a>3.26 调整back2top透明度和位置</h3><ol><li>调整透明度<br>进入 blog\themes\hexo-theme-next\source\css\_variables\Pisces.styl，根据自身博客修改透明度至满意值。（$b2t-opacity-hover 新版没有这个属性 ，看有没有必要设置）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Back <span class="selector-tag">to</span> <span class="attribute">top</span></span><br><span class="line">$b2t-<span class="attribute">opacity</span>  = .<span class="number">94</span>; // 默认 .<span class="number">6</span> // 调整透明度</span><br><span class="line">$b2t-<span class="attribute">opacity</span>-hover  = .<span class="number">99</span>; // 默认 .<span class="number">8</span>   这个新版没有 ，看有没有必要设置</span><br><span class="line">$b2t-<span class="attribute">position</span>-<span class="attribute">bottom</span>          = -<span class="number">100px</span>;</span><br><span class="line">$b2t-<span class="attribute">position</span>-<span class="attribute">bottom</span>-on       = <span class="number">30px</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>调整位置靠左</li></ol><p>调整位置靠左的原因是设计把live-2d放到右边，而此时back2top按钮不管是在live-2d图层上方(不美观)还是下方(按钮无法被点击且看不到百分比)效果都不理想，故把按钮调整至靠左位置</p><ul><li>在 blog\themes\hexo-theme-next\source\css\_variables\base.styl 中有Back to top的基本参数信息，我们把 $b2t-position-right 和 $b2t-position-right-mobile 注释掉，使其默认靠左</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Components</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="comment">// Back to top</span></span><br><span class="line">$b2t-opacity                  = <span class="number">.8</span>;</span><br><span class="line">$b2t-opacity-hover            = <span class="number">1</span>;</span><br><span class="line">$b2t-position-bottom          = <span class="number">-100</span>px;</span><br><span class="line">$b2t-position-bottom-on       = <span class="number">30</span>px;</span><br><span class="line"><span class="comment">// $b2t-position-right           = 30px; //注释掉 themes\hexo-theme-next\source\css\_mixins.styl的逻辑也可以注释掉 不然可能有warnning</span></span><br><span class="line"><span class="comment">// $b2t-position-right-mobile    = 20px;//注释掉 themes\hexo-theme-next\source\css\_mixins.styl的逻辑也可以注释掉 不然可能有warnning</span></span><br><span class="line">$b2t-font-<span class="keyword">size</span>                = <span class="number">12</span>px;</span><br><span class="line">$b2t-<span class="keyword">color</span>                    = white;</span><br><span class="line">$b2t-bg-<span class="keyword">color</span>                 = $black-deep;</span><br><span class="line"></span><br><span class="line">$sidebar-<span class="keyword">toggle</span>-inner-<span class="keyword">size</span>    = <span class="number">16</span>px;</span><br><span class="line">$sidebar-<span class="keyword">toggle</span>-padding       = <span class="number">5</span>px;</span><br><span class="line">$sidebar-<span class="keyword">toggle</span>-<span class="keyword">size</span>          = $sidebar-<span class="keyword">toggle</span>-inner-<span class="keyword">size</span> + $sidebar-<span class="keyword">toggle</span>-padding * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这里从right修改成left无效的原因是值没有变 只是换了个变量名<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.26%E8%B0%83%E6%95%B4back2top%E7%9A%84%E4%BD%8D%E7%BD%AE.jpeg"></p><ul><li>然后在 themes\hexo-theme-next\source\css\_common\components\back-to-top.styl 末尾(保证在body里)添加如下两行代码并注释 margin-right: 8px;</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">hexo-config</span>(<span class="string">&#x27;back2top.enable&#x27;</span>)) &#123;</span><br><span class="line">  <span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$b2t</span>-font-size;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="comment">//margin-right: 8px; // 注释掉（默认设置是这个 给改成末尾两行）</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">5px</span>; <span class="comment">// 新添加的代码</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>; <span class="comment">// // 新添加的代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-27-添加README-md文件-TODO"><a href="#3-27-添加README-md文件-TODO" class="headerlink" title="3.27 添加README.md文件(TODO)"></a>3.27 添加README.md文件(TODO)</h3><p>每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的 <strong>（最新的项目好像有了）</strong></p><ol><li>在 Hexo 目录下的 source 根目录下添加一个 README.md文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为（这个需要设置）</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure><p>保存退出即可 再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 文件了</p><h3 id="3-28-侧栏Celeste-旋转的小人"><a href="#3-28-侧栏Celeste-旋转的小人" class="headerlink" title="3.28 侧栏Celeste(旋转的小人)"></a>3.28 侧栏Celeste(旋转的小人)</h3><ol><li>这里罗列两种位置摆放效果</li></ol><ul><li>放在 blog\themes\hexo-theme-next\layout\_macro\sidebar.swig  （我选的这种，我觉得这种更好看，而且第二种没有找到合适的位置放，老有问题）</li></ul><p>文件中找到以下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-to-top motion-element&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>然后替换成以下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;twopeople&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:200px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;illo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/zdog.dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;rendered-js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.twopeople</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      &#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-to-top animated&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;&#123;&#123; __(&#x27;accessibility.back_to_top&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><ul><li>放在 blog\themes\hexo-theme-next\layout_layout.njk</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/WPHeader&quot;</span>&gt;</span></span><br><span class="line">        &#123;%- include &#x27;_partials/header/index.njk&#x27; -%&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      &#123;%- if theme.sidebar.display !== &#x27;remove&#x27; %&#125;</span><br><span class="line">        &#123;% block sidebar %&#125;&#123;% endblock %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      &lt;-- 旋转的小人 --&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;twopeople&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:200px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;illo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/zdog.dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;rendered-js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.twopeople</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式的动画位置不会固定在浏览器窗口位置，而是会随着滚动而消失</p><h3 id="3-29-懒加载开启-性能优化-TODO"><a href="#3-29-懒加载开启-性能优化-TODO" class="headerlink" title="3.29 懒加载开启(性能优化)(TODO)"></a>3.29 懒加载开启(性能优化)(TODO)</h3><p>进入 主题配置文件找到lazyload，修改为true：**(我开启后加载不出来界面了不知道为什么，所以就没开了)**</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="comment"># For more information: https://apoorv.pro/lozad.js/demo/</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span> <span class="comment"># 懒加载开启</span></span><br></pre></td></tr></table></figure><h3 id="3-30-加入网易云音乐播放器"><a href="#3-30-加入网易云音乐播放器" class="headerlink" title="3.30 加入网易云音乐播放器"></a>3.30 加入网易云音乐播放器</h3><p>在网页搜索网易云音乐，选择音乐，并生成外链播放器，获取 iframe 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外链播放器 溯（钢琴版）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=1433584979&amp;auto=1&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>建议把标签放到侧边栏，在 Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;sidebar.njk 或 themes\hexo-theme-next\layout_layout.njk 文件下，同理 <a href="#328-%E4%BE%A7%E6%A0%8Fceleste%E6%97%8B%E8%BD%AC%E7%9A%84%E5%B0%8F%E4%BA%BA">3.28 celeste旋转的小人</a>的方式选择位置粘贴进去，不同位置效果不同。<br>我依旧是在blog\themes\hexo-theme-next\layout\_macro\sidebar.swig里面设置的，放在了小人和back2top的按钮中间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;twopeople&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:200px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;illo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/zdog.dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;rendered-js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.twopeople</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 放在了这里start！！！--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外链播放器 溯（钢琴版）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=1433584979&amp;auto=1&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 放在了这里end！！！--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-to-top animated&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;&#123;&#123; __(&#x27;accessibility.back_to_top&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.30%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8.jpg"></p><h3 id="3-31-添加Aplayer音乐播放器-进阶"><a href="#3-31-添加Aplayer音乐播放器-进阶" class="headerlink" title="3.31 添加Aplayer音乐播放器(进阶)"></a>3.31 添加Aplayer音乐播放器(进阶)</h3><p>由于网易云外链播放器每次只能选择一首歌，如果想要让播放器的功能更加全面丰富，我们可以通过安装插件 Aplayer来满足我们的需求</p><ul><li>首先，先下载Aplayer源码：APlayer 或者执行以下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install aplayer --save</span><br></pre></td></tr></table></figure><p>如果通过命令执行则在 blog&#x2F;node_modules&#x2F;aplayer中找到dist文件夹</p><ul><li>​将文件中的dist文件夹复制到路径：blog&#x2F;themes&#x2F;next&#x2F;source</li></ul><ol><li>在目录 blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;dist 下新建 music.js 文件，内容是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">  <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// autoplay: true,</span></span><br><span class="line">  <span class="attr">audio</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;溯（钢琴版）&#x27;</span>,</span><br><span class="line">      <span class="attr">artist</span>: <span class="string">&#x27;柳轻颂&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=1433584979.mp3&#x27;</span>,</span><br><span class="line">      <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/qX7knUIlpmbJ34UBzCCS6w==/109951164802366812.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;夢灯籠&quot;</span>,</span><br><span class="line">      <span class="attr">artist</span>: <span class="string">&#x27;RADWIMPS&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/images/夢灯籠.mp3&#x27;</span>,</span><br><span class="line">      <span class="attr">cover</span>: <span class="string">&#x27;http://p2.music.126.net/sSxbRt9RpC6s_MaewyDJfA==/18597139672292692.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>歌曲信息可自行添加自己喜欢的</p><ol start="2"><li>配置项（记得都要加引号）</li></ol><ul><li>name：歌曲名称</li><li>artist：作者</li><li>url：连接（具体怎样操作看下面步骤），</li><li>cover：是图片连接，可以是本地图片，也可以是在线图片，本地放在 source&#x2F;images然后修改路径即可</li></ul><p>更多参数(⭐)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>), <span class="comment">//播放器容器元素</span></span><br><span class="line">    <span class="attr">mini</span>: <span class="literal">false</span>, <span class="comment">//迷你模式</span></span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>, <span class="comment">//自动播放</span></span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;#FADFA3&#x27;</span>, <span class="comment">//主题色</span></span><br><span class="line">    <span class="attr">loop</span>: <span class="string">&#x27;all&#x27;</span>, <span class="comment">//音频循环播放, 可选值: &#x27;all&#x27;全部循环, &#x27;one&#x27;单曲循环, &#x27;none&#x27;不循环</span></span><br><span class="line">    <span class="attr">order</span>: <span class="string">&#x27;random&#x27;</span>, <span class="comment">//音频循环顺序, 可选值: &#x27;list&#x27;列表循环, &#x27;random&#x27;随机循环</span></span><br><span class="line">    <span class="attr">preload</span>: <span class="string">&#x27;auto&#x27;</span>, <span class="comment">//预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class="line">    <span class="attr">volume</span>: <span class="number">0.7</span>, <span class="comment">//默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">    <span class="attr">mutex</span>: <span class="literal">true</span>, <span class="comment">//互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span></span><br><span class="line">    <span class="attr">listFolded</span>: <span class="literal">false</span>, <span class="comment">//列表默认折叠</span></span><br><span class="line">    <span class="attr">listMaxHeight</span>: <span class="number">90</span>, <span class="comment">//列表最大高度</span></span><br><span class="line">    <span class="attr">lrcType</span>: <span class="number">3</span>, <span class="comment">//歌词传递方式</span></span><br><span class="line">    <span class="attr">audio</span>: [ <span class="comment">//音频信息,包含以下</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;name1&#x27;</span>, <span class="comment">//音频名称</span></span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;artist1&#x27;</span>, <span class="comment">//音频艺术家</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;url1.mp3&#x27;</span>, <span class="comment">//音频外链</span></span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;cover1.jpg&#x27;</span>, <span class="comment">//音频封面</span></span><br><span class="line">            <span class="attr">lrc</span>: <span class="string">&#x27;lrc1.lrc&#x27;</span>, <span class="comment">//音频歌词，配合上面的lrcType使用</span></span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#ebd0c2&#x27;</span> <span class="comment">//切换到此音频时的主题色，比上面的 theme 优先级高</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;name2&#x27;</span>, <span class="comment">//如果只有一首歌，删掉这一块，如有更多歌曲按此格式逐渐往下添加</span></span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;artist2&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;url2.mp3&#x27;</span>,</span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;cover2.jpg&#x27;</span>,</span><br><span class="line">            <span class="attr">lrc</span>: <span class="string">&#x27;lrc2.lrc&#x27;</span>,</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#46718b&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>url添加歌曲方法</li></ol><ul><li>链接方式url<ul><li>网易云网页播放一首歌曲</li><li>将网址中的 id 进行复制：<a href="https://music.163.com/#/song?id=1411358329%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF1411358329">https://music.163.com/#/song?id=1411358329，也就是1411358329</a></li><li>将下面代码中的 id 修改为你想添加歌曲的 id：<a href="http://music.163.com/song/media/outer/url?id=xxx.mp3">http://music.163.com/song/media/outer/url?id=xxx.mp3</a> （网易云音乐在线播放歌曲模板），即<a href="http://music.163.com/song/media/outer/url?id=1411358329.mp3">http://music.163.com/song/media/outer/url?id=1411358329.mp3</a></li></ul></li><li>本地方式url<ul><li>先下载好音频问价</li><li>然后放在themes\hexo-theme-next\source\images里 </li><li>url为 ‘&#x2F;images&#x2F;音频名字.mp3’</li></ul></li></ul><ol start="4"><li>引用头文件<br>我仍然把播放器放在了原来外链播放器的位置blog\themes\hexo-theme-next\layout\_macro\sidebar.swig,内容为：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（也可以放在在路径：blog&#x2F;themes&#x2F;hexo-theme-next&#x2F;layout&#x2F;_layout.swig 文件，然后将下面的代码添加到：&lt;body itemscope …&gt; （在body里面就可以）)</p><p>完成后需要重新部署才能看到效果</p><p>aplayer我采用的是默认的效果，详细信息请查阅 <a href="https://aplayer.js.org/#/home">官方文档</a></p><ol start="5"><li>因为了有了 aplayer 插件 所有原先的 back2top 会被遮挡 需要重新调整位置。 没有影响则可不调整(TODO)，放到sidebar没有影响，如果放在llayout中，修改如下：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">// <span class="attribute">left</span>: <span class="number">30px</span>; // 原先修改过后的位置 加了aplayer后 重新定义位置如下</span><br><span class="line"><span class="attribute">left</span>: <span class="number">15%</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-32-删除了默认的landscope主题-性能优化-TODO"><a href="#3-32-删除了默认的landscope主题-性能优化-TODO" class="headerlink" title="3.32 删除了默认的landscope主题(性能优化)(TODO)"></a>3.32 删除了默认的landscope主题(性能优化)(TODO)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">压缩内存</span><br></pre></td></tr></table></figure><h3 id="3-33-评论系统"><a href="#3-33-评论系统" class="headerlink" title="3.33 评论系统"></a>3.33 评论系统</h3><p>根据网上对国内国外的评价系统对比，可知Valine是近几年大受欢迎的博客评价系统，但由于作者已经放弃了对 Valine 的维护，bug一堆尚未解决，所以最终敲定用基于Valine开发的新版本<a href="https://waline.js.org/">Waline</a>作为本博客的评价系统。<strong>（但我的评价是如果hexo版本不高，建议还是用valine就行了，又快又方便），好像next自带的gitalk也可以评论，有时间可以试试<a href="https://blog.douchen.life/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEGitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">配置gittalk</a></strong></p><ol><li>LeanCloud 设置 (数据库)<br>注意！：请使用中国大陆版，国外版已被禁止国内使用<ul><li>Leancloud已经禁止了国内访问国际版 <a href="https://forum.leancloud.cn/t/2022-8/25408">https://forum.leancloud.cn/t/2022-8/25408</a></li></ul></li></ol><ul><li>(1) 登录或注册<a href="https://console.leancloud.app/login">LeanCloud</a> 并进入 <a href="https://console.leancloud.app/apps">控制台</a></li><li>(2) 点击左上角 创建应用 并起一个你喜欢的名字 (请选择免费的开发版): </li><li>(3) 进入应用，选择左下角的 设置 &gt; 应用凭证。你可以看到你的 APP ID,APP Key 和 Master Key。请记录它们，以便后续使用。<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.png"></li></ul><ol><li>Vercel 部署 (服务端)</li></ol><ul><li>(1) 点击进入<a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">Vercel</a>,注册登录</li><li>(2) 选择git 作用域以及输入仓库名（最终我的仓库名为midoli_blog）,并点击 Create 继续:<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2.jpg"><br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B21.jpg"></li><li>(3) 此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名，请等待一会儿</li><li>(4) 构建结束后，点击顶部信息，并点击仓库，找到Settings - Environment Variables 进入环境变量配置页，并配置三个环境变量 <strong>LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY</strong>。它们的值分别对应上一步在 LeanCloud 中获得的 <strong>APP ID, APP KEY, Master Key</strong>。（需要进入项目中的 Settings，而不是总设置里，总设置里没有 Environment Variables 选项配置）<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B22.jpg"><br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B23.png"><br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B24.png"></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果你使用 LeanCloud 国内版，请额外配置 LEAN_SERVER 环境变量，值为你绑定好的域名。</span><br></pre></td></tr></table></figure><ul><li>(5) 环境变量配置完成之后点击顶部的 Deployments 点击顶部最新的一次部署右侧的 Redeploy 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</li><li>(6) 此时会跳转到 Overview 界面开始部署，等待片刻后 STATUS 会变成 Ready。此时请点击 Visit ，即可跳转到部署好的网站地址，此地址即为你的服务端地址</li></ul><ol><li>绑定域名 (可选)(TODO)</li></ol><ul><li>(1) 点击顶部的 Settings - Domains 进入域名配置页</li><li>(2) 输入需要绑定的域名并点击 Add<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B25.png"></li><li>(3) 在域名服务器商处添加新的 CNAME 解析记录</li></ul><table><thead><tr><th>Type</th><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>CNAME</td><td>example</td><td>cname.vercel-dns.com</td></tr></tbody></table><ul><li>(4) 等待生效，你可以通过自己的域名来访问了<ul><li>评论系统：example.yourdomain.com</li><li>评论管理：example.yourdomain.com&#x2F;ui<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B26.png"></li></ul></li></ul><ol start="4"><li>在Next中配置</li></ol><ul><li>先到你hexo的站点目录下安装waline：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @waline/hexo-next --save</span><br></pre></td></tr></table></figure><ul><li>找到Next主题配置文件，_config.yml进行如下配置，方便日后升级覆盖：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Waline 评论</span></span><br><span class="line"><span class="comment"># For more information: https://waline.js.org, https://github.com/walinejs/waline</span></span><br><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启</span></span><br><span class="line">  <span class="attr">serverURL:</span> <span class="string">blog-waline-comment.vercel.app</span> <span class="comment"># Waline #服务端地址，我们这里就是上面部署的 Vercel 地址</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎评论呀~</span> <span class="comment"># #评论框的默认文字</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># 头像风格</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># 自定义评论框上面的三个输入框的内容</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># 评论数量多少时显示分页</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span> <span class="comment"># 语言, 可选值: en, zh-cn</span></span><br><span class="line">  <span class="comment"># Warning: 不要同时启用 `waline.visitor` 以及 `leancloud_visitors`.</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># 文章阅读统计</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># 如果为 false , 评论数量只会在当前评论页面显示, 主页则不显示</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [<span class="string">nick</span>, <span class="string">mail</span>] <span class="comment"># 设置用户评论时必填的信息，[nick,mail]: [nick] | [nick, mail]</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="comment"># Set custom library cdn url</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol start="5"><li>添加评论表情包<br>在主题配置文件下的 waline 添加如下 emoji 代码<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Waline 评论</span></span><br><span class="line"><span class="comment"># For more information: https://waline.js.org, https://github.com/walinejs/waline</span></span><br><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启</span></span><br><span class="line">  <span class="string">......</span></span><br><span class="line">  <span class="attr">emoji:</span> [</span><br><span class="line">      <span class="string">https://unpkg.com/@waline/emojis@1.1.0/tw-emoji</span>, <span class="comment"># 加不加https头都可以</span></span><br><span class="line">      <span class="string">//unpkg.com/@waline/emojis@1.1.0/bilibili</span>,</span><br><span class="line">      <span class="string">//unpkg.com/@waline/emojis@1.1.0/alus</span>,</span><br><span class="line">      <span class="string">https://unpkg.com/@waline/emojis@1.1.0/weibo</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>更多表情参考 <a href="https://waline.js.org/guide/client/emoji.html">自定义表情</a></li></ol><p>还有一个问题 就是大伙评论的东西 不翻墙刷新不出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原因 jsdeliver被墙 参考链接🔗: [jsdelivr被墙,hexo-<span class="keyword">next</span>切换为自定义CDN](https:<span class="regexp">//</span>www.xygblog.com<span class="regexp">/p/</span><span class="number">8</span>ebdba58/)</span><br></pre></td></tr></table></figure><ol start="6"><li>leanClound作为数据库，同时可以用来作为图床存储文件，使其文件添加url地址<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.33%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B27.png"></li></ol><h3 id="3-33-1-评论-邮箱通知-TODO"><a href="#3-33-1-评论-邮箱通知-TODO" class="headerlink" title="3.33.1 评论-邮箱通知(TODO)"></a>3.33.1 评论-邮箱通知(TODO)</h3><p><a href="https://waline.js.org/guide/get-started/">详细可查看官方文档</a><br>当网站有用户发布评论或者用户回复评论时，Waline 支持对博主和回复评论作者进行通知。</p><ul><li>博主通知支持多种方式，包括 QQ、微信、邮件等。</li><li>当访客的评论收到回复时，我们会对访客进行邮件通知。</li></ul><p>具体步骤 可看 <a href="https://blog.csdn.net/Bennnnnnn/article/details/128000842?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-12-128000842-blog-83094693.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-12-128000842-blog-83094693.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=18">Hexo-Next主题搭建个人博客最新配置教程！</a>的<strong>评论-邮箱通知</strong></p><h3 id="3-34-背景图上传CDN图床-性能优化-TODO"><a href="#3-34-背景图上传CDN图床-性能优化-TODO" class="headerlink" title="3.34 背景图上传CDN图床(性能优化) (TODO)"></a>3.34 背景图上传CDN图床(性能优化) (TODO)</h3><p>由于无缓存刷新（或者第一次加载页面）的时候 背景图片加载很慢（只有900多k）所以上传到CDN图床 <a href="https://cdnjson.com/">https://cdnjson.com/</a></p><p>背景图链接：<a href="https://cdnjson.com/images/2022/11/21/bg1.jpg">https://cdnjson.com/images/2022/11/21/bg1.jpg</a></p><h3 id="3-35-通过修改-busuanzi-的解决-TODO"><a href="#3-35-通过修改-busuanzi-的解决-TODO" class="headerlink" title="3.35 通过修改 busuanzi 的解决(TODO)"></a>3.35 通过修改 busuanzi 的解决(TODO)</h3><ul><li>新建 busuanzi.js 到 themes\hexo-theme-next\source\js\ 目录下，并copy</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bszCaller, bszTag; !<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> c, d, e, a = !<span class="number">1</span>, b = []; ready = <span class="keyword">function</span> (<span class="params">c</span>) &#123; <span class="keyword">return</span> a || <span class="string">&quot;interactive&quot;</span> === <span class="variable language_">document</span>.<span class="property">readyState</span> || <span class="string">&quot;complete&quot;</span> === <span class="variable language_">document</span>.<span class="property">readyState</span> ? c.<span class="title function_">call</span>(<span class="variable language_">document</span>) : b.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> c.<span class="title function_">call</span>(<span class="variable language_">this</span>) &#125;), <span class="variable language_">this</span> &#125;, d = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>, c = b.<span class="property">length</span>; c &gt; a; a++)b[a].<span class="title function_">apply</span>(<span class="variable language_">document</span>); b = [] &#125;, e = <span class="keyword">function</span> (<span class="params"></span>) &#123; a || (a = !<span class="number">0</span>, d.<span class="title function_">call</span>(<span class="variable language_">window</span>), <span class="variable language_">document</span>.<span class="property">removeEventListener</span> ? <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, e, !<span class="number">1</span>) : <span class="variable language_">document</span>.<span class="property">attachEvent</span> &amp;&amp; (<span class="variable language_">document</span>.<span class="title function_">detachEvent</span>(<span class="string">&quot;onreadystatechange&quot;</span>, e), <span class="variable language_">window</span> == <span class="variable language_">window</span>.<span class="property">top</span> &amp;&amp; (<span class="built_in">clearInterval</span>(c), c = <span class="literal">null</span>))) &#125;, <span class="variable language_">document</span>.<span class="property">addEventListener</span> ? <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, e, !<span class="number">1</span>) : <span class="variable language_">document</span>.<span class="property">attachEvent</span> &amp;&amp; (<span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;onreadystatechange&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="regexp">/loaded|complete/</span>.<span class="title function_">test</span>(<span class="variable language_">document</span>.<span class="property">readyState</span>) &amp;&amp; <span class="title function_">e</span>() &#125;), <span class="variable language_">window</span> == <span class="variable language_">window</span>.<span class="property">top</span> &amp;&amp; (c = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">try</span> &#123; a || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">doScroll</span>(<span class="string">&quot;left&quot;</span>) &#125; <span class="keyword">catch</span> (b) &#123; <span class="keyword">return</span> &#125; <span class="title function_">e</span>() &#125;, <span class="number">5</span>))) &#125;(), bszCaller = &#123; <span class="attr">fetch</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123; <span class="keyword">var</span> c = <span class="string">&quot;BusuanziCallback_&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1099511627776</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()); <span class="variable language_">window</span>[c] = <span class="variable language_">this</span>.<span class="title function_">evalCall</span>(b), a = a.<span class="title function_">replace</span>(<span class="string">&quot;=BusuanziCallback&quot;</span>, <span class="string">&quot;=&quot;</span> + c), scriptTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;SCRIPT&quot;</span>), scriptTag.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>, scriptTag.<span class="property">defer</span> = !<span class="number">0</span>, scriptTag.<span class="property">src</span> = a, scriptTag.<span class="property">referrerPolicy</span> = <span class="string">&quot;no-referrer-when-downgrade&quot;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;HEAD&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(scriptTag) &#125;, <span class="attr">evalCall</span>: <span class="keyword">function</span> (<span class="params">a</span>) &#123; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123; <span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">try</span> &#123; <span class="title function_">a</span>(b), s = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[src*=BusuanziCallback]&#x27;</span>), s.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(s) &#125; <span class="keyword">catch</span> (c) &#123; bszTag.<span class="title function_">hides</span>() &#125; &#125;) &#125; &#125; &#125;, bszCaller.<span class="title function_">fetch</span>(<span class="string">&quot;//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback&quot;</span>, <span class="keyword">function</span> (<span class="params">a</span>) &#123; bszTag.<span class="title function_">texts</span>(a), bszTag.<span class="title function_">shows</span>() &#125;), bszTag = &#123; <span class="attr">bszs</span>: [<span class="string">&quot;site_pv&quot;</span>, <span class="string">&quot;page_pv&quot;</span>, <span class="string">&quot;site_uv&quot;</span>], <span class="attr">texts</span>: <span class="keyword">function</span> (<span class="params">a</span>) &#123; <span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">b</span>) &#123; <span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_value_&quot;</span> + b); c &amp;&amp; (c.<span class="property">innerHTML</span> = a[b]) &#125;) &#125;, <span class="attr">hides</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123; <span class="keyword">var</span> b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_container_&quot;</span> + a); b &amp;&amp; (b.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>) &#125;) &#125;, <span class="attr">shows</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123; <span class="keyword">var</span> b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_container_&quot;</span> + a); b &amp;&amp; (b.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;inline&quot;</span>) &#125;) &#125; &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以把修改后的静态文件放在博客里，然后修改 themes\hexo-theme-next\layout_third-party\statistics\busuanzi-counter.njk &lt;script&gt; 中的 src</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.busuanzi_count.enable %&#125;</span><br><span class="line">  &lt;script&#123;&#123; pjax &#125;&#125; async src=&quot;/js/busuanzi.js&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>冲突解决原理参考链接🔗：<a href="https://ouuan.moe/post/2022/08/busuanzi-and-live2d">https://ouuan.moe/post/2022/08/busuanzi-and-live2d</a></p><h3 id="3-36-不蒜子的访客人数和文章阅读统计功能"><a href="#3-36-不蒜子的访客人数和文章阅读统计功能" class="headerlink" title="3.36 不蒜子的访客人数和文章阅读统计功能"></a>3.36 不蒜子的访客人数和文章阅读统计功能</h3><p>NexT主题已集成了不蒜子的访客人数和文章阅读统计功能</p><ul><li>在主题配置文件中</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span> <span class="comment"># 总访问人数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span> <span class="comment"># 总访问次数</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span> <span class="comment"># 文章访问次数 注意：不在首页显示每篇文章的阅读次数，点击全文阅读即显示阅读次数（起初以为是与live-2d代码冲突的问题）</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只开启了文章访问次数 总访问人数和总访问次数有bug尚未修复 如需开启请先修复</p><p>修复参考链接🔗: <a href="https://muyuuuu.github.io/2019/11/22/busuanzi-notdisplay/">https://muyuuuu.github.io/2019/11/22/busuanzi-notdisplay/</a></p><h3 id="3-37-文末尾版权声明"><a href="#3-37-文末尾版权声明" class="headerlink" title="3.37 文末尾版权声明"></a>3.37 文末尾版权声明</h3><p>主题配置文件中直接搜索并且修改以下内容即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="3-37-友情链接"><a href="#3-37-友情链接" class="headerlink" title="3.37 友情链接"></a>3.37 友情链接</h3><p>主题配置文件中直接搜索关键字 Blog rolls,设置即可：</p><ul><li>icon：设置图标</li><li>title：标题</li><li>links：输入你的友情链接，可以直接修改或者添加</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Links</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: http://yoursite.com</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/jj6666djdbbd?type=blog</span></span><br><span class="line">  <span class="attr">Luogu:</span> <span class="string">https://www.luogu.com.cn/user/914079</span></span><br></pre></td></tr></table></figure><h3 id="3-38-添加RSS订阅-TODO-没有设置"><a href="#3-38-添加RSS订阅-TODO-没有设置" class="headerlink" title="3.38 添加RSS订阅(TODO,没有设置)"></a>3.38 添加RSS订阅(TODO,没有设置)</h3><ul><li>首先执行命令</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>打开 Hexo 站点下的 _config.yml ,添加如下配置：<br>直接在底部复制粘贴以下内容即可</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feed</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br></pre></td></tr></table></figure><h3 id="3-39-打赏功能-TODO"><a href="#3-39-打赏功能-TODO" class="headerlink" title="3.39 打赏功能(TODO)"></a>3.39 打赏功能(TODO)</h3><p>在 主题的 config中找到如下的 raward功能</p><p>enable选择打开，comment输入文字<br>在缀主题的images文件夹中把你的付款码的图片放到 &#x2F;blog &#x2F;themes &#x2F;next &#x2F;source &#x2F;images&#x2F; 中，它会按照这个路径寻找图片<br><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/3.39%E6%89%93%E8%B5%8F.png"></p><h3 id="3-40-博客基本信息"><a href="#3-40-博客基本信息" class="headerlink" title="3.40 博客基本信息"></a>3.40 博客基本信息</h3><p>修改 博客的标题，副标题，描述，等等基本信息。。。</p><ul><li>在 blog根目录下打开 _config.yml 配置文件，直接修改以下信息即可<br>注意，语言要改成 zh-CN即中国，其他的自己随便改改</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">```</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.41 文章分享功能(TODO，找不到该属性)</span></span><br><span class="line"></span><br><span class="line"><span class="string">打开themes/next/_config.yml</span> <span class="string">搜索关键字needmoreshare2</span> <span class="string">修改为下面设置</span></span><br><span class="line"></span><br><span class="line"><span class="string">```yml</span></span><br><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postbottom:</span> <span class="comment">#postbottom为文章末尾分享 float则是在页面侧端分享</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="comment">#位置</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">bottomCenter</span></span><br><span class="line">      <span class="comment">#可分享网站</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line">  <span class="attr">float:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">vertical</span></span><br><span class="line">      <span class="comment">#位置</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">topRight</span></span><br><span class="line">       <span class="comment">#可分享网站</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br></pre></td></tr></table></figure><h3 id="3-42-修改文章底部的-号的标签，改为图标-TODO"><a href="#3-42-修改文章底部的-号的标签，改为图标-TODO" class="headerlink" title="3.42 修改文章底部的#号的标签，改为图标(TODO)"></a>3.42 修改文章底部的#号的标签，改为图标(TODO)</h3><p>修改模板&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</p><p>搜索 rel&#x3D;“tag”&gt;#，将 # 换成<i class="fa fa-tag"></i></p><h3 id="3-43-文章加密访问-encrypt"><a href="#3-43-文章加密访问-encrypt" class="headerlink" title="3.43 文章加密访问(encrypt)"></a>3.43 文章加密访问(encrypt)</h3><p>参考：<a href="https://blog.csdn.net/weixin_58068682/article/details/116614622">https://blog.csdn.net/weixin_58068682/article/details/116614622</a></p><ol><li>安装</li></ol><ul><li>使用hexo-blog-encrypt插件进行加密</li><li>安装如下命令</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span> <span class="string">hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure><ul><li>快速使用</li><li>将 “password” 字段添加到您文章信息头就像这样</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016/7/13 20:46:25</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Diary</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> Testing</span><br><span class="line"><span class="bullet">  -</span> Another Tag</span><br><span class="line"><span class="section">password: 123456</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>再使用 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在本地预览加密的文章</p><ol start="2"><li><p>设置优先级<br>文章信息头 &gt; 按标签加密</p></li><li><p>高级设置<br>文章信息头</p></li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> 作为日记加密</span><br><span class="line">date: 2016-03-30 21:12:21</span><br><span class="line">password: mikemessi</span><br><span class="line">abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">message: 您好, 这里需要密码.</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line"><span class="section">wrong<span class="emphasis">_hash_</span>message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> abstract：用于设置加密文章显示的摘要。</span><br><span class="line"><span class="bullet">-</span> message：输入密码提示。</span><br><span class="line"><span class="bullet">-</span> wrong<span class="emphasis">_pass_</span>message: 输入错误提示</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>对博文禁用 Tag 加密</li></ol><p>只需要将博文头部的 password 设置为 “” 即可取消 Tag 加密.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Callback Test</span><br><span class="line">date: 2019-12-21 11:54:07</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">    -</span> A Tag should be encrypted</span><br><span class="line"><span class="section">password: &quot;&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Use a &quot;&quot; to diable tag encryption.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-44-全局播放背景音乐（使用-Pajx-实现）-切换页面不打断"><a href="#3-44-全局播放背景音乐（使用-Pajx-实现）-切换页面不打断" class="headerlink" title="3.44 全局播放背景音乐（使用 Pajx 实现）-切换页面不打断"></a>3.44 全局播放背景音乐（使用 Pajx 实现）-切换页面不打断</h3><p>即实现页面跳转刷新后音乐不间断播放 （在博客文章中的网易云插件无法实现全局播放。）</p><ul><li><p>打开themes\hexo-theme-next\layout文件夹找到_layout.swig</p></li><li><p>在&lt;\head&gt;标签前添加下面代码，并保存。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>   //粘贴到这里 </span><br><span class="line">  <span class="comment">&lt;!--pjax：防止跳转页面音乐暂停--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在主题的配置文件中找到pajx，将它设置为true，并保存。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pjax</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h1><h3 id="4-1-新建Repository"><a href="#4-1-新建Repository" class="headerlink" title="4.1 新建Repository"></a>4.1 新建Repository</h3><p>在github上新建一个 Repository，Repository name一定要是 <strong>你的用户名</strong>.github.io</p><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/4.1%20%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.jpg"></p><h3 id="4-2-复制仓库地址"><a href="#4-2-复制仓库地址" class="headerlink" title="4.2 复制仓库地址"></a>4.2 复制仓库地址</h3><p>建议复制ssh，</p><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/4.2%E5%A4%8D%E5%88%B6%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.jpg"></p><h3 id="4-3-修改站点配置文件"><a href="#4-3-修改站点配置文件" class="headerlink" title="4.3 修改站点配置文件"></a>4.3 修改站点配置文件</h3><p><img src="/2024/08/07/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/4.3%20%E9%83%A8%E7%BD%B2%E7%AB%99%E7%82%B9%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.jpg"></p><h3 id="4-4-安装插件"><a href="#4-4-安装插件" class="headerlink" title="4.4 安装插件"></a>4.4 安装插件</h3><p>在Blog目录打开cmd命令输入如下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="4-5-部署到github"><a href="#4-5-部署到github" class="headerlink" title="4.5 部署到github"></a>4.5 部署到github</h3><p>继续在cmd里面分别运行一下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d  # hexo d 表示执行部署</span><br></pre></td></tr></table></figure><h3 id="4-6-访问站点"><a href="#4-6-访问站点" class="headerlink" title="4.6 访问站点"></a>4.6 访问站点</h3><p>通过 <strong>你的用户名</strong>.github.io 访问你部署在github的博客</p><h3 id="4-7-绑定个人域名"><a href="#4-7-绑定个人域名" class="headerlink" title="4.7 绑定个人域名"></a>4.7 绑定个人域名</h3><p>参考：<a href="https://blog.csdn.net/qq_44161695/article/details/117605288">https://blog.csdn.net/qq_44161695/article/details/117605288</a></p><hr><p>本片大部分参考的该博文，但有些地方存在问题，因此做重新梳理。<a href="https://blog.csdn.net/loze/article/details/94208742">https://blog.csdn.net/loze/article/details/94208742</a></p><p>文中带(TODO)表示我未进行设置</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、安装下载Node-js、Vscode、Git&quot;&gt;&lt;a href=&quot;#一、安装下载Node-js、Vscode、Git&quot; class=&quot;headerlink&quot; title=&quot;一、安装下载Node.js、Vscode、Git&quot;&gt;&lt;/a&gt;一、安装下载Node.js、Vscode、Git&lt;/h1&gt;&lt;p&gt;1.1 安装可以看这篇博文的第2点 《在Windows系统下安装Node.js》的1-6点（补充除外）：&lt;a href=&quot;https://blog.csdn.net/loze/article/details/94208742&quot;&gt;https://blog.csdn.net/loze/article/details/94208742&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/07/21/hello-world-1/"/>
    <id>http://example.com/2024/07/21/hello-world-1/</id>
    <published>2024-07-21T03:12:21.000Z</published>
    <updated>2024-07-21T11:34:31.388Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a21223aa25b98d7f8aba61d7c704b425a11524de034dcb63c97de03c4e941f73">8857952509ef9895f61625fe2d594ef339e937d6685a3f98341208c8d2d367f4ed12a2b0860d69df027c92cb2108d6dfadf558d07b3d804c3bad8bcbb17e88ac</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="作为日记加密" scheme="http://example.com/tags/%E4%BD%9C%E4%B8%BA%E6%97%A5%E8%AE%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/07/20/hello-world/"/>
    <id>http://example.com/2024/07/20/hello-world/</id>
    <published>2024-07-19T16:14:25.343Z</published>
    <updated>2024-07-19T16:14:25.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
